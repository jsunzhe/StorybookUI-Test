import {
  __commonJS,
  __name,
  __require,
  __toESM as __toESM2,
  getControlId,
  getControlSetterButtonId
} from "./chunk-5OPI5CQV.js";
import {
  AddIcon,
  Button,
  ChevronDownIcon,
  ChevronRightIcon,
  ChevronSmallDownIcon,
  ChevronSmallUpIcon,
  Code,
  DocumentIcon,
  EmptyTabContent,
  ErrorFormatter,
  EyeCloseIcon,
  EyeIcon,
  FlexBar,
  Form,
  H2,
  H3,
  IconButton,
  Link2,
  LinkIcon,
  Loader,
  ResetWrapper,
  ShareAltIcon,
  SubtractIcon,
  SyntaxHighlighter,
  TabsState,
  UndoIcon,
  WithTooltipPure,
  Zoom,
  ZoomIcon,
  ZoomOutIcon,
  ZoomResetIcon,
  codeCommon,
  components2,
  getStoryHref,
  nameSpaceClassNames,
  withReset
} from "./chunk-T75UM54U.js";
import {
  ActionBar
} from "./chunk-KQN25W5I.js";
import {
  ThemeProvider,
  convert,
  ensure,
  ignoreSsrWarning,
  styled,
  themes,
  useTheme
} from "./chunk-CCRSJVTD.js";
import {
  SNIPPET_RENDERED,
  SourceType,
  includeConditionalArg,
  require_channels
} from "./chunk-4ZEM2PHZ.js";
import {
  require_client_logger
} from "./chunk-LHOSQLWN.js";
import {
  require_core_events
} from "./chunk-7ZSBYTHS.js";
import {
  require_preview_api
} from "./chunk-ZLWVYHQP.js";
import {
  dedent
} from "./chunk-JLBFQ2EK.js";
import {
  require_react
} from "./chunk-IP6FQFDQ.js";
import {
  __toESM
} from "./chunk-7D4SUZUM.js";

// node_modules/@storybook/addon-docs/dist/_browser-chunks/chunk-UZFOWTVP.js
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n2) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var t = arguments[e2];
      for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n2[r2] = t[r2]);
    }
    return n2;
  }, _extends.apply(null, arguments);
}
__name(_extends, "_extends");
function _assertThisInitialized(e2) {
  if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
__name(_assertThisInitialized, "_assertThisInitialized");
function _setPrototypeOf(t, e2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e22) {
    return t2.__proto__ = e22, t2;
  }, _setPrototypeOf(t, e2);
}
__name(_setPrototypeOf, "_setPrototypeOf");
function _inheritsLoose(t, o2) {
  t.prototype = Object.create(o2.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o2);
}
__name(_inheritsLoose, "_inheritsLoose");
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
    return t2.__proto__ || Object.getPrototypeOf(t2);
  }, _getPrototypeOf(t);
}
__name(_getPrototypeOf, "_getPrototypeOf");
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n2) {
    return "function" == typeof t;
  }
}
__name(_isNativeFunction, "_isNativeFunction");
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = __name(function _isNativeReflectConstruct2() {
    return !!t;
  }, "_isNativeReflectConstruct"))();
}
__name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
function _construct(t, e2, r2) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e2);
  var p2 = new (t.bind.apply(t, o2))();
  return r2 && _setPrototypeOf(p2, r2.prototype), p2;
}
__name(_construct, "_construct");
function _wrapNativeSuper(t) {
  var r2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = __name(function _wrapNativeSuper2(t2) {
    if (null === t2 || !_isNativeFunction(t2)) return t2;
    if ("function" != typeof t2) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r2) {
      if (r2.has(t2)) return r2.get(t2);
      r2.set(t2, Wrapper23);
    }
    function Wrapper23() {
      return _construct(t2, arguments, _getPrototypeOf(this).constructor);
    }
    __name(Wrapper23, "Wrapper");
    return Wrapper23.prototype = Object.create(t2.prototype, {
      constructor: {
        value: Wrapper23,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), _setPrototypeOf(Wrapper23, t2);
  }, "_wrapNativeSuper"), _wrapNativeSuper(t);
}
__name(_wrapNativeSuper, "_wrapNativeSuper");
var ERRORS = {
  "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
  "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
  "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
  "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
  "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
  "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
  "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
  "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
  "9": "Please provide a number of steps to the modularScale helper.\n\n",
  "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "11": 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',
  "12": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',
  "13": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',
  "14": 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "15": 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "16": "You must provide a template to this method.\n\n",
  "17": "You passed an unsupported selector state to this method.\n\n",
  "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "23": "fontFace expects a name of a font-family.\n\n",
  "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "25": "fontFace expects localFonts to be an array.\n\n",
  "26": "fontFace expects fileFormats to be an array.\n\n",
  "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
  "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
  "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
  "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "35": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "36": "Property must be a string value.\n\n",
  "37": "Syntax Error at %s.\n\n",
  "38": "Formula contains a function that needs parentheses at %s.\n\n",
  "39": "Formula is missing closing parenthesis at %s.\n\n",
  "40": "Formula has too many closing parentheses at %s.\n\n",
  "41": "All values in a formula must have the same unit or be unitless.\n\n",
  "42": "Please provide a number of steps to the modularScale helper.\n\n",
  "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
  "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
  "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
  "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
  "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
  "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "53": "fontFace expects localFonts to be an array.\n\n",
  "54": "fontFace expects fileFormats to be an array.\n\n",
  "55": "fontFace expects a name of a font-family.\n\n",
  "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
  "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "61": "Property must be a string value.\n\n",
  "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "63": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
  "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
  "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
  "67": "You must provide a template to this method.\n\n",
  "68": "You passed an unsupported selector state to this method.\n\n",
  "69": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',
  "70": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',
  "71": 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "72": 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "73": "Please provide a valid CSS variable.\n\n",
  "74": "CSS variable not found and no default was provided.\n\n",
  "75": "important requires a valid style object, got a %s instead.\n\n",
  "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
  "77": 'remToPx expects a value in "rem" but you provided it in "%s".\n\n',
  "78": 'base must be set in "px" or "%" but you set it in "%s".\n'
};
function format() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var a2 = args[0];
  var b2 = [];
  var c2;
  for (c2 = 1; c2 < args.length; c2 += 1) {
    b2.push(args[c2]);
  }
  b2.forEach(function(d2) {
    a2 = a2.replace(/%[a-z]/, d2);
  });
  return a2;
}
__name(format, "format");
var PolishedError = (function(_Error) {
  _inheritsLoose(PolishedError2, _Error);
  function PolishedError2(code) {
    var _this;
    if (false) {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
    } else {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      _this = _Error.call(this, format.apply(void 0, [ERRORS[code]].concat(args))) || this;
    }
    return _assertThisInitialized(_this);
  }
  __name(PolishedError2, "PolishedError");
  return PolishedError2;
})(_wrapNativeSuper(Error));
function endsWith(string, suffix) {
  return string.substr(-suffix.length) === suffix;
}
__name(endsWith, "endsWith");
var cssRegex$1 = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
function stripUnit(value2) {
  if (typeof value2 !== "string") return value2;
  var matchedValue = value2.match(cssRegex$1);
  return matchedValue ? parseFloat(value2) : value2;
}
__name(stripUnit, "stripUnit");
var pxtoFactory = __name(function pxtoFactory2(to) {
  return function(pxval, base) {
    if (base === void 0) {
      base = "16px";
    }
    var newPxval = pxval;
    var newBase = base;
    if (typeof pxval === "string") {
      if (!endsWith(pxval, "px")) {
        throw new PolishedError(69, to, pxval);
      }
      newPxval = stripUnit(pxval);
    }
    if (typeof base === "string") {
      if (!endsWith(base, "px")) {
        throw new PolishedError(70, to, base);
      }
      newBase = stripUnit(base);
    }
    if (typeof newPxval === "string") {
      throw new PolishedError(71, pxval, to);
    }
    if (typeof newBase === "string") {
      throw new PolishedError(72, base, to);
    }
    return "" + newPxval / newBase + to;
  };
}, "pxtoFactory");
var pixelsto = pxtoFactory;
var em = pixelsto("em");
var rem = pixelsto("rem");
function colorToInt(color) {
  return Math.round(color * 255);
}
__name(colorToInt, "colorToInt");
function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}
__name(convertToInt, "convertToInt");
function hslToRgb(hue, saturation, lightness, convert2) {
  if (convert2 === void 0) {
    convert2 = convertToInt;
  }
  if (saturation === 0) {
    return convert2(lightness, lightness, lightness);
  }
  var huePrime = (hue % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert2(finalRed, finalGreen, finalBlue);
}
__name(hslToRgb, "hslToRgb");
var namedColorMap = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function nameToHex(color) {
  if (typeof color !== "string") return color;
  var normalizedColorName = color.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
}
__name(nameToHex, "nameToHex");
var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function parseToRgb(color) {
  if (typeof color !== "string") {
    throw new PolishedError(3);
  }
  var normalizedColor = nameToHex(color);
  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }
  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha
    };
  }
  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }
  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }
  var rgbMatched = rgbRegex.exec(normalizedColor);
  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }
  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4]) > 1 ? parseFloat("" + rgbaMatched[4]) / 100 : parseFloat("" + rgbaMatched[4])
    };
  }
  var hslMatched = hslRegex.exec(normalizedColor);
  if (hslMatched) {
    var hue = parseInt("" + hslMatched[1], 10);
    var saturation = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);
    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }
    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }
  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);
    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
    var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";
    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }
    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4]) > 1 ? parseFloat("" + hslaMatched[4]) / 100 : parseFloat("" + hslaMatched[4])
    };
  }
  throw new PolishedError(5);
}
__name(parseToRgb, "parseToRgb");
function rgbToHsl(color) {
  var red = color.red / 255;
  var green = color.green / 255;
  var blue = color.blue / 255;
  var max = Math.max(red, green, blue);
  var min = Math.min(red, green, blue);
  var lightness = (max + min) / 2;
  if (max === min) {
    if (color.alpha !== void 0) {
      return {
        hue: 0,
        saturation: 0,
        lightness,
        alpha: color.alpha
      };
    } else {
      return {
        hue: 0,
        saturation: 0,
        lightness
      };
    }
  }
  var hue;
  var delta = max - min;
  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
  switch (max) {
    case red:
      hue = (green - blue) / delta + (green < blue ? 6 : 0);
      break;
    case green:
      hue = (blue - red) / delta + 2;
      break;
    default:
      hue = (red - green) / delta + 4;
      break;
  }
  hue *= 60;
  if (color.alpha !== void 0) {
    return {
      hue,
      saturation,
      lightness,
      alpha: color.alpha
    };
  }
  return {
    hue,
    saturation,
    lightness
  };
}
__name(rgbToHsl, "rgbToHsl");
function parseToHsl(color) {
  return rgbToHsl(parseToRgb(color));
}
__name(parseToHsl, "parseToHsl");
var reduceHexValue = __name(function reduceHexValue2(value2) {
  if (value2.length === 7 && value2[1] === value2[2] && value2[3] === value2[4] && value2[5] === value2[6]) {
    return "#" + value2[1] + value2[3] + value2[5];
  }
  return value2;
}, "reduceHexValue");
var reduceHexValue$1 = reduceHexValue;
function numberToHex(value2) {
  var hex = value2.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
__name(numberToHex, "numberToHex");
function colorToHex(color) {
  return numberToHex(Math.round(color * 255));
}
__name(colorToHex, "colorToHex");
function convertToHex(red, green, blue) {
  return reduceHexValue$1("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
}
__name(convertToHex, "convertToHex");
function hslToHex(hue, saturation, lightness) {
  return hslToRgb(hue, saturation, lightness, convertToHex);
}
__name(hslToHex, "hslToHex");
function hsl(value2, saturation, lightness) {
  if (typeof value2 === "number" && typeof saturation === "number" && typeof lightness === "number") {
    return hslToHex(value2, saturation, lightness);
  } else if (typeof value2 === "object" && saturation === void 0 && lightness === void 0) {
    return hslToHex(value2.hue, value2.saturation, value2.lightness);
  }
  throw new PolishedError(1);
}
__name(hsl, "hsl");
function hsla(value2, saturation, lightness, alpha) {
  if (typeof value2 === "number" && typeof saturation === "number" && typeof lightness === "number" && typeof alpha === "number") {
    return alpha >= 1 ? hslToHex(value2, saturation, lightness) : "rgba(" + hslToRgb(value2, saturation, lightness) + "," + alpha + ")";
  } else if (typeof value2 === "object" && saturation === void 0 && lightness === void 0 && alpha === void 0) {
    return value2.alpha >= 1 ? hslToHex(value2.hue, value2.saturation, value2.lightness) : "rgba(" + hslToRgb(value2.hue, value2.saturation, value2.lightness) + "," + value2.alpha + ")";
  }
  throw new PolishedError(2);
}
__name(hsla, "hsla");
function rgb(value2, green, blue) {
  if (typeof value2 === "number" && typeof green === "number" && typeof blue === "number") {
    return reduceHexValue$1("#" + numberToHex(value2) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value2 === "object" && green === void 0 && blue === void 0) {
    return reduceHexValue$1("#" + numberToHex(value2.red) + numberToHex(value2.green) + numberToHex(value2.blue));
  }
  throw new PolishedError(6);
}
__name(rgb, "rgb");
function rgba(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === "string" && typeof secondValue === "number") {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === "number" && typeof secondValue === "number" && typeof thirdValue === "number" && typeof fourthValue === "number") {
    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === "object" && secondValue === void 0 && thirdValue === void 0 && fourthValue === void 0) {
    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }
  throw new PolishedError(7);
}
__name(rgba, "rgba");
var isRgb = __name(function isRgb2(color) {
  return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
}, "isRgb");
var isRgba = __name(function isRgba2(color) {
  return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && typeof color.alpha === "number";
}, "isRgba");
var isHsl = __name(function isHsl2(color) {
  return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
}, "isHsl");
var isHsla = __name(function isHsla2(color) {
  return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && typeof color.alpha === "number";
}, "isHsla");
function toColorString(color) {
  if (typeof color !== "object") throw new PolishedError(8);
  if (isRgba(color)) return rgba(color);
  if (isRgb(color)) return rgb(color);
  if (isHsla(color)) return hsla(color);
  if (isHsl(color)) return hsl(color);
  throw new PolishedError(8);
}
__name(toColorString, "toColorString");
function curried(f2, length, acc) {
  return __name(function fn() {
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length ? f2.apply(this, combined) : curried(f2, length, combined);
  }, "fn");
}
__name(curried, "curried");
function curry(f2) {
  return curried(f2, f2.length, []);
}
__name(curry, "curry");
function adjustHue(degree, color) {
  if (color === "transparent") return color;
  var hslColor = parseToHsl(color);
  return toColorString(_extends({}, hslColor, {
    hue: hslColor.hue + parseFloat(degree)
  }));
}
__name(adjustHue, "adjustHue");
var curriedAdjustHue = curry(adjustHue);
function guard(lowerBoundary, upperBoundary, value2) {
  return Math.max(lowerBoundary, Math.min(upperBoundary, value2));
}
__name(guard, "guard");
function darken(amount, color) {
  if (color === "transparent") return color;
  var hslColor = parseToHsl(color);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
  }));
}
__name(darken, "darken");
var curriedDarken = curry(darken);
var curriedDarken$1 = curriedDarken;
function desaturate(amount, color) {
  if (color === "transparent") return color;
  var hslColor = parseToHsl(color);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
  }));
}
__name(desaturate, "desaturate");
var curriedDesaturate = curry(desaturate);
function lighten(amount, color) {
  if (color === "transparent") return color;
  var hslColor = parseToHsl(color);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
  }));
}
__name(lighten, "lighten");
var curriedLighten = curry(lighten);
var curriedLighten$1 = curriedLighten;
function mix(weight, color, otherColor) {
  if (color === "transparent") return otherColor;
  if (otherColor === "transparent") return color;
  if (weight === 0) return otherColor;
  var parsedColor1 = parseToRgb(color);
  var color1 = _extends({}, parsedColor1, {
    alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
  });
  var parsedColor2 = parseToRgb(otherColor);
  var color2 = _extends({}, parsedColor2, {
    alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
  });
  var alphaDelta = color1.alpha - color2.alpha;
  var x2 = parseFloat(weight) * 2 - 1;
  var y2 = x2 * alphaDelta === -1 ? x2 : x2 + alphaDelta;
  var z2 = 1 + x2 * alphaDelta;
  var weight1 = (y2 / z2 + 1) / 2;
  var weight2 = 1 - weight1;
  var mixedColor = {
    red: Math.floor(color1.red * weight1 + color2.red * weight2),
    green: Math.floor(color1.green * weight1 + color2.green * weight2),
    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
    alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight))
  };
  return rgba(mixedColor);
}
__name(mix, "mix");
var curriedMix = curry(mix);
var mix$1 = curriedMix;
function opacify(amount, color) {
  if (color === "transparent") return color;
  var parsedColor = parseToRgb(color);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
  });
  return rgba(colorWithAlpha);
}
__name(opacify, "opacify");
var curriedOpacify = curry(opacify);
var curriedOpacify$1 = curriedOpacify;
function saturate(amount, color) {
  if (color === "transparent") return color;
  var hslColor = parseToHsl(color);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
  }));
}
__name(saturate, "saturate");
var curriedSaturate = curry(saturate);
function setHue(hue, color) {
  if (color === "transparent") return color;
  return toColorString(_extends({}, parseToHsl(color), {
    hue: parseFloat(hue)
  }));
}
__name(setHue, "setHue");
var curriedSetHue = curry(setHue);
function setLightness(lightness, color) {
  if (color === "transparent") return color;
  return toColorString(_extends({}, parseToHsl(color), {
    lightness: parseFloat(lightness)
  }));
}
__name(setLightness, "setLightness");
var curriedSetLightness = curry(setLightness);
function setSaturation(saturation, color) {
  if (color === "transparent") return color;
  return toColorString(_extends({}, parseToHsl(color), {
    saturation: parseFloat(saturation)
  }));
}
__name(setSaturation, "setSaturation");
var curriedSetSaturation = curry(setSaturation);
function shade(percentage, color) {
  if (color === "transparent") return color;
  return mix$1(parseFloat(percentage), "rgb(0, 0, 0)", color);
}
__name(shade, "shade");
var curriedShade = curry(shade);
function tint(percentage, color) {
  if (color === "transparent") return color;
  return mix$1(parseFloat(percentage), "rgb(255, 255, 255)", color);
}
__name(tint, "tint");
var curriedTint = curry(tint);
function transparentize(amount, color) {
  if (color === "transparent") return color;
  var parsedColor = parseToRgb(color);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
  });
  return rgba(colorWithAlpha);
}
__name(transparentize, "transparentize");
var curriedTransparentize = curry(transparentize);
var curriedTransparentize$1 = curriedTransparentize;
var Wrapper = styled.div(withReset, ({ theme }) => ({
  backgroundColor: theme.base === "light" ? "rgba(0,0,0,.01)" : "rgba(255,255,255,.01)",
  borderRadius: theme.appBorderRadius,
  border: `1px dashed ${theme.appBorderColor}`,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: 20,
  margin: "25px 0 40px",
  color: curriedTransparentize$1(0.3, theme.color.defaultText),
  fontSize: theme.typography.size.s2
}));
var EmptyBlock = __name((props) => import_react2.default.createElement(Wrapper, { ...props, className: "docblock-emptyblock sb-unstyled" }), "EmptyBlock");
var StyledSyntaxHighlighter = styled(
  SyntaxHighlighter
)(({ theme }) => ({
  // DocBlocks-specific styling and overrides
  fontSize: `${theme.typography.size.s2 - 1}px`,
  lineHeight: "19px",
  margin: "25px 0 40px",
  borderRadius: theme.appBorderRadius,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  "pre.prismjs": {
    padding: 20,
    background: "inherit"
  }
}));
var SourceSkeletonWrapper = styled.div(({ theme }) => ({
  background: theme.background.content,
  borderRadius: theme.appBorderRadius,
  border: `1px solid ${theme.appBorderColor}`,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  margin: "25px 0 40px",
  padding: "20px 20px 20px 22px"
}));
var SourceSkeletonPlaceholder = styled.div(({ theme }) => ({
  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
  background: theme.appBorderColor,
  height: 17,
  marginTop: 1,
  width: "60%",
  [`&:first-child${ignoreSsrWarning}`]: {
    margin: 0
  }
}));
var SourceSkeleton = __name(() => import_react.default.createElement(SourceSkeletonWrapper, null, import_react.default.createElement(SourceSkeletonPlaceholder, null), import_react.default.createElement(SourceSkeletonPlaceholder, { style: { width: "80%" } }), import_react.default.createElement(SourceSkeletonPlaceholder, { style: { width: "30%" } }), import_react.default.createElement(SourceSkeletonPlaceholder, { style: { width: "80%" } })), "SourceSkeleton");
var Source = __name(({
  isLoading,
  error,
  language,
  code,
  dark,
  format: format22 = true,
  ...rest
}) => {
  const { typography } = useTheme();
  if (isLoading) {
    return import_react.default.createElement(SourceSkeleton, null);
  }
  if (error) {
    return import_react.default.createElement(EmptyBlock, null, error);
  }
  const syntaxHighlighter = import_react.default.createElement(
    StyledSyntaxHighlighter,
    {
      bordered: true,
      copyable: true,
      format: format22,
      language: language ?? "jsx",
      className: "docblock-source sb-unstyled",
      ...rest
    },
    code
  );
  if (typeof dark === "undefined") {
    return syntaxHighlighter;
  }
  const overrideTheme = dark ? themes.dark : themes.light;
  return import_react.default.createElement(
    ThemeProvider,
    {
      theme: convert({
        ...overrideTheme,
        fontCode: typography.fonts.mono,
        fontBase: typography.fonts.base
      })
    },
    syntaxHighlighter
  );
}, "Source");

// node_modules/@storybook/addon-docs/dist/blocks.js
var import_react3 = __toESM(require_react());
var import_client_logger = __toESM(require_client_logger());
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var import_react8 = __toESM(require_react());
var import_react9 = __toESM(require_react());
var import_react10 = __toESM(require_react());
var import_react11 = __toESM(require_react());
var import_react12 = __toESM(require_react());
var import_react13 = __toESM(require_react());
var import_react14 = __toESM(require_react());
var import_react15 = __toESM(require_react());
var import_react16 = __toESM(require_react());
var import_react17 = __toESM(require_react());
var import_core_events = __toESM(require_core_events());
var import_react18 = __toESM(require_react());
var e = __toESM(require_react());
var import_react19 = __toESM(require_react());
var import_react20 = __toESM(require_react());
var import_react21 = __toESM(require_react());
var import_react22 = __toESM(require_react());
var import_react23 = __toESM(require_react());
var import_react24 = __toESM(require_react());
var import_react25 = __toESM(require_react());
var import_client_logger2 = __toESM(require_client_logger());
var import_react26 = __toESM(require_react());
var import_client_logger3 = __toESM(require_client_logger());
var import_react27 = __toESM(require_react());
var import_client_logger4 = __toESM(require_client_logger());
var import_react28 = __toESM(require_react());
var import_react29 = __toESM(require_react());
var import_react30 = __toESM(require_react());
var import_react31 = __toESM(require_react());
var import_react32 = __toESM(require_react());
var import_react33 = __toESM(require_react());
var import_react34 = __toESM(require_react());
var import_react35 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_react37 = __toESM(require_react());
var import_react38 = __toESM(require_react());
var import_react39 = __toESM(require_react());
var import_react40 = __toESM(require_react());
var import_react41 = __toESM(require_react());
var import_preview_api = __toESM(require_preview_api());
var import_react42 = __toESM(require_react());
var import_react43 = __toESM(require_react());
var import_react44 = __toESM(require_react());
var import_react45 = __toESM(require_react());
var import_react46 = __toESM(require_react());
var import_react47 = __toESM(require_react());
var import_preview_api2 = __toESM(require_preview_api());
var import_react48 = __toESM(require_react());
var import_core_events2 = __toESM(require_core_events());
var import_react49 = __toESM(require_react());
var import_core_events3 = __toESM(require_core_events());
var import_react50 = __toESM(require_react());
var import_react51 = __toESM(require_react());
var import_react52 = __toESM(require_react());
var import_core_events4 = __toESM(require_core_events());
var import_react53 = __toESM(require_react());
var import_react54 = __toESM(require_react());
var import_react55 = __toESM(require_react());
var import_react56 = __toESM(require_react());
var import_react57 = __toESM(require_react());
var import_react58 = __toESM(require_react());
var import_react59 = __toESM(require_react());
var import_react60 = __toESM(require_react());
var import_react61 = __toESM(require_react());
var import_client_logger5 = __toESM(require_client_logger());
var import_react62 = __toESM(require_react());
var import_react63 = __toESM(require_react());
var import_preview_api3 = __toESM(require_preview_api());
var import_channels = __toESM(require_channels());
var import_preview_api4 = __toESM(require_preview_api());
var import_preview_api5 = __toESM(require_preview_api());
var import_react64 = __toESM(require_react());
var import_react65 = __toESM(require_react());
var import_react66 = __toESM(require_react());
var import_react67 = __toESM(require_react());
var require_memoizerific = __commonJS({
  "../../node_modules/memoizerific/memoizerific.js"(exports, module) {
    (function(f2) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f2();
      } else if (typeof define === "function" && define.amd) {
        define([], f2);
      } else {
        var g2;
        if (typeof window !== "undefined") {
          g2 = window;
        } else if (typeof global !== "undefined") {
          g2 = global;
        } else if (typeof self !== "undefined") {
          g2 = self;
        } else {
          g2 = this;
        }
        g2.memoizerific = f2();
      }
    })(function() {
      var define2, module2, exports2;
      return __name(function e2(t, n2, r2) {
        function s2(o3, u2) {
          if (!n2[o3]) {
            if (!t[o3]) {
              var a2 = typeof __require == "function" && __require;
              if (!u2 && a2) return a2(o3, true);
              if (i2) return i2(o3, true);
              var f2 = new Error("Cannot find module '" + o3 + "'");
              throw f2.code = "MODULE_NOT_FOUND", f2;
            }
            var l2 = n2[o3] = { exports: {} };
            t[o3][0].call(l2.exports, function(e3) {
              var n3 = t[o3][1][e3];
              return s2(n3 ? n3 : e3);
            }, l2, l2.exports, e2, t, n2, r2);
          }
          return n2[o3].exports;
        }
        __name(s2, "s");
        var i2 = typeof __require == "function" && __require;
        for (var o2 = 0; o2 < r2.length; o2++) s2(r2[o2]);
        return s2;
      }, "e")({ 1: [function(_dereq_, module3, exports3) {
        module3.exports = function(forceSimilar) {
          if (typeof Map !== "function" || forceSimilar) {
            var Similar = _dereq_("./similar");
            return new Similar();
          } else {
            return /* @__PURE__ */ new Map();
          }
        };
      }, { "./similar": 2 }], 2: [function(_dereq_, module3, exports3) {
        function Similar() {
          this.list = [];
          this.lastItem = void 0;
          this.size = 0;
          return this;
        }
        __name(Similar, "Similar");
        Similar.prototype.get = function(key) {
          var index;
          if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
            return this.lastItem.val;
          }
          index = this.indexOf(key);
          if (index >= 0) {
            this.lastItem = this.list[index];
            return this.list[index].val;
          }
          return void 0;
        };
        Similar.prototype.set = function(key, val) {
          var index;
          if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
            this.lastItem.val = val;
            return this;
          }
          index = this.indexOf(key);
          if (index >= 0) {
            this.lastItem = this.list[index];
            this.list[index].val = val;
            return this;
          }
          this.lastItem = { key, val };
          this.list.push(this.lastItem);
          this.size++;
          return this;
        };
        Similar.prototype.delete = function(key) {
          var index;
          if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
            this.lastItem = void 0;
          }
          index = this.indexOf(key);
          if (index >= 0) {
            this.size--;
            return this.list.splice(index, 1)[0];
          }
          return void 0;
        };
        Similar.prototype.has = function(key) {
          var index;
          if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
            return true;
          }
          index = this.indexOf(key);
          if (index >= 0) {
            this.lastItem = this.list[index];
            return true;
          }
          return false;
        };
        Similar.prototype.forEach = function(callback, thisArg) {
          var i2;
          for (i2 = 0; i2 < this.size; i2++) {
            callback.call(thisArg || this, this.list[i2].val, this.list[i2].key, this);
          }
        };
        Similar.prototype.indexOf = function(key) {
          var i2;
          for (i2 = 0; i2 < this.size; i2++) {
            if (this.isEqual(this.list[i2].key, key)) {
              return i2;
            }
          }
          return -1;
        };
        Similar.prototype.isEqual = function(val1, val2) {
          return val1 === val2 || val1 !== val1 && val2 !== val2;
        };
        module3.exports = Similar;
      }, {}], 3: [function(_dereq_, module3, exports3) {
        var MapOrSimilar = _dereq_("map-or-similar");
        module3.exports = function(limit) {
          var cache = new MapOrSimilar(false), lru = [];
          return function(fn) {
            var memoizerific = __name(function() {
              var currentCache = cache, newMap, fnResult, argsLengthMinusOne = arguments.length - 1, lruPath = Array(argsLengthMinusOne + 1), isMemoized = true, i2;
              if ((memoizerific.numArgs || memoizerific.numArgs === 0) && memoizerific.numArgs !== argsLengthMinusOne + 1) {
                throw new Error("Memoizerific functions should always be called with the same number of arguments");
              }
              for (i2 = 0; i2 < argsLengthMinusOne; i2++) {
                lruPath[i2] = {
                  cacheItem: currentCache,
                  arg: arguments[i2]
                };
                if (currentCache.has(arguments[i2])) {
                  currentCache = currentCache.get(arguments[i2]);
                  continue;
                }
                isMemoized = false;
                newMap = new MapOrSimilar(false);
                currentCache.set(arguments[i2], newMap);
                currentCache = newMap;
              }
              if (isMemoized) {
                if (currentCache.has(arguments[argsLengthMinusOne])) {
                  fnResult = currentCache.get(arguments[argsLengthMinusOne]);
                } else {
                  isMemoized = false;
                }
              }
              if (!isMemoized) {
                fnResult = fn.apply(null, arguments);
                currentCache.set(arguments[argsLengthMinusOne], fnResult);
              }
              if (limit > 0) {
                lruPath[argsLengthMinusOne] = {
                  cacheItem: currentCache,
                  arg: arguments[argsLengthMinusOne]
                };
                if (isMemoized) {
                  moveToMostRecentLru(lru, lruPath);
                } else {
                  lru.push(lruPath);
                }
                if (lru.length > limit) {
                  removeCachedResult(lru.shift());
                }
              }
              memoizerific.wasMemoized = isMemoized;
              memoizerific.numArgs = argsLengthMinusOne + 1;
              return fnResult;
            }, "memoizerific");
            memoizerific.limit = limit;
            memoizerific.wasMemoized = false;
            memoizerific.cache = cache;
            memoizerific.lru = lru;
            return memoizerific;
          };
        };
        function moveToMostRecentLru(lru, lruPath) {
          var lruLen = lru.length, lruPathLen = lruPath.length, isMatch, i2, ii;
          for (i2 = 0; i2 < lruLen; i2++) {
            isMatch = true;
            for (ii = 0; ii < lruPathLen; ii++) {
              if (!isEqual(lru[i2][ii].arg, lruPath[ii].arg)) {
                isMatch = false;
                break;
              }
            }
            if (isMatch) {
              break;
            }
          }
          lru.push(lru.splice(i2, 1)[0]);
        }
        __name(moveToMostRecentLru, "moveToMostRecentLru");
        function removeCachedResult(removedLru) {
          var removedLruLen = removedLru.length, currentLru = removedLru[removedLruLen - 1], tmp, i2;
          currentLru.cacheItem.delete(currentLru.arg);
          for (i2 = removedLruLen - 2; i2 >= 0; i2--) {
            currentLru = removedLru[i2];
            tmp = currentLru.cacheItem.get(currentLru.arg);
            if (!tmp || !tmp.size) {
              currentLru.cacheItem.delete(currentLru.arg);
            } else {
              break;
            }
          }
        }
        __name(removeCachedResult, "removeCachedResult");
        function isEqual(val1, val2) {
          return val1 === val2 || val1 !== val1 && val2 !== val2;
        }
        __name(isEqual, "isEqual");
      }, { "map-or-similar": 1 }] }, {}, [3])(3);
    });
  }
});
function isPrimitive(value2) {
  return value2 == null || typeof value2 !== "object" && typeof value2 !== "function";
}
__name(isPrimitive, "isPrimitive");
function isTypedArray(x2) {
  return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
}
__name(isTypedArray, "isTypedArray");
function getSymbols(object2) {
  return Object.getOwnPropertySymbols(object2).filter((symbol) => Object.prototype.propertyIsEnumerable.call(object2, symbol));
}
__name(getSymbols, "getSymbols");
function getTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? "[object Undefined]" : "[object Null]";
  }
  return Object.prototype.toString.call(value2);
}
__name(getTag, "getTag");
var regexpTag = "[object RegExp]";
var stringTag = "[object String]";
var numberTag = "[object Number]";
var booleanTag = "[object Boolean]";
var argumentsTag = "[object Arguments]";
var symbolTag = "[object Symbol]";
var dateTag = "[object Date]";
var mapTag = "[object Map]";
var setTag = "[object Set]";
var arrayTag = "[object Array]";
var arrayBufferTag = "[object ArrayBuffer]";
var objectTag = "[object Object]";
var dataViewTag = "[object DataView]";
var uint8ArrayTag = "[object Uint8Array]";
var uint8ClampedArrayTag = "[object Uint8ClampedArray]";
var uint16ArrayTag = "[object Uint16Array]";
var uint32ArrayTag = "[object Uint32Array]";
var int8ArrayTag = "[object Int8Array]";
var int16ArrayTag = "[object Int16Array]";
var int32ArrayTag = "[object Int32Array]";
var float32ArrayTag = "[object Float32Array]";
var float64ArrayTag = "[object Float64Array]";
function cloneDeepWithImpl(valueToClone, keyToClone, objectToClone, stack = /* @__PURE__ */ new Map(), cloneValue = void 0) {
  const cloned = cloneValue?.(valueToClone, keyToClone, objectToClone, stack);
  if (cloned !== void 0) {
    return cloned;
  }
  if (isPrimitive(valueToClone)) {
    return valueToClone;
  }
  if (stack.has(valueToClone)) {
    return stack.get(valueToClone);
  }
  if (Array.isArray(valueToClone)) {
    const result = new Array(valueToClone.length);
    stack.set(valueToClone, result);
    for (let i2 = 0; i2 < valueToClone.length; i2++) {
      result[i2] = cloneDeepWithImpl(valueToClone[i2], i2, objectToClone, stack, cloneValue);
    }
    if (Object.hasOwn(valueToClone, "index")) {
      result.index = valueToClone.index;
    }
    if (Object.hasOwn(valueToClone, "input")) {
      result.input = valueToClone.input;
    }
    return result;
  }
  if (valueToClone instanceof Date) {
    return new Date(valueToClone.getTime());
  }
  if (valueToClone instanceof RegExp) {
    const result = new RegExp(valueToClone.source, valueToClone.flags);
    result.lastIndex = valueToClone.lastIndex;
    return result;
  }
  if (valueToClone instanceof Map) {
    const result = /* @__PURE__ */ new Map();
    stack.set(valueToClone, result);
    for (const [key, value2] of valueToClone) {
      result.set(key, cloneDeepWithImpl(value2, key, objectToClone, stack, cloneValue));
    }
    return result;
  }
  if (valueToClone instanceof Set) {
    const result = /* @__PURE__ */ new Set();
    stack.set(valueToClone, result);
    for (const value2 of valueToClone) {
      result.add(cloneDeepWithImpl(value2, void 0, objectToClone, stack, cloneValue));
    }
    return result;
  }
  if (typeof Buffer !== "undefined" && Buffer.isBuffer(valueToClone)) {
    return valueToClone.subarray();
  }
  if (isTypedArray(valueToClone)) {
    const result = new (Object.getPrototypeOf(valueToClone)).constructor(valueToClone.length);
    stack.set(valueToClone, result);
    for (let i2 = 0; i2 < valueToClone.length; i2++) {
      result[i2] = cloneDeepWithImpl(valueToClone[i2], i2, objectToClone, stack, cloneValue);
    }
    return result;
  }
  if (valueToClone instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && valueToClone instanceof SharedArrayBuffer) {
    return valueToClone.slice(0);
  }
  if (valueToClone instanceof DataView) {
    const result = new DataView(valueToClone.buffer.slice(0), valueToClone.byteOffset, valueToClone.byteLength);
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (typeof File !== "undefined" && valueToClone instanceof File) {
    const result = new File([valueToClone], valueToClone.name, {
      type: valueToClone.type
    });
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (valueToClone instanceof Blob) {
    const result = new Blob([valueToClone], { type: valueToClone.type });
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (valueToClone instanceof Error) {
    const result = new valueToClone.constructor();
    stack.set(valueToClone, result);
    result.message = valueToClone.message;
    result.name = valueToClone.name;
    result.stack = valueToClone.stack;
    result.cause = valueToClone.cause;
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (typeof valueToClone === "object" && isCloneableObject(valueToClone)) {
    const result = Object.create(Object.getPrototypeOf(valueToClone));
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  return valueToClone;
}
__name(cloneDeepWithImpl, "cloneDeepWithImpl");
function copyProperties(target, source, objectToClone = target, stack, cloneValue) {
  const keys = [...Object.keys(source), ...getSymbols(source)];
  for (let i2 = 0; i2 < keys.length; i2++) {
    const key = keys[i2];
    const descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (descriptor == null || descriptor.writable) {
      target[key] = cloneDeepWithImpl(source[key], key, objectToClone, stack, cloneValue);
    }
  }
}
__name(copyProperties, "copyProperties");
function isCloneableObject(object2) {
  switch (getTag(object2)) {
    case argumentsTag:
    case arrayTag:
    case arrayBufferTag:
    case dataViewTag:
    case booleanTag:
    case dateTag:
    case float32ArrayTag:
    case float64ArrayTag:
    case int8ArrayTag:
    case int16ArrayTag:
    case int32ArrayTag:
    case mapTag:
    case numberTag:
    case objectTag:
    case regexpTag:
    case setTag:
    case stringTag:
    case symbolTag:
    case uint8ArrayTag:
    case uint8ClampedArrayTag:
    case uint16ArrayTag:
    case uint32ArrayTag: {
      return true;
    }
    default: {
      return false;
    }
  }
}
__name(isCloneableObject, "isCloneableObject");
function cloneDeep(obj) {
  return cloneDeepWithImpl(obj, void 0, obj, /* @__PURE__ */ new Map(), void 0);
}
__name(cloneDeep, "cloneDeep");
function pickBy(obj, shouldPick) {
  const result = {};
  const keys = Object.keys(obj);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const key = keys[i2];
    const value2 = obj[key];
    if (shouldPick(value2, key)) {
      result[key] = value2;
    }
  }
  return result;
}
__name(pickBy, "pickBy");
var CASE_SPLIT_PATTERN = new RegExp("\\p{Lu}?\\p{Ll}+|[0-9]+|\\p{Lu}+(?!\\p{Ll})|\\p{Emoji_Presentation}|\\p{Extended_Pictographic}|\\p{L}+", "gu");
var toGlobalSelector = __name((element) => `& :where(${element}:not(.sb-anchor, .sb-unstyled, .sb-unstyled ${element}))`, "toGlobalSelector");
var breakpoint = 600;
var Title = styled.h1(withReset, ({ theme }) => ({
  color: theme.color.defaultText,
  fontSize: theme.typography.size.m3,
  fontWeight: theme.typography.weight.bold,
  lineHeight: "32px",
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.l1,
    lineHeight: "36px",
    marginBottom: "16px"
  }
}));
var Subtitle = styled.h2(withReset, ({ theme }) => ({
  fontWeight: theme.typography.weight.regular,
  fontSize: theme.typography.size.s3,
  lineHeight: "20px",
  borderBottom: "none",
  marginBottom: 15,
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.m1,
    lineHeight: "28px",
    marginBottom: 24
  },
  color: curriedTransparentize$1(0.25, theme.color.defaultText)
}));
var DocsContent = styled.div(({ theme }) => {
  const reset = {
    fontFamily: theme.typography.fonts.base,
    fontSize: theme.typography.size.s3,
    margin: 0,
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
    WebkitOverflowScrolling: "touch"
  };
  const headers = {
    margin: "20px 0 8px",
    padding: 0,
    cursor: "text",
    position: "relative",
    color: theme.color.defaultText,
    "&:first-of-type": {
      marginTop: 0,
      paddingTop: 0
    },
    "&:hover a.anchor": {
      textDecoration: "none"
    },
    "& code": {
      fontSize: "inherit"
    }
  };
  const code = {
    lineHeight: 1,
    margin: "0 2px",
    padding: "3px 5px",
    whiteSpace: "nowrap",
    borderRadius: 3,
    fontSize: theme.typography.size.s2 - 1,
    border: theme.base === "light" ? `1px solid ${theme.color.mediumlight}` : `1px solid ${theme.color.darker}`,
    color: theme.base === "light" ? curriedTransparentize$1(0.1, theme.color.defaultText) : curriedTransparentize$1(0.3, theme.color.defaultText),
    backgroundColor: theme.base === "light" ? theme.color.lighter : theme.color.border
  };
  return {
    maxWidth: 1e3,
    width: "100%",
    minWidth: 0,
    [toGlobalSelector("a")]: {
      ...reset,
      fontSize: "inherit",
      lineHeight: "24px",
      color: theme.color.secondary,
      textDecoration: "none",
      "&.absent": {
        color: "#cc0000"
      },
      "&.anchor": {
        display: "block",
        paddingLeft: 30,
        marginLeft: -30,
        cursor: "pointer",
        position: "absolute",
        top: 0,
        left: 0,
        bottom: 0
      }
    },
    [toGlobalSelector("blockquote")]: {
      ...reset,
      margin: "16px 0",
      borderLeft: `4px solid ${theme.color.medium}`,
      padding: "0 15px",
      color: theme.color.dark,
      "& > :first-of-type": {
        marginTop: 0
      },
      "& > :last-child": {
        marginBottom: 0
      }
    },
    [toGlobalSelector("div")]: reset,
    [toGlobalSelector("dl")]: {
      ...reset,
      margin: "16px 0",
      padding: 0,
      "& dt": {
        fontSize: "14px",
        fontWeight: "bold",
        fontStyle: "italic",
        padding: 0,
        margin: "16px 0 4px"
      },
      "& dt:first-of-type": {
        padding: 0
      },
      "& dt > :first-of-type": {
        marginTop: 0
      },
      "& dt > :last-child": {
        marginBottom: 0
      },
      "& dd": {
        margin: "0 0 16px",
        padding: "0 15px"
      },
      "& dd > :first-of-type": {
        marginTop: 0
      },
      "& dd > :last-child": {
        marginBottom: 0
      }
    },
    [toGlobalSelector("h1")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.l1}px`,
      fontWeight: theme.typography.weight.bold
    },
    [toGlobalSelector("h2")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.m2}px`,
      paddingBottom: 4,
      borderBottom: `1px solid ${theme.appBorderColor}`
    },
    [toGlobalSelector("h3")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.m1}px`,
      fontWeight: theme.typography.weight.bold
    },
    [toGlobalSelector("h4")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.s3}px`
    },
    [toGlobalSelector("h5")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.s2}px`
    },
    [toGlobalSelector("h6")]: {
      ...reset,
      ...headers,
      fontSize: `${theme.typography.size.s2}px`,
      color: theme.color.dark
    },
    [toGlobalSelector("hr")]: {
      border: "0 none",
      borderTop: `1px solid ${theme.appBorderColor}`,
      height: 4,
      padding: 0
    },
    [toGlobalSelector("img")]: {
      maxWidth: "100%"
    },
    [toGlobalSelector("li")]: {
      ...reset,
      fontSize: theme.typography.size.s2,
      color: theme.color.defaultText,
      lineHeight: "24px",
      "& + li": {
        marginTop: ".25em"
      },
      "& ul, & ol": {
        marginTop: ".25em",
        marginBottom: 0
      },
      "& code": code
    },
    [toGlobalSelector("ol")]: {
      ...reset,
      margin: "16px 0",
      paddingLeft: 30,
      "& :first-of-type": {
        marginTop: 0
      },
      "& :last-child": {
        marginBottom: 0
      }
    },
    [toGlobalSelector("p")]: {
      ...reset,
      margin: "16px 0",
      fontSize: theme.typography.size.s2,
      lineHeight: "24px",
      color: theme.color.defaultText,
      "& code": code
    },
    [toGlobalSelector("pre")]: {
      ...reset,
      // reset
      fontFamily: theme.typography.fonts.mono,
      WebkitFontSmoothing: "antialiased",
      MozOsxFontSmoothing: "grayscale",
      lineHeight: "18px",
      padding: "11px 1rem",
      whiteSpace: "pre-wrap",
      color: "inherit",
      borderRadius: 3,
      margin: "1rem 0",
      "&:not(.prismjs)": {
        background: "transparent",
        border: "none",
        borderRadius: 0,
        padding: 0,
        margin: 0
      },
      "& pre, &.prismjs": {
        padding: 15,
        margin: 0,
        whiteSpace: "pre-wrap",
        color: "inherit",
        fontSize: "13px",
        lineHeight: "19px",
        code: {
          color: "inherit",
          fontSize: "inherit"
        }
      },
      "& code": {
        whiteSpace: "pre"
      },
      "& code, & tt": {
        border: "none"
      }
    },
    [toGlobalSelector("span")]: {
      ...reset,
      "&.frame": {
        display: "block",
        overflow: "hidden",
        "& > span": {
          border: `1px solid ${theme.color.medium}`,
          display: "block",
          float: "left",
          overflow: "hidden",
          margin: "13px 0 0",
          padding: 7,
          width: "auto"
        },
        "& span img": {
          display: "block",
          float: "left"
        },
        "& span span": {
          clear: "both",
          color: theme.color.darkest,
          display: "block",
          padding: "5px 0 0"
        }
      },
      "&.align-center": {
        display: "block",
        overflow: "hidden",
        clear: "both",
        "& > span": {
          display: "block",
          overflow: "hidden",
          margin: "13px auto 0",
          textAlign: "center"
        },
        "& span img": {
          margin: "0 auto",
          textAlign: "center"
        }
      },
      "&.align-right": {
        display: "block",
        overflow: "hidden",
        clear: "both",
        "& > span": {
          display: "block",
          overflow: "hidden",
          margin: "13px 0 0",
          textAlign: "right"
        },
        "& span img": {
          margin: 0,
          textAlign: "right"
        }
      },
      "&.float-left": {
        display: "block",
        marginRight: 13,
        overflow: "hidden",
        float: "left",
        "& span": {
          margin: "13px 0 0"
        }
      },
      "&.float-right": {
        display: "block",
        marginLeft: 13,
        overflow: "hidden",
        float: "right",
        "& > span": {
          display: "block",
          overflow: "hidden",
          margin: "13px auto 0",
          textAlign: "right"
        }
      }
    },
    [toGlobalSelector("table")]: {
      ...reset,
      margin: "16px 0",
      fontSize: theme.typography.size.s2,
      lineHeight: "24px",
      padding: 0,
      borderCollapse: "collapse",
      "& tr": {
        borderTop: `1px solid ${theme.appBorderColor}`,
        backgroundColor: theme.appContentBg,
        margin: 0,
        padding: 0
      },
      "& tr:nth-of-type(2n)": {
        backgroundColor: theme.base === "dark" ? theme.color.darker : theme.color.lighter
      },
      "& tr th": {
        fontWeight: "bold",
        color: theme.color.defaultText,
        border: `1px solid ${theme.appBorderColor}`,
        margin: 0,
        padding: "6px 13px"
      },
      "& tr td": {
        border: `1px solid ${theme.appBorderColor}`,
        color: theme.color.defaultText,
        margin: 0,
        padding: "6px 13px"
      },
      "& tr th :first-of-type, & tr td :first-of-type": {
        marginTop: 0
      },
      "& tr th :last-child, & tr td :last-child": {
        marginBottom: 0
      }
    },
    [toGlobalSelector("ul")]: {
      ...reset,
      margin: "16px 0",
      paddingLeft: 30,
      "& :first-of-type": {
        marginTop: 0
      },
      "& :last-child": {
        marginBottom: 0
      },
      listStyle: "disc"
    }
  };
});
var DocsWrapper = styled.div(({ theme }) => ({
  background: theme.background.content,
  display: "flex",
  flexDirection: "row-reverse",
  justifyContent: "center",
  padding: "4rem 20px",
  minHeight: "100vh",
  boxSizing: "border-box",
  gap: "3rem",
  [`@media (min-width: ${breakpoint}px)`]: {}
}));
var DocsPageWrapper = __name(({ children, toc }) => import_react4.default.createElement(DocsWrapper, { className: "sbdocs sbdocs-wrapper" }, toc, import_react4.default.createElement(DocsContent, { className: "sbdocs sbdocs-content" }, children)), "DocsPageWrapper");
if (globalThis && globalThis.__DOCS_CONTEXT__ === void 0) {
  globalThis.__DOCS_CONTEXT__ = (0, import_react6.createContext)(null);
  globalThis.__DOCS_CONTEXT__.displayName = "DocsContext";
}
var DocsContext = globalThis ? globalThis.__DOCS_CONTEXT__ : (0, import_react6.createContext)(null);
function useStory(storyId, context) {
  const stories = useStories([storyId], context);
  return stories && stories[0];
}
__name(useStory, "useStory");
function useStories(storyIds, context) {
  const [storiesById, setStories] = (0, import_react8.useState)({});
  (0, import_react8.useEffect)(() => {
    Promise.all(
      storyIds.map(async (storyId) => {
        const story = await context.loadStory(storyId);
        setStories(
          (current) => current[storyId] === story ? current : { ...current, [storyId]: story }
        );
      })
    );
  });
  return storyIds.map((storyId) => {
    if (storiesById[storyId]) {
      return storiesById[storyId];
    }
    try {
      return context.storyById(storyId);
    } catch (err) {
      return void 0;
    }
  });
}
__name(useStories, "useStories");
var getStoryId = __name((props, context) => {
  const { of, meta } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  if (meta) {
    context.referenceMeta(meta, false);
  }
  const resolved = context.resolveOf(of || "story", ["story"]);
  return resolved.story.id;
}, "getStoryId");
var getStoryProps = __name((props, story, context) => {
  const { parameters = {} } = story || {};
  const { docs = {} } = parameters;
  const storyParameters = docs.story || {};
  if (docs.disable) {
    return null;
  }
  const inline = props.inline ?? storyParameters.inline ?? false;
  if (inline) {
    const height2 = props.height ?? storyParameters.height;
    const autoplay = props.autoplay ?? storyParameters.autoplay ?? false;
    return {
      story,
      inline: true,
      height: height2,
      autoplay,
      forceInitialArgs: !!props.__forceInitialArgs,
      primary: !!props.__primary,
      renderStoryToElement: context.renderStoryToElement
    };
  }
  const height = props.height ?? storyParameters.height ?? storyParameters.iframeHeight ?? "100px";
  return {
    story,
    inline: false,
    height,
    primary: !!props.__primary
  };
}, "getStoryProps");
var Story2 = __name((props = { __forceInitialArgs: false, __primary: false }) => {
  const context = (0, import_react7.useContext)(DocsContext);
  const storyId = getStoryId(props, context);
  const story = useStory(storyId, context);
  if (!story) {
    return import_react7.default.createElement(StorySkeleton, null);
  }
  const storyProps = getStoryProps(props, story, context);
  if (!storyProps) {
    return null;
  }
  return import_react7.default.createElement(Story, { ...storyProps });
}, "Story");
var getBlockBackgroundStyle = __name((theme) => ({
  borderRadius: theme.appBorderRadius,
  background: theme.background.content,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  border: `1px solid ${theme.appBorderColor}`
}), "getBlockBackgroundStyle");
var { window: globalWindow } = globalThis;
var _IFrame = class _IFrame2 extends import_react10.Component {
  constructor() {
    super(...arguments);
    this.iframe = null;
  }
  componentDidMount() {
    const { id } = this.props;
    this.iframe = globalWindow.document.getElementById(id);
  }
  shouldComponentUpdate(nextProps) {
    const { scale } = nextProps;
    if (scale !== this.props.scale) {
      this.setIframeBodyStyle({
        width: `${scale * 100}%`,
        height: `${scale * 100}%`,
        transform: `scale(${1 / scale})`,
        transformOrigin: "top left"
      });
    }
    return false;
  }
  setIframeBodyStyle(style) {
    return Object.assign(this.iframe.contentDocument.body.style, style);
  }
  render() {
    const { id, title, src, allowFullScreen, scale, ...rest } = this.props;
    return import_react10.default.createElement(
      "iframe",
      {
        id,
        title,
        src,
        ...allowFullScreen ? { allow: "fullscreen" } : {},
        loading: "lazy",
        ...rest
      }
    );
  }
};
__name(_IFrame, "IFrame");
var IFrame = _IFrame;
var ZoomContext = (0, import_react11.createContext)({
  scale: 1
});
var { PREVIEW_URL } = globalThis;
var BASE_URL = PREVIEW_URL || "iframe.html";
var storyBlockIdFromId = __name(({ story, primary }) => `story--${story.id}${primary ? "--primary" : ""}`, "storyBlockIdFromId");
var InlineStory = __name((props) => {
  const storyRef = (0, import_react9.useRef)();
  const [showLoader, setShowLoader] = (0, import_react9.useState)(true);
  const [error, setError] = (0, import_react9.useState)();
  const { story, height, autoplay, forceInitialArgs, renderStoryToElement } = props;
  (0, import_react9.useEffect)(() => {
    if (!(story && storyRef.current)) {
      return () => {
      };
    }
    const element = storyRef.current;
    const cleanup = renderStoryToElement(
      story,
      element,
      {
        showMain: __name(() => {
        }, "showMain"),
        showError: __name(({ title, description }) => setError(new Error(`${title} - ${description}`)), "showError"),
        showException: __name((err) => setError(err), "showException")
      },
      { autoplay, forceInitialArgs }
    );
    setShowLoader(false);
    return () => {
      Promise.resolve().then(() => cleanup());
    };
  }, [autoplay, renderStoryToElement, story]);
  if (error) {
    return import_react9.default.createElement("pre", null, import_react9.default.createElement(ErrorFormatter, { error }));
  }
  return import_react9.default.createElement(import_react9.default.Fragment, null, height ? import_react9.default.createElement("style", null, `#${storyBlockIdFromId(
    props
  )} { min-height: ${height}; transform: translateZ(0); overflow: auto }`) : null, showLoader && import_react9.default.createElement(StorySkeleton, null), import_react9.default.createElement("div", { ref: storyRef, id: `${storyBlockIdFromId(props)}-inner`, "data-name": story.name }));
}, "InlineStory");
var IFrameStory = __name(({ story, height = "500px" }) => import_react9.default.createElement("div", { style: { width: "100%", height } }, import_react9.default.createElement(ZoomContext.Consumer, null, ({ scale }) => {
  return import_react9.default.createElement(
    IFrame,
    {
      key: "iframe",
      id: `iframe--${story.id}`,
      title: story.name,
      src: getStoryHref(BASE_URL, story.id, { viewMode: "story" }),
      allowFullScreen: true,
      scale,
      style: {
        width: "100%",
        height: "100%",
        border: "0 none"
      }
    }
  );
})), "IFrameStory");
var ErrorMessage = styled.strong(({ theme }) => ({
  color: theme.color.orange
}));
var Story = __name((props) => {
  const { inline, story } = props;
  if (inline && !props.autoplay && story.usesMount) {
    return import_react9.default.createElement(ErrorMessage, null, "This story mounts inside of play. Set", " ", import_react9.default.createElement("a", { href: "https://storybook.js.org/docs/api/doc-blocks/doc-block-story?ref=ui#autoplay" }, "autoplay"), " ", "to true to view this story.");
  }
  return import_react9.default.createElement("div", { id: storyBlockIdFromId(props), className: "sb-story sb-unstyled", "data-story-block": "true" }, inline ? import_react9.default.createElement(InlineStory, { ...props }) : import_react9.default.createElement(IFrameStory, { ...props }));
}, "Story");
var StorySkeleton = __name(() => import_react9.default.createElement(Loader, null), "StorySkeleton");
var Bar = styled(FlexBar)({
  position: "absolute",
  left: 0,
  right: 0,
  top: 0,
  transition: "transform .2s linear"
});
var Wrapper2 = styled.div({
  display: "flex",
  alignItems: "center",
  gap: 4
});
var IconPlaceholder = styled.div(({ theme }) => ({
  width: 14,
  height: 14,
  borderRadius: 2,
  margin: "0 7px",
  backgroundColor: theme.appBorderColor,
  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`
}));
var Toolbar = __name(({
  isLoading,
  storyId,
  baseUrl,
  zoom,
  resetZoom,
  ...rest
}) => import_react12.default.createElement(Bar, { ...rest }, import_react12.default.createElement(Wrapper2, { key: "left" }, isLoading ? [1, 2, 3].map((key) => import_react12.default.createElement(IconPlaceholder, { key })) : import_react12.default.createElement(import_react12.default.Fragment, null, import_react12.default.createElement(
  IconButton,
  {
    key: "zoomin",
    onClick: (e2) => {
      e2.preventDefault();
      zoom(0.8);
    },
    title: "Zoom in"
  },
  import_react12.default.createElement(ZoomIcon, null)
), import_react12.default.createElement(
  IconButton,
  {
    key: "zoomout",
    onClick: (e2) => {
      e2.preventDefault();
      zoom(1.25);
    },
    title: "Zoom out"
  },
  import_react12.default.createElement(ZoomOutIcon, null)
), import_react12.default.createElement(
  IconButton,
  {
    key: "zoomreset",
    onClick: (e2) => {
      e2.preventDefault();
      resetZoom();
    },
    title: "Reset zoom"
  },
  import_react12.default.createElement(ZoomResetIcon, null)
))), isLoading ? import_react12.default.createElement(Wrapper2, { key: "right" }, import_react12.default.createElement(IconPlaceholder, null)) : baseUrl && storyId && import_react12.default.createElement(Wrapper2, { key: "right" }, import_react12.default.createElement(IconButton, { key: "opener", asChild: true }, import_react12.default.createElement(
  "a",
  {
    href: getStoryHref(baseUrl, storyId),
    target: "_blank",
    rel: "noopener noreferrer",
    "aria-label": "Open canvas in new tab"
  },
  import_react12.default.createElement(ShareAltIcon, null)
)))), "Toolbar");
var ChildrenContainer = styled.div(
  ({ isColumn, columns, layout }) => ({
    display: isColumn || !columns ? "block" : "flex",
    position: "relative",
    flexWrap: "wrap",
    overflow: "auto",
    flexDirection: isColumn ? "column" : "row",
    "& .innerZoomElementWrapper > *": isColumn ? {
      width: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "block"
    } : {
      maxWidth: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "inline-block"
    }
  }),
  ({ layout = "padded", inline }) => layout === "centered" || layout === "padded" ? {
    padding: inline ? "32px 22px" : "0px",
    "& .innerZoomElementWrapper > *": {
      width: "auto",
      border: "8px solid transparent!important"
    }
  } : {},
  ({ layout = "padded", inline }) => layout === "centered" && inline ? {
    display: "flex",
    justifyContent: "center",
    justifyItems: "center",
    alignContent: "center",
    alignItems: "center"
  } : {},
  ({ columns }) => columns && columns > 1 ? { ".innerZoomElementWrapper > *": { minWidth: `calc(100% / ${columns} - 20px)` } } : {}
);
var StyledSource = styled(Source)(({ theme }) => ({
  margin: 0,
  borderTopLeftRadius: 0,
  borderTopRightRadius: 0,
  borderBottomLeftRadius: theme.appBorderRadius,
  borderBottomRightRadius: theme.appBorderRadius,
  border: "none",
  background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : curriedDarken$1(0.05, theme.background.content),
  color: theme.color.lightest,
  button: {
    background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : curriedDarken$1(0.05, theme.background.content)
  }
}));
var PreviewContainer = styled.div(
  ({ theme, withSource, isExpanded }) => ({
    position: "relative",
    overflow: "hidden",
    margin: "25px 0 40px",
    ...getBlockBackgroundStyle(theme),
    borderBottomLeftRadius: withSource && isExpanded && 0,
    borderBottomRightRadius: withSource && isExpanded && 0,
    borderBottomWidth: isExpanded && 0,
    "h3 + &": {
      marginTop: "16px"
    }
  }),
  ({ withToolbar }) => withToolbar && { paddingTop: 40 }
);
var getSource = __name((withSource, expanded, setExpanded) => {
  switch (true) {
    case !!(withSource && withSource.error): {
      return {
        source: null,
        actionItem: {
          title: "No code available",
          className: "docblock-code-toggle docblock-code-toggle--disabled",
          disabled: true,
          onClick: __name(() => setExpanded(false), "onClick")
        }
      };
    }
    case expanded: {
      return {
        source: import_react5.default.createElement(StyledSource, { ...withSource, dark: true }),
        actionItem: {
          title: "Hide code",
          className: "docblock-code-toggle docblock-code-toggle--expanded",
          onClick: __name(() => setExpanded(false), "onClick")
        }
      };
    }
    default: {
      return {
        source: import_react5.default.createElement(StyledSource, { ...withSource, dark: true }),
        actionItem: {
          title: "Show code",
          className: "docblock-code-toggle",
          onClick: __name(() => setExpanded(true), "onClick")
        }
      };
    }
  }
}, "getSource");
function getChildProps(children) {
  if (import_react5.Children.count(children) === 1) {
    const elt = children;
    if (elt.props) {
      return elt.props;
    }
  }
  return null;
}
__name(getChildProps, "getChildProps");
var PositionedToolbar = styled(Toolbar)({
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  height: 40
});
var Relative = styled.div({
  overflow: "hidden",
  position: "relative"
});
var Preview = __name(({
  isLoading,
  isColumn,
  columns,
  children,
  withSource,
  withToolbar = false,
  isExpanded = false,
  additionalActions,
  className,
  layout = "padded",
  inline = false,
  ...props
}) => {
  const [expanded, setExpanded] = (0, import_react5.useState)(isExpanded);
  const { source, actionItem } = getSource(withSource, expanded, setExpanded);
  const [scale, setScale] = (0, import_react5.useState)(1);
  const previewClasses = [className].concat(["sbdocs", "sbdocs-preview", "sb-unstyled"]);
  const defaultActionItems = withSource ? [actionItem] : [];
  const [additionalActionItems, setAdditionalActionItems] = (0, import_react5.useState)(
    additionalActions ? [...additionalActions] : []
  );
  const actionItems = [...defaultActionItems, ...additionalActionItems];
  const { window: globalWindow4 } = globalThis;
  const context = (0, import_react5.useContext)(DocsContext);
  const copyToClipboard = (0, import_react5.useCallback)(async (text) => {
    const { createCopyToClipboardFunction } = await import("./components-QMDLI2J6.js");
    createCopyToClipboardFunction();
  }, []);
  const onCopyCapture = __name((e2) => {
    const selection = globalWindow4.getSelection();
    if (selection && selection.type === "Range") {
      return;
    }
    e2.preventDefault();
    if (additionalActionItems.filter((item) => item.title === "Copied").length === 0) {
      copyToClipboard(source?.props.code ?? "").then(() => {
        setAdditionalActionItems([
          ...additionalActionItems,
          {
            title: "Copied",
            onClick: __name(() => {
            }, "onClick")
          }
        ]);
        globalWindow4.setTimeout(
          () => setAdditionalActionItems(
            additionalActionItems.filter((item) => item.title !== "Copied")
          ),
          1500
        );
      });
    }
  }, "onCopyCapture");
  const childProps = getChildProps(children);
  return import_react5.default.createElement(
    PreviewContainer,
    {
      ...{ withSource, withToolbar },
      ...props,
      className: previewClasses.join(" ")
    },
    withToolbar && import_react5.default.createElement(
      PositionedToolbar,
      {
        isLoading,
        border: true,
        zoom: (z2) => setScale(scale * z2),
        resetZoom: () => setScale(1),
        storyId: !isLoading && childProps ? getStoryId(childProps, context) : void 0,
        baseUrl: "./iframe.html"
      }
    ),
    import_react5.default.createElement(ZoomContext.Provider, { value: { scale } }, import_react5.default.createElement(Relative, { className: "docs-story", onCopyCapture: withSource && onCopyCapture }, import_react5.default.createElement(
      ChildrenContainer,
      {
        isColumn: isColumn || !Array.isArray(children),
        columns,
        layout,
        inline
      },
      import_react5.default.createElement(Zoom.Element, { centered: layout === "centered", scale: inline ? scale : 1 }, Array.isArray(children) ? children.map((child, i2) => import_react5.default.createElement("div", { key: i2 }, child)) : import_react5.default.createElement("div", null, children))
    ), import_react5.default.createElement(ActionBar, { actionItems }))),
    withSource && expanded && source
  );
}, "Preview");
var StyledPreview = styled(Preview)(() => ({
  ".docs-story": {
    paddingTop: 32,
    paddingBottom: 40
  }
}));
var TabbedArgsTable = __name(({ tabs, ...props }) => {
  const entries = Object.entries(tabs);
  if (entries.length === 1) {
    return import_react13.default.createElement(ArgsTable, { ...entries[0][1], ...props });
  }
  return import_react13.default.createElement(TabsState, null, entries.map((entry, index) => {
    const [label, table] = entry;
    const id = `prop_table_div_${label}`;
    const Component4 = "div";
    const argsTableProps = index === 0 ? props : { sort: props.sort };
    return import_react13.default.createElement(Component4, { key: id, id, title: label }, ({ active }) => active ? import_react13.default.createElement(ArgsTable, { key: `prop_table_${label}`, ...table, ...argsTableProps }) : null);
  }));
}, "TabbedArgsTable");
var Label = styled.div(({ theme }) => ({
  marginRight: 30,
  fontSize: `${theme.typography.size.s1}px`,
  color: theme.base === "light" ? curriedTransparentize$1(0.4, theme.color.defaultText) : curriedTransparentize$1(0.6, theme.color.defaultText)
}));
var Sample = styled.div({
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
});
var TypeSpecimen = styled.div({
  display: "flex",
  flexDirection: "row",
  alignItems: "baseline",
  "&:not(:last-child)": { marginBottom: "1rem" }
});
var Wrapper22 = styled.div(withReset, ({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  margin: "25px 0 40px",
  padding: "30px 20px"
}));
var Typeset = __name(({
  fontFamily,
  fontSizes,
  fontWeight,
  sampleText,
  ...props
}) => import_react14.default.createElement(Wrapper22, { ...props, className: "docblock-typeset sb-unstyled" }, fontSizes.map((size) => import_react14.default.createElement(TypeSpecimen, { key: size }, import_react14.default.createElement(Label, null, size), import_react14.default.createElement(
  Sample,
  {
    style: {
      fontFamily,
      fontSize: size,
      fontWeight,
      lineHeight: 1.2
    }
  },
  sampleText || "Was he a beast if music could move him so?"
)))), "Typeset");
var ItemTitle = styled.div(({ theme }) => ({
  fontWeight: theme.typography.weight.bold,
  color: theme.color.defaultText
}));
var ItemSubtitle = styled.div(({ theme }) => ({
  color: theme.base === "light" ? curriedTransparentize$1(0.2, theme.color.defaultText) : curriedTransparentize$1(0.6, theme.color.defaultText)
}));
var ItemDescription = styled.div({
  flex: "0 0 30%",
  lineHeight: "20px",
  marginTop: 5
});
var SwatchLabel = styled.div(({ theme }) => ({
  flex: 1,
  textAlign: "center",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  lineHeight: 1,
  overflow: "hidden",
  color: theme.base === "light" ? curriedTransparentize$1(0.4, theme.color.defaultText) : curriedTransparentize$1(0.6, theme.color.defaultText),
  "> div": {
    display: "inline-block",
    overflow: "hidden",
    maxWidth: "100%",
    textOverflow: "ellipsis"
  },
  span: {
    display: "block",
    marginTop: 2
  }
}));
var SwatchLabels = styled.div({
  display: "flex",
  flexDirection: "row"
});
var Swatch = styled.div(({ background }) => ({
  position: "relative",
  flex: 1,
  "&::before": {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background,
    content: '""'
  }
}));
var SwatchColors = styled.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  display: "flex",
  flexDirection: "row",
  height: 50,
  marginBottom: 5,
  overflow: "hidden",
  backgroundColor: "white",
  backgroundImage: `repeating-linear-gradient(-45deg, #ccc, #ccc 1px, #fff 1px, #fff 16px)`,
  backgroundClip: "padding-box"
}));
var SwatchSpecimen = styled.div({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  position: "relative",
  marginBottom: 30
});
var Swatches = styled.div({
  flex: 1,
  display: "flex",
  flexDirection: "row"
});
var Item = styled.div({
  display: "flex",
  alignItems: "flex-start"
});
var ListName = styled.div({
  flex: "0 0 30%"
});
var ListSwatches = styled.div({
  flex: 1
});
var ListHeading = styled.div(({ theme }) => ({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  paddingBottom: 20,
  fontWeight: theme.typography.weight.bold,
  color: theme.base === "light" ? curriedTransparentize$1(0.4, theme.color.defaultText) : curriedTransparentize$1(0.6, theme.color.defaultText)
}));
var List = styled.div(({ theme }) => ({
  fontSize: theme.typography.size.s2,
  lineHeight: `20px`,
  display: "flex",
  flexDirection: "column"
}));
function renderSwatch(color, index) {
  return import_react15.default.createElement(Swatch, { key: `${color}-${index}`, title: color, background: color });
}
__name(renderSwatch, "renderSwatch");
function renderSwatchLabel(color, index, colorDescription) {
  return import_react15.default.createElement(SwatchLabel, { key: `${color}-${index}`, title: color }, import_react15.default.createElement("div", null, color, colorDescription && import_react15.default.createElement("span", null, colorDescription)));
}
__name(renderSwatchLabel, "renderSwatchLabel");
function renderSwatchSpecimen(colors) {
  if (Array.isArray(colors)) {
    return import_react15.default.createElement(SwatchSpecimen, null, import_react15.default.createElement(SwatchColors, null, colors.map((color, index) => renderSwatch(color, index))), import_react15.default.createElement(SwatchLabels, null, colors.map((color, index) => renderSwatchLabel(color, index))));
  }
  const swatchElements = [];
  const labelElements = [];
  for (const colorKey in colors) {
    const colorValue = colors[colorKey];
    swatchElements.push(renderSwatch(colorValue, swatchElements.length));
    labelElements.push(renderSwatchLabel(colorKey, labelElements.length, colorValue));
  }
  return import_react15.default.createElement(SwatchSpecimen, null, import_react15.default.createElement(SwatchColors, null, swatchElements), import_react15.default.createElement(SwatchLabels, null, labelElements));
}
__name(renderSwatchSpecimen, "renderSwatchSpecimen");
var ColorItem = __name(({ title, subtitle, colors }) => {
  return import_react15.default.createElement(Item, null, import_react15.default.createElement(ItemDescription, null, import_react15.default.createElement(ItemTitle, null, title), import_react15.default.createElement(ItemSubtitle, null, subtitle)), import_react15.default.createElement(Swatches, null, renderSwatchSpecimen(colors)));
}, "ColorItem");
var ColorPalette = __name(({ children, ...props }) => import_react15.default.createElement(ResetWrapper, null, import_react15.default.createElement(List, { ...props, className: "docblock-colorpalette sb-unstyled" }, import_react15.default.createElement(ListHeading, null, import_react15.default.createElement(ListName, null, "Name"), import_react15.default.createElement(ListSwatches, null, "Swatches")), children)), "ColorPalette");
var ItemLabel = styled.div(({ theme }) => ({
  fontFamily: theme.typography.fonts.base,
  fontSize: theme.typography.size.s1,
  color: theme.color.defaultText,
  marginLeft: 10,
  lineHeight: 1.2,
  display: "-webkit-box",
  overflow: "hidden",
  wordBreak: "break-word",
  textOverflow: "ellipsis",
  WebkitLineClamp: 2,
  WebkitBoxOrient: "vertical"
}));
var ItemSpecimen = styled.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  overflow: "hidden",
  height: 40,
  width: 40,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flex: "none",
  "> img, > svg": {
    width: 20,
    height: 20
  }
}));
var Item2 = styled.div({
  display: "inline-flex",
  flexDirection: "row",
  alignItems: "center",
  width: "100%"
});
var List2 = styled.div({
  display: "grid",
  gridTemplateColumns: "repeat(auto-fill, minmax(140px, 1fr))",
  gridGap: "8px 16px",
  gridAutoFlow: "row dense",
  gridAutoRows: 50
});
var IconItem = __name(({ name, children }) => import_react16.default.createElement(Item2, null, import_react16.default.createElement(ItemSpecimen, null, children), import_react16.default.createElement(ItemLabel, null, name)), "IconItem");
var IconGallery = __name(({ children, ...props }) => import_react16.default.createElement(ResetWrapper, null, import_react16.default.createElement(List2, { ...props, className: "docblock-icongallery sb-unstyled" }, children)), "IconGallery");
function build_html_default(options) {
  const forEach = [].forEach;
  const some = [].some;
  const body = typeof window !== "undefined" && document.body;
  const SPACE_CHAR = " ";
  let tocElement;
  let currentlyHighlighting = true;
  let eventCount = 0;
  function createEl(d2, container) {
    const link = container.appendChild(createLink(d2));
    if (d2.children.length) {
      const list = createList(d2.isCollapsed);
      d2.children.forEach((child) => {
        createEl(child, list);
      });
      link.appendChild(list);
    }
  }
  __name(createEl, "createEl");
  function render(parent, data) {
    const collapsed = false;
    const container = createList(collapsed);
    data.forEach((d2) => {
      createEl(d2, container);
    });
    tocElement = parent || tocElement;
    if (tocElement === null) {
      return;
    }
    if (tocElement.firstChild) {
      tocElement.removeChild(tocElement.firstChild);
    }
    if (data.length === 0) {
      return tocElement;
    }
    return tocElement.appendChild(container);
  }
  __name(render, "render");
  function createLink(data) {
    const item = document.createElement("li");
    const a2 = document.createElement("a");
    if (options.listItemClass) {
      item.setAttribute("class", options.listItemClass);
    }
    if (options.onClick) {
      a2.onclick = options.onClick;
    }
    if (options.includeTitleTags) {
      a2.setAttribute("title", data.textContent);
    }
    if (options.includeHtml && data.childNodes.length) {
      forEach.call(data.childNodes, (node) => {
        a2.appendChild(node.cloneNode(true));
      });
    } else {
      a2.textContent = data.textContent;
    }
    a2.setAttribute("href", `${options.basePath}#${data.id}`);
    a2.setAttribute(
      "class",
      `${options.linkClass + SPACE_CHAR}node-name--${data.nodeName}${SPACE_CHAR}${options.extraLinkClasses}`
    );
    item.appendChild(a2);
    return item;
  }
  __name(createLink, "createLink");
  function createList(isCollapsed) {
    const listElement = options.orderedList ? "ol" : "ul";
    const list = document.createElement(listElement);
    let classes = options.listClass + SPACE_CHAR + options.extraListClasses;
    if (isCollapsed) {
      classes = classes + SPACE_CHAR + options.collapsibleClass;
      classes = classes + SPACE_CHAR + options.isCollapsedClass;
    }
    list.setAttribute("class", classes);
    return list;
  }
  __name(createList, "createList");
  function updateFixedSidebarClass() {
    const scrollTop = getScrollTop();
    const posFixedEl = document.querySelector(options.positionFixedSelector);
    if (options.fixedSidebarOffset === "auto") {
      options.fixedSidebarOffset = tocElement.offsetTop;
    }
    if (scrollTop > options.fixedSidebarOffset) {
      if (posFixedEl.className.indexOf(options.positionFixedClass) === -1) {
        posFixedEl.className += SPACE_CHAR + options.positionFixedClass;
      }
    } else {
      posFixedEl.className = posFixedEl.className.replace(
        SPACE_CHAR + options.positionFixedClass,
        ""
      );
    }
  }
  __name(updateFixedSidebarClass, "updateFixedSidebarClass");
  function getHeadingTopPos(obj) {
    let position = 0;
    if (obj !== null) {
      position = obj.offsetTop;
      if (options.hasInnerContainers) {
        position += getHeadingTopPos(obj.offsetParent);
      }
    }
    return position;
  }
  __name(getHeadingTopPos, "getHeadingTopPos");
  function updateClassname(obj, className) {
    if (obj && obj.className !== className) {
      obj.className = className;
    }
    return obj;
  }
  __name(updateClassname, "updateClassname");
  function updateToc(headingsArray, event) {
    if (options.positionFixedSelector) {
      updateFixedSidebarClass();
    }
    const headings = headingsArray;
    const clickedHref = event?.target?.getAttribute ? event?.target?.getAttribute("href") : null;
    const isBottomMode = clickedHref && clickedHref.charAt(0) === "#" ? getIsHeaderBottomMode(clickedHref.replace("#", "")) : false;
    const shouldUpdate = currentlyHighlighting || isBottomMode;
    if (event && eventCount < 5) {
      eventCount++;
    }
    if (shouldUpdate && !!tocElement && headings.length > 0) {
      const topHeader = getTopHeader(headings);
      const oldActiveTocLink = tocElement.querySelector(
        `.${options.activeLinkClass}`
      );
      const topHeaderId = topHeader.id.replace(
        /([ #;&,.+*~':"!^$[\]()=>|/\\@])/g,
        "\\$1"
      );
      const hashId = window.location.hash.replace("#", "");
      let activeId = topHeaderId;
      const isPageBottomMode = getIsPageBottomMode();
      if (clickedHref && isBottomMode) {
        activeId = clickedHref.replace("#", "");
      } else if (hashId && hashId !== topHeaderId && isPageBottomMode && (getIsHeaderBottomMode(topHeaderId) || eventCount <= 2)) {
        activeId = hashId;
      }
      const activeTocLink = tocElement.querySelector(
        `.${options.linkClass}[href="${options.basePath}#${activeId}"]`
      );
      if (oldActiveTocLink === activeTocLink) {
        return;
      }
      const tocLinks = tocElement.querySelectorAll(`.${options.linkClass}`);
      forEach.call(tocLinks, (tocLink) => {
        updateClassname(
          tocLink,
          tocLink.className.replace(SPACE_CHAR + options.activeLinkClass, "")
        );
      });
      const tocLis = tocElement.querySelectorAll(`.${options.listItemClass}`);
      forEach.call(tocLis, (tocLi) => {
        updateClassname(
          tocLi,
          tocLi.className.replace(SPACE_CHAR + options.activeListItemClass, "")
        );
      });
      if (activeTocLink && activeTocLink.className.indexOf(options.activeLinkClass) === -1) {
        activeTocLink.className += SPACE_CHAR + options.activeLinkClass;
      }
      const li = activeTocLink?.parentNode;
      if (li && li.className.indexOf(options.activeListItemClass) === -1) {
        li.className += SPACE_CHAR + options.activeListItemClass;
      }
      const tocLists = tocElement.querySelectorAll(
        `.${options.listClass}.${options.collapsibleClass}`
      );
      forEach.call(tocLists, (list) => {
        if (list.className.indexOf(options.isCollapsedClass) === -1) {
          list.className += SPACE_CHAR + options.isCollapsedClass;
        }
      });
      if (activeTocLink?.nextSibling && activeTocLink.nextSibling.className.indexOf(
        options.isCollapsedClass
      ) !== -1) {
        updateClassname(
          activeTocLink.nextSibling,
          activeTocLink.nextSibling.className.replace(
            SPACE_CHAR + options.isCollapsedClass,
            ""
          )
        );
      }
      removeCollapsedFromParents(activeTocLink?.parentNode.parentNode);
    }
  }
  __name(updateToc, "updateToc");
  function removeCollapsedFromParents(element) {
    if (element && element.className.indexOf(options.collapsibleClass) !== -1 && element.className.indexOf(options.isCollapsedClass) !== -1) {
      updateClassname(
        element,
        element.className.replace(SPACE_CHAR + options.isCollapsedClass, "")
      );
      return removeCollapsedFromParents(element.parentNode.parentNode);
    }
    return element;
  }
  __name(removeCollapsedFromParents, "removeCollapsedFromParents");
  function disableTocAnimation(event) {
    const target = event.target || event.srcElement;
    if (typeof target.className !== "string" || target.className.indexOf(options.linkClass) === -1) {
      return;
    }
    currentlyHighlighting = false;
  }
  __name(disableTocAnimation, "disableTocAnimation");
  function enableTocAnimation() {
    currentlyHighlighting = true;
  }
  __name(enableTocAnimation, "enableTocAnimation");
  function getCurrentlyHighlighting() {
    return currentlyHighlighting;
  }
  __name(getCurrentlyHighlighting, "getCurrentlyHighlighting");
  function getIsHeaderBottomMode(headerId) {
    const scrollEl = getScrollEl();
    const activeHeading = document?.getElementById(headerId);
    const isBottomMode = activeHeading.offsetTop > scrollEl.offsetHeight - scrollEl.clientHeight * 1.4 - options.bottomModeThreshold;
    return isBottomMode;
  }
  __name(getIsHeaderBottomMode, "getIsHeaderBottomMode");
  function getIsPageBottomMode() {
    const scrollEl = getScrollEl();
    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;
    const isBottomMode = getScrollTop() + scrollEl.clientHeight > scrollEl.offsetHeight - options.bottomModeThreshold;
    return isScrollable && isBottomMode;
  }
  __name(getIsPageBottomMode, "getIsPageBottomMode");
  function getScrollEl() {
    let el;
    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {
      el = document.querySelector(options.scrollContainer);
    } else {
      el = document.documentElement || body;
    }
    return el;
  }
  __name(getScrollEl, "getScrollEl");
  function getScrollTop() {
    const el = getScrollEl();
    return el?.scrollTop || 0;
  }
  __name(getScrollTop, "getScrollTop");
  function getTopHeader(headings, scrollTop = getScrollTop()) {
    let topHeader;
    some.call(headings, (heading, i2) => {
      if (getHeadingTopPos(heading) > scrollTop + options.headingsOffset + 10) {
        const index = i2 === 0 ? i2 : i2 - 1;
        topHeader = headings[index];
        return true;
      }
      if (i2 === headings.length - 1) {
        topHeader = headings[headings.length - 1];
        return true;
      }
    });
    return topHeader;
  }
  __name(getTopHeader, "getTopHeader");
  function updateUrlHashForHeader(headingsArray) {
    const scrollTop = getScrollTop();
    const topHeader = getTopHeader(headingsArray, scrollTop);
    const isPageBottomMode = getIsPageBottomMode();
    if ((!topHeader || scrollTop < 5) && !isPageBottomMode) {
      if (!(window.location.hash === "#" || window.location.hash === "")) {
        window.history.pushState(null, null, "#");
      }
    } else if (topHeader && !isPageBottomMode) {
      const newHash = `#${topHeader.id}`;
      if (window.location.hash !== newHash) {
        window.history.pushState(null, null, newHash);
      }
    }
  }
  __name(updateUrlHashForHeader, "updateUrlHashForHeader");
  return {
    enableTocAnimation,
    disableTocAnimation,
    render,
    updateToc,
    getCurrentlyHighlighting,
    getTopHeader,
    getScrollTop,
    updateUrlHashForHeader
  };
}
__name(build_html_default, "default");
var default_options_default = {
  // Where to render the table of contents.
  tocSelector: ".js-toc",
  // Or, you can pass in a DOM node instead
  tocElement: null,
  // Where to grab the headings to build the table of contents.
  contentSelector: ".js-toc-content",
  // Or, you can pass in a DOM node instead
  contentElement: null,
  // Which headings to grab inside of the contentSelector element.
  headingSelector: "h1, h2, h3",
  // Headings that match the ignoreSelector will be skipped.
  ignoreSelector: ".js-toc-ignore",
  // For headings inside relative or absolute positioned
  // containers within content.
  hasInnerContainers: false,
  // Main class to add to links.
  linkClass: "toc-link",
  // Extra classes to add to links.
  extraLinkClasses: "",
  // Class to add to active links,
  // the link corresponding to the top most heading on the page.
  activeLinkClass: "is-active-link",
  // Main class to add to lists.
  listClass: "toc-list",
  // Extra classes to add to lists.
  extraListClasses: "",
  // Class that gets added when a list should be collapsed.
  isCollapsedClass: "is-collapsed",
  // Class that gets added when a list should be able
  // to be collapsed but isn't necessarily collapsed.
  collapsibleClass: "is-collapsible",
  // Class to add to list items.
  listItemClass: "toc-list-item",
  // Class to add to active list items.
  activeListItemClass: "is-active-li",
  // How many heading levels should not be collapsed.
  // For example, number 6 will show everything since
  // there are only 6 heading levels and number 0 will collapse them all.
  // The sections that are hidden will open
  // and close as you scroll to headings within them.
  collapseDepth: 0,
  // Smooth scrolling enabled.
  scrollSmooth: true,
  // Smooth scroll duration.
  scrollSmoothDuration: 420,
  // Smooth scroll offset.
  scrollSmoothOffset: 0,
  // Callback for scroll end.
  scrollEndCallback: __name(function(e2) {
  }, "scrollEndCallback"),
  // Headings offset between the headings and the top of
  // the document (this is meant for minor adjustments).
  headingsOffset: 1,
  // Enable the URL hash to update with the proper heading ID as
  // a user scrolls the page.
  enableUrlHashUpdateOnScroll: false,
  // type of scroll handler to use. to make scroll event not too rapid.
  // Options are: "debounce" or "throttle"
  // when set auto , use debounce less than 333ms , other use throttle.
  // for ios browser can't use history.pushState() more than 100 times per 30 seconds reason
  scrollHandlerType: "auto",
  //  scrollHandler delay in ms.
  scrollHandlerTimeout: 50,
  // Timeout between events firing to make sure it's
  // not too rapid (for performance reasons).
  throttleTimeout: 50,
  // Element to add the positionFixedClass to.
  positionFixedSelector: null,
  // Fixed position class to add to make sidebar fixed after scrolling
  // down past the fixedSidebarOffset.
  positionFixedClass: "is-position-fixed",
  // fixedSidebarOffset can be any number but by default is set
  // to auto which sets the fixedSidebarOffset to the sidebar
  // element's offsetTop from the top of the document on init.
  fixedSidebarOffset: "auto",
  // includeHtml can be set to true to include the HTML markup from the
  // heading node instead of just including the innerText.
  includeHtml: false,
  // includeTitleTags automatically sets the html title tag of the link
  // to match the title. This can be useful for SEO purposes or
  // when truncating titles.
  includeTitleTags: false,
  // onclick function to apply to all links in toc. will be called with
  // the event as the first parameter, and this can be used to stop,
  // propagation, prevent default or perform action
  onClick: __name(function(e2) {
  }, "onClick"),
  // orderedList can be set to false to generate unordered lists (ul)
  // instead of ordered lists (ol)
  orderedList: true,
  // If there is a fixed article scroll container, set to calculate offset.
  scrollContainer: null,
  // prevent ToC DOM rendering if it's already rendered by an external system.
  skipRendering: false,
  // Optional callback to change heading labels.
  // For example it can be used to cut down and put ellipses on multiline headings you deem too long.
  // Called each time a heading is parsed. Expects a string and returns the modified label to display.
  // Additionally, the attribute `data-heading-label` may be used on a heading to specify
  // a shorter string to be used in the TOC.
  // function (string) => string
  headingLabelCallback: false,
  // ignore headings that are hidden in DOM
  ignoreHiddenElements: false,
  // Optional callback to modify properties of parsed headings.
  // The heading element is passed in node parameter and information
  // parsed by default parser is provided in obj parameter.
  // Function has to return the same or modified obj.
  // The heading will be excluded from TOC if nothing is returned.
  // function (object, HTMLElement) => object | void
  headingObjectCallback: null,
  // Set the base path, useful if you use a `base` tag in `head`.
  basePath: "",
  // Only takes affect when `tocSelector` is scrolling,
  // keep the toc scroll position in sync with the content.
  disableTocScrollSync: false,
  // If this is null then just use `tocElement` or `tocSelector` instead
  // assuming `disableTocScrollSync` is set to false. This allows for
  // scrolling an outer element (like a nav panel w/ search) containing the toc.
  // Please pass an element, not a selector here.
  tocScrollingWrapper: null,
  // Offset for the toc scroll (top) position when scrolling the page.
  // Only effective if `disableTocScrollSync` is false.
  tocScrollOffset: 30,
  // Threshold for when bottom mode should be enabled to handle
  // highlighting links that cannot be scrolled to.
  bottomModeThreshold: 30
};
function parseContent(options) {
  const reduce = [].reduce;
  function getLastItem(array2) {
    return array2[array2.length - 1];
  }
  __name(getLastItem, "getLastItem");
  function getHeadingLevel(heading) {
    return +heading.nodeName.toUpperCase().replace("H", "");
  }
  __name(getHeadingLevel, "getHeadingLevel");
  function isHTMLElement(maybeElement) {
    try {
      return maybeElement instanceof window.HTMLElement || maybeElement instanceof window.parent.HTMLElement;
    } catch (e2) {
      return maybeElement instanceof window.HTMLElement;
    }
  }
  __name(isHTMLElement, "isHTMLElement");
  function getHeadingObject(heading) {
    if (!isHTMLElement(heading)) return heading;
    if (options.ignoreHiddenElements && (!heading.offsetHeight || !heading.offsetParent)) {
      return null;
    }
    const headingLabel = heading.getAttribute("data-heading-label") || (options.headingLabelCallback ? String(options.headingLabelCallback(heading.innerText)) : (heading.innerText || heading.textContent).trim());
    const obj = {
      id: heading.id,
      children: [],
      nodeName: heading.nodeName,
      headingLevel: getHeadingLevel(heading),
      textContent: headingLabel
    };
    if (options.includeHtml) {
      obj.childNodes = heading.childNodes;
    }
    if (options.headingObjectCallback) {
      return options.headingObjectCallback(obj, heading);
    }
    return obj;
  }
  __name(getHeadingObject, "getHeadingObject");
  function addNode(node, nest) {
    const obj = getHeadingObject(node);
    const level = obj.headingLevel;
    let array2 = nest;
    let lastItem = getLastItem(array2);
    const lastItemLevel = lastItem ? lastItem.headingLevel : 0;
    let counter = level - lastItemLevel;
    while (counter > 0) {
      lastItem = getLastItem(array2);
      if (lastItem && level === lastItem.headingLevel) {
        break;
      } else if (lastItem && lastItem.children !== void 0) {
        array2 = lastItem.children;
      }
      counter--;
    }
    if (level >= options.collapseDepth) {
      obj.isCollapsed = true;
    }
    array2.push(obj);
    return array2;
  }
  __name(addNode, "addNode");
  function selectHeadings(contentElement, headingSelector) {
    let selectors = headingSelector;
    if (options.ignoreSelector) {
      selectors = headingSelector.split(",").map(__name(function mapSelectors(selector) {
        return `${selector.trim()}:not(${options.ignoreSelector})`;
      }, "mapSelectors"));
    }
    try {
      return contentElement.querySelectorAll(selectors);
    } catch (e2) {
      console.warn(`Headers not found with selector: ${selectors}`);
      return null;
    }
  }
  __name(selectHeadings, "selectHeadings");
  function nestHeadingsArray(headingsArray) {
    return reduce.call(
      headingsArray,
      __name(function reducer(prev, curr) {
        const currentHeading = getHeadingObject(curr);
        if (currentHeading) {
          addNode(currentHeading, prev.nest);
        }
        return prev;
      }, "reducer"),
      {
        nest: []
      }
    );
  }
  __name(nestHeadingsArray, "nestHeadingsArray");
  return {
    nestHeadingsArray,
    selectHeadings
  };
}
__name(parseContent, "parseContent");
function initSmoothScrolling(options) {
  var duration = options.duration;
  var offset = options.offset;
  if (typeof window === "undefined" || typeof location === "undefined") return;
  var pageUrl = location.hash ? stripHash(location.href) : location.href;
  delegatedLinkHijacking();
  function delegatedLinkHijacking() {
    document.body.addEventListener("click", onClick, false);
    function onClick(e2) {
      if (!isInPageLink(e2.target) || e2.target.className.indexOf("no-smooth-scroll") > -1 || e2.target.href.charAt(e2.target.href.length - 2) === "#" && e2.target.href.charAt(e2.target.href.length - 1) === "!" || e2.target.className.indexOf(options.linkClass) === -1) {
        return;
      }
      jump(e2.target.hash, {
        duration,
        offset,
        callback: __name(function() {
          setFocus(e2.target.hash);
        }, "callback")
      });
    }
    __name(onClick, "onClick");
  }
  __name(delegatedLinkHijacking, "delegatedLinkHijacking");
  function isInPageLink(n2) {
    return n2.tagName.toLowerCase() === "a" && (n2.hash.length > 0 || n2.href.charAt(n2.href.length - 1) === "#") && (stripHash(n2.href) === pageUrl || stripHash(n2.href) + "#" === pageUrl);
  }
  __name(isInPageLink, "isInPageLink");
  function stripHash(url) {
    return url.slice(0, url.lastIndexOf("#"));
  }
  __name(stripHash, "stripHash");
  function setFocus(hash) {
    var element = document.getElementById(hash.substring(1));
    if (element) {
      if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {
        element.tabIndex = -1;
      }
      element.focus();
    }
  }
  __name(setFocus, "setFocus");
}
__name(initSmoothScrolling, "initSmoothScrolling");
function jump(target, options) {
  var start = window.pageYOffset;
  var opt = {
    duration: options.duration,
    offset: options.offset || 0,
    callback: options.callback,
    easing: options.easing || easeInOutQuad
  };
  var tgt = document.querySelector(
    '[id="' + decodeURI(target).split("#").join("") + '"]'
  ) || document.querySelector('[id="' + target.split("#").join("") + '"]');
  var distance = typeof target === "string" ? opt.offset + (target ? tgt && tgt.getBoundingClientRect().top || 0 : -(document.documentElement.scrollTop || document.body.scrollTop)) : target;
  var duration = typeof opt.duration === "function" ? opt.duration(distance) : opt.duration;
  var timeStart;
  var timeElapsed;
  requestAnimationFrame(function(time) {
    timeStart = time;
    loop(time);
  });
  function loop(time) {
    timeElapsed = time - timeStart;
    window.scrollTo(0, opt.easing(timeElapsed, start, distance, duration));
    if (timeElapsed < duration) {
      requestAnimationFrame(loop);
    } else {
      end();
    }
  }
  __name(loop, "loop");
  function end() {
    window.scrollTo(0, start + distance);
    if (typeof opt.callback === "function") {
      opt.callback();
    }
  }
  __name(end, "end");
  function easeInOutQuad(t, b2, c2, d2) {
    t /= d2 / 2;
    if (t < 1) return c2 / 2 * t * t + b2;
    t--;
    return -c2 / 2 * (t * (t - 2) - 1) + b2;
  }
  __name(easeInOutQuad, "easeInOutQuad");
}
__name(jump, "jump");
function updateTocScroll(options) {
  const toc = options.tocScrollingWrapper || options.tocElement || document.querySelector(options.tocSelector);
  if (toc && toc.scrollHeight > toc.clientHeight) {
    const activeItem = toc.querySelector(`.${options.activeListItemClass}`);
    if (activeItem) {
      const eTop = activeItem.offsetTop;
      const scrollAmount = eTop - options.tocScrollOffset;
      toc.scrollTop = scrollAmount > 0 ? scrollAmount : 0;
    }
  }
}
__name(updateTocScroll, "updateTocScroll");
var _options = {};
var _buildHtml;
var _parseContent;
var _headingsArray;
var _scrollListener;
var clickListener;
function init(customOptions) {
  let hasInitialized = false;
  _options = extend(default_options_default, customOptions || {});
  if (_options.scrollSmooth) {
    _options.duration = _options.scrollSmoothDuration;
    _options.offset = _options.scrollSmoothOffset;
    initSmoothScrolling(_options);
  }
  _buildHtml = build_html_default(_options);
  _parseContent = parseContent(_options);
  destroy();
  const contentElement = getContentElement(_options);
  if (contentElement === null) {
    return;
  }
  const tocElement = getTocElement(_options);
  if (tocElement === null) {
    return;
  }
  _headingsArray = _parseContent.selectHeadings(
    contentElement,
    _options.headingSelector
  );
  if (_headingsArray === null) {
    return;
  }
  const nestedHeadingsObj = _parseContent.nestHeadingsArray(_headingsArray);
  const nestedHeadings = nestedHeadingsObj.nest;
  if (!_options.skipRendering) {
    _buildHtml.render(tocElement, nestedHeadings);
  } else {
    return this;
  }
  let isClick = false;
  const scrollHandlerTimeout = _options.scrollHandlerTimeout || _options.throttleTimeout;
  const scrollHandler = __name((fn, delay) => getScrollHandler(fn, delay, _options.scrollHandlerType), "scrollHandler");
  _scrollListener = scrollHandler((e2) => {
    _buildHtml.updateToc(_headingsArray, e2);
    !_options.disableTocScrollSync && !isClick && updateTocScroll(_options);
    if (_options.enableUrlHashUpdateOnScroll && hasInitialized) {
      const enableUpdatingHash = _buildHtml.getCurrentlyHighlighting();
      enableUpdatingHash && _buildHtml.updateUrlHashForHeader(_headingsArray);
    }
    const isTop = e2?.target?.scrollingElement?.scrollTop === 0;
    if (e2 && (e2.eventPhase === 0 || e2.currentTarget === null) || isTop) {
      _buildHtml.updateToc(_headingsArray);
      _options.scrollEndCallback?.(e2);
    }
  }, scrollHandlerTimeout);
  if (!hasInitialized) {
    _scrollListener();
    hasInitialized = true;
  }
  window.onhashchange = window.onscrollend = (e2) => {
    _scrollListener(e2);
  };
  if (_options.scrollContainer && document.querySelector(_options.scrollContainer)) {
    document.querySelector(_options.scrollContainer).addEventListener("scroll", _scrollListener, false);
    document.querySelector(_options.scrollContainer).addEventListener("resize", _scrollListener, false);
  } else {
    document.addEventListener("scroll", _scrollListener, false);
    document.addEventListener("resize", _scrollListener, false);
  }
  let timeout = null;
  clickListener = throttle((event) => {
    isClick = true;
    if (_options.scrollSmooth) {
      _buildHtml.disableTocAnimation(event);
    }
    _buildHtml.updateToc(_headingsArray, event);
    timeout && clearTimeout(timeout);
    timeout = setTimeout(() => {
      _buildHtml.enableTocAnimation();
    }, _options.scrollSmoothDuration);
    setTimeout(() => {
      isClick = false;
    }, _options.scrollSmoothDuration + 100);
  }, _options.throttleTimeout);
  if (_options.scrollContainer && document.querySelector(_options.scrollContainer)) {
    document.querySelector(_options.scrollContainer).addEventListener("click", clickListener, false);
  } else {
    document.addEventListener("click", clickListener, false);
  }
}
__name(init, "init");
function destroy() {
  const tocElement = getTocElement(_options);
  if (tocElement === null) {
    return;
  }
  if (!_options.skipRendering) {
    if (tocElement) {
      tocElement.innerHTML = "";
    }
  }
  if (_options.scrollContainer && document.querySelector(_options.scrollContainer)) {
    document.querySelector(_options.scrollContainer).removeEventListener("scroll", _scrollListener, false);
    document.querySelector(_options.scrollContainer).removeEventListener("resize", _scrollListener, false);
    if (_buildHtml) {
      document.querySelector(_options.scrollContainer).removeEventListener("click", clickListener, false);
    }
  } else {
    document.removeEventListener("scroll", _scrollListener, false);
    document.removeEventListener("resize", _scrollListener, false);
    if (_buildHtml) {
      document.removeEventListener("click", clickListener, false);
    }
  }
}
__name(destroy, "destroy");
function refresh(customOptions) {
  destroy();
  init(customOptions || _options);
}
__name(refresh, "refresh");
var hasOwnProp = Object.prototype.hasOwnProperty;
function extend(...args) {
  const target = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const source = args[i2];
    for (const key in source) {
      if (hasOwnProp.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}
__name(extend, "extend");
function throttle(fn, threshold, scope) {
  threshold || (threshold = 250);
  let last2;
  let deferTimer;
  return function(...args) {
    const context = scope || this;
    const now = +/* @__PURE__ */ new Date();
    if (last2 && now < last2 + threshold) {
      clearTimeout(deferTimer);
      deferTimer = setTimeout(() => {
        last2 = now;
        fn.apply(context, args);
      }, threshold);
    } else {
      last2 = now;
      fn.apply(context, args);
    }
  };
}
__name(throttle, "throttle");
function debounce(func, wait) {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}
__name(debounce, "debounce");
function getScrollHandler(func, timeout, type = "auto") {
  switch (type) {
    case "debounce":
      return debounce(func, timeout);
    case "throttle":
      return throttle(func, timeout);
    default:
      return timeout < 334 ? debounce(func, timeout) : throttle(func, timeout);
  }
}
__name(getScrollHandler, "getScrollHandler");
function getContentElement(options) {
  try {
    return options.contentElement || document.querySelector(options.contentSelector);
  } catch (e2) {
    console.warn(`Contents element not found: ${options.contentSelector}`);
    return null;
  }
}
__name(getContentElement, "getContentElement");
function getTocElement(options) {
  try {
    return options.tocElement || document.querySelector(options.tocSelector);
  } catch (e2) {
    console.warn(`TOC element not found: ${options.tocSelector}`);
    return null;
  }
}
__name(getTocElement, "getTocElement");
var tocbot = { destroy, init, refresh };
var tocbot_default = tocbot;
var Aside = styled.aside(() => ({
  width: "10rem",
  "@media (max-width: 768px)": {
    display: "none"
  }
}));
var Nav = styled.nav(({ theme }) => ({
  position: "fixed",
  bottom: 0,
  top: 0,
  width: "10rem",
  paddingTop: "4rem",
  paddingBottom: "2rem",
  overflowY: "auto",
  fontFamily: theme.typography.fonts.base,
  fontSize: theme.typography.size.s2,
  WebkitFontSmoothing: "antialiased",
  MozOsxFontSmoothing: "grayscale",
  WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
  WebkitOverflowScrolling: "touch",
  "& *": {
    boxSizing: "border-box"
  },
  "& > .toc-wrapper > .toc-list": {
    paddingLeft: 0,
    borderLeft: `solid 2px ${theme.color.mediumlight}`,
    ".toc-list": {
      paddingLeft: 0,
      borderLeft: `solid 2px ${theme.color.mediumlight}`,
      ".toc-list": {
        paddingLeft: 0,
        borderLeft: `solid 2px ${theme.color.mediumlight}`
      }
    }
  },
  "& .toc-list-item": {
    position: "relative",
    listStyleType: "none",
    marginLeft: 20,
    paddingTop: 3,
    paddingBottom: 3
  },
  "& .toc-list-item::before": {
    content: '""',
    position: "absolute",
    height: "100%",
    top: 0,
    left: 0,
    transform: `translateX(calc(-2px - 20px))`,
    borderLeft: `solid 2px ${theme.color.mediumdark}`,
    opacity: 0,
    transition: "opacity 0.2s"
  },
  "& .toc-list-item.is-active-li::before": {
    opacity: 1
  },
  "& .toc-list-item > a": {
    color: theme.color.defaultText,
    textDecoration: "none"
  },
  "& .toc-list-item.is-active-li > a": {
    fontWeight: 600,
    color: theme.color.secondary,
    textDecoration: "none"
  }
}));
var Heading = styled.p(({ theme }) => ({
  fontWeight: 600,
  fontSize: "0.875em",
  color: theme.textColor,
  textTransform: "uppercase",
  marginBottom: 10
}));
var Title2 = __name(({ headingId, title }) => {
  if (typeof title === "string" || !title) {
    return import_react17.default.createElement(Heading, { as: "h2", id: headingId, className: title ? "" : "sb-sr-only" }, title || "Table of contents");
  }
  return import_react17.default.createElement("div", { id: headingId }, title);
}, "Title");
var TableOfContents = __name(({
  title,
  disable,
  headingSelector,
  contentsSelector,
  ignoreSelector,
  unsafeTocbotOptions,
  channel,
  className
}) => {
  (0, import_react17.useEffect)(() => {
    if (disable) {
      return () => {
      };
    }
    const configuration = {
      tocSelector: ".toc-wrapper",
      contentSelector: contentsSelector ?? ".sbdocs-content",
      headingSelector: headingSelector ?? "h3",
      /** Ignore headings that did not come from the main markdown code. */
      ignoreSelector: ignoreSelector ?? ".docs-story *, .skip-toc",
      headingsOffset: 40,
      scrollSmoothOffset: -40,
      orderedList: false,
      /** Prevent default linking behavior, leaving only the smooth scrolling. */
      onClick: __name((e2) => {
        e2.preventDefault();
        if (e2.currentTarget instanceof HTMLAnchorElement) {
          const [, headerId] = e2.currentTarget.href.split("#");
          if (headerId) {
            channel.emit(import_core_events.NAVIGATE_URL, `#${headerId}`);
          }
        }
      }, "onClick"),
      ...unsafeTocbotOptions
    };
    const timeout = setTimeout(() => tocbot_default.init(configuration), 100);
    return () => {
      clearTimeout(timeout);
      tocbot_default.destroy();
    };
  }, [channel, disable, ignoreSelector, contentsSelector, headingSelector, unsafeTocbotOptions]);
  const headingId = (0, import_react17.useId)();
  return import_react17.default.createElement(Aside, { className }, !disable ? import_react17.default.createElement(Nav, { "aria-labelledby": headingId }, import_react17.default.createElement(Title2, { headingId, title }), import_react17.default.createElement("div", { className: "toc-wrapper" })) : null);
}, "TableOfContents");
function n() {
  return n = Object.assign ? Object.assign.bind() : function(e2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var r2 = arguments[n2];
      for (var t in r2) Object.prototype.hasOwnProperty.call(r2, t) && (e2[t] = r2[t]);
    }
    return e2;
  }, n.apply(this, arguments);
}
__name(n, "n");
var r = ["children", "options"];
var o = ["allowFullScreen", "allowTransparency", "autoComplete", "autoFocus", "autoPlay", "cellPadding", "cellSpacing", "charSet", "classId", "colSpan", "contentEditable", "contextMenu", "crossOrigin", "encType", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "hrefLang", "inputMode", "keyParams", "keyType", "marginHeight", "marginWidth", "maxLength", "mediaGroup", "minLength", "noValidate", "radioGroup", "readOnly", "rowSpan", "spellCheck", "srcDoc", "srcLang", "srcSet", "tabIndex", "useMap"].reduce((e2, n2) => (e2[n2.toLowerCase()] = n2, e2), { class: "className", for: "htmlFor" });
var a = { amp: "&", apos: "'", gt: ">", lt: "<", nbsp: " ", quot: "“" };
var c = ["style", "script", "pre"];
var i = ["src", "href", "data", "formAction", "srcDoc", "action"];
var u = /([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi;
var l = /mailto:/i;
var s = /\n{2,}$/;
var f = /^(\s*>[\s\S]*?)(?=\n\n|$)/;
var _ = /^ *> ?/gm;
var d = /^(?:\[!([^\]]*)\]\n)?([\s\S]*)/;
var p = /^ {2,}\n/;
var y = /^(?:( *[-*_])){3,} *(?:\n *)+\n/;
var h = /^(?: {1,3})?(`{3,}|~{3,}) *(\S+)? *([^\n]*?)?\n([\s\S]*?)(?:\1\n?|$)/;
var g = /^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/;
var m = /^(`+)((?:\\`|(?!\1)`|[^`])+)\1/;
var k = /^(?:\n *)*\n/;
var x = /\r\n?/g;
var v = /^\[\^([^\]]+)](:(.*)((\n+ {4,}.*)|(\n(?!\[\^).+))*)/;
var q = /^\[\^([^\]]+)]/;
var $ = /\f/g;
var b = /^---[ \t]*\n(.|\n)*\n---[ \t]*\n/;
var S = /^\s*?\[(x|\s)\]/;
var z = /^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/;
var E = /^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/;
var A = /^([^\n]+)\n *(=|-){3,} *\n/;
var R = /^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1\b)[\s\S])*?)<\/\1>(?!<\/\1>)\n*/i;
var B = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi;
var L = /^<!--[\s\S]*?(?:-->)/;
var O = /^(data|aria|x)-[a-z_][a-z\d_.-]*$/;
var j = /^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i;
var C = /^\{.*\}$/;
var I = /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/;
var T = /^<([^ >]+@[^ >]+)>/;
var M = /^<([^ >]+:\/[^ >]+)>/;
var w = /-([a-z])?/gi;
var D = /^(\|.*)\n(?: *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*))?\n?/;
var F = /^[^\n]+(?:  \n|\n{2,})/;
var P = /^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/;
var Z = /^!\[([^\]]*)\] ?\[([^\]]*)\]/;
var N = /^\[([^\]]*)\] ?\[([^\]]*)\]/;
var G = /(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/;
var U = /\t/g;
var V = /(^ *\||\| *$)/g;
var H = /^ *:-+: *$/;
var Q = /^ *:-+ *$/;
var W = /^ *-+: *$/;
var J = __name((e2) => `(?=[\\s\\S]+?\\1${e2 ? "\\1" : ""})`, "J");
var K = "((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\1|[\\s\\S])+?)";
var X = RegExp(`^([*_])\\1${J(1)}${K}\\1\\1(?!\\1)`);
var Y = RegExp(`^([*_])${J(0)}${K}\\1(?!\\1)`);
var ee = RegExp(`^(==)${J(0)}${K}\\1`);
var ne = RegExp(`^(~~)${J(0)}${K}\\1`);
var re = /^(:[a-zA-Z0-9-_]+:)/;
var te = /^\\([^0-9A-Za-z\s])/;
var oe = /\\([^0-9A-Za-z\s])/g;
var ae = /^[\s\S](?:(?!  \n|[0-9]\.|http)[^=*_~\-\n:<`\\\[!])*/;
var ce = /^\n+/;
var ie = /^([ \t]*)/;
var ue = /(?:^|\n)( *)$/;
var le = "(?:\\d+\\.)";
var se = "(?:[*+-])";
function fe(e2) {
  return "( *)(" + (1 === e2 ? le : se) + ") +";
}
__name(fe, "fe");
var _e = fe(1);
var de = fe(2);
function pe(e2) {
  return RegExp("^" + (1 === e2 ? _e : de));
}
__name(pe, "pe");
var ye = pe(1);
var he = pe(2);
function ge(e2) {
  return RegExp("^" + (1 === e2 ? _e : de) + "[^\\n]*(?:\\n(?!\\1" + (1 === e2 ? le : se) + " )[^\\n]*)*(\\n|$)", "gm");
}
__name(ge, "ge");
var me = ge(1);
var ke = ge(2);
function xe(e2) {
  const n2 = 1 === e2 ? le : se;
  return RegExp("^( *)(" + n2 + ") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1" + n2 + " (?!" + n2 + " ))\\n*|\\s*\\n*$)");
}
__name(xe, "xe");
var ve = xe(1);
var qe = xe(2);
function $e(e2, n2) {
  const r2 = 1 === n2, t = r2 ? ve : qe, o2 = r2 ? me : ke, a2 = r2 ? ye : he;
  return { t: __name((e3) => a2.test(e3), "t"), o: Ce(function(e3, n3) {
    const r3 = ue.exec(n3.prevCapture);
    return r3 && (n3.list || !n3.inline && !n3.simple) ? t.exec(e3 = r3[1] + e3) : null;
  }), i: 1, u(e3, n3, t2) {
    const c2 = r2 ? +e3[2] : void 0, i2 = e3[0].replace(s, "\n").match(o2);
    let u2 = false;
    return { items: i2.map(function(e4, r3) {
      const o3 = a2.exec(e4)[0].length, c3 = RegExp("^ {1," + o3 + "}", "gm"), l2 = e4.replace(c3, "").replace(a2, ""), s2 = r3 === i2.length - 1, f2 = -1 !== l2.indexOf("\n\n") || s2 && u2;
      u2 = f2;
      const _2 = t2.inline, d2 = t2.list;
      let p2;
      t2.list = true, f2 ? (t2.inline = false, p2 = ze(l2) + "\n\n") : (t2.inline = true, p2 = ze(l2));
      const y2 = n3(p2, t2);
      return t2.inline = _2, t2.list = d2, y2;
    }), ordered: r2, start: c2 };
  }, l: __name((n3, r3, t2) => e2(n3.ordered ? "ol" : "ul", { key: t2.key, start: "20" === n3.type ? n3.start : void 0 }, n3.items.map(function(n4, o3) {
    return e2("li", { key: o3 }, r3(n4, t2));
  })), "l") };
}
__name($e, "$e");
var be = RegExp(`^\\[((?:\\[[^\\[\\]]*(?:\\[[^\\[\\]]*\\][^\\[\\]]*)*\\]|[^\\[\\]])*)\\]\\(\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['"]([\\s\\S]*?)['"])?\\s*\\)`);
var Se = /^!\[(.*?)\]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/;
function ze(e2) {
  let n2 = e2.length;
  for (; n2 > 0 && e2[n2 - 1] <= " "; ) n2--;
  return e2.slice(0, n2);
}
__name(ze, "ze");
function Ee(e2, n2) {
  return e2.startsWith(n2);
}
__name(Ee, "Ee");
function Ae(e2, n2, r2) {
  if (Array.isArray(r2)) {
    for (let n3 = 0; n3 < r2.length; n3++) if (Ee(e2, r2[n3])) return true;
    return false;
  }
  return r2(e2, n2);
}
__name(Ae, "Ae");
function Re(e2) {
  return e2.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, "a").replace(/[çÇ]/g, "c").replace(/[ðÐ]/g, "d").replace(/[ÈÉÊËéèêë]/g, "e").replace(/[ÏïÎîÍíÌì]/g, "i").replace(/[Ññ]/g, "n").replace(/[øØœŒÕõÔôÓóÒò]/g, "o").replace(/[ÜüÛûÚúÙù]/g, "u").replace(/[ŸÿÝý]/g, "y").replace(/[^a-z0-9- ]/gi, "").replace(/ /gi, "-").toLowerCase();
}
__name(Re, "Re");
function Be(e2) {
  return W.test(e2) ? "right" : H.test(e2) ? "center" : Q.test(e2) ? "left" : null;
}
__name(Be, "Be");
function Le(e2, n2, r2, t) {
  const o2 = r2.inTable;
  r2.inTable = true;
  let a2 = [[]], c2 = "";
  function i2() {
    if (!c2) return;
    const e3 = a2[a2.length - 1];
    e3.push.apply(e3, n2(c2, r2)), c2 = "";
  }
  __name(i2, "i");
  return e2.trim().split(/(`[^`]*`|\\\||\|)/).filter(Boolean).forEach((e3, n3, r3) => {
    "|" === e3.trim() && (i2(), t) ? 0 !== n3 && n3 !== r3.length - 1 && a2.push([]) : c2 += e3;
  }), i2(), r2.inTable = o2, a2;
}
__name(Le, "Le");
function Oe(e2, n2, r2) {
  r2.inline = true;
  const t = e2[2] ? e2[2].replace(V, "").split("|").map(Be) : [], o2 = e2[3] ? (function(e3, n3, r3) {
    return e3.trim().split("\n").map(function(e4) {
      return Le(e4, n3, r3, true);
    });
  })(e2[3], n2, r2) : [], a2 = Le(e2[1], n2, r2, !!o2.length);
  return r2.inline = false, o2.length ? { align: t, cells: o2, header: a2, type: "25" } : { children: a2, type: "21" };
}
__name(Oe, "Oe");
function je(e2, n2) {
  return null == e2.align[n2] ? {} : { textAlign: e2.align[n2] };
}
__name(je, "je");
function Ce(e2) {
  return e2.inline = 1, e2;
}
__name(Ce, "Ce");
function Ie(e2) {
  return Ce(function(n2, r2) {
    return r2.inline ? e2.exec(n2) : null;
  });
}
__name(Ie, "Ie");
function Te(e2) {
  return Ce(function(n2, r2) {
    return r2.inline || r2.simple ? e2.exec(n2) : null;
  });
}
__name(Te, "Te");
function Me(e2) {
  return function(n2, r2) {
    return r2.inline || r2.simple ? null : e2.exec(n2);
  };
}
__name(Me, "Me");
function we(e2) {
  return Ce(function(n2) {
    return e2.exec(n2);
  });
}
__name(we, "we");
var De = /(javascript|vbscript|data(?!:image)):/i;
function Fe(e2) {
  try {
    const n2 = decodeURIComponent(e2).replace(/[^A-Za-z0-9/:]/g, "");
    if (De.test(n2)) return null;
  } catch (e3) {
    return null;
  }
  return e2;
}
__name(Fe, "Fe");
function Pe(e2) {
  return e2 ? e2.replace(oe, "$1") : e2;
}
__name(Pe, "Pe");
function Ze(e2, n2, r2) {
  const t = r2.inline || false, o2 = r2.simple || false;
  r2.inline = true, r2.simple = true;
  const a2 = e2(n2, r2);
  return r2.inline = t, r2.simple = o2, a2;
}
__name(Ze, "Ze");
function Ne(e2, n2, r2) {
  const t = r2.inline || false, o2 = r2.simple || false;
  r2.inline = false, r2.simple = true;
  const a2 = e2(n2, r2);
  return r2.inline = t, r2.simple = o2, a2;
}
__name(Ne, "Ne");
function Ge(e2, n2, r2) {
  const t = r2.inline || false;
  r2.inline = false;
  const o2 = e2(n2, r2);
  return r2.inline = t, o2;
}
__name(Ge, "Ge");
var Ue = __name((e2, n2, r2) => ({ children: Ze(n2, e2[2], r2) }), "Ue");
function Ve() {
  return {};
}
__name(Ve, "Ve");
function He() {
  return null;
}
__name(He, "He");
function Qe(...e2) {
  return e2.filter(Boolean).join(" ");
}
__name(Qe, "Qe");
function We(e2, n2, r2) {
  let t = e2;
  const o2 = n2.split(".");
  for (; o2.length && (t = t[o2[0]], void 0 !== t); ) o2.shift();
  return t || r2;
}
__name(We, "We");
function Je(r2 = "", t = {}) {
  t.overrides = t.overrides || {}, t.namedCodesToUnicode = t.namedCodesToUnicode ? n({}, a, t.namedCodesToUnicode) : a;
  const s2 = t.slugify || Re, V2 = t.sanitizer || Fe, H4 = t.createElement || e.createElement, Q2 = [f, h, g, t.enforceAtxHeadings ? E : z, A, D, ve, qe], W2 = [...Q2, F, R, L, j];
  function J2(e2, r3, ...o2) {
    const a2 = We(t.overrides, e2 + ".props", {});
    return H4((function(e3, n2) {
      const r4 = We(n2, e3);
      return r4 ? "function" == typeof r4 || "object" == typeof r4 && "render" in r4 ? r4 : We(n2, e3 + ".component", e3) : e3;
    })(e2, t.overrides), n({}, r3, a2, { className: Qe(null == r3 ? void 0 : r3.className, a2.className) || void 0 }), ...o2);
  }
  __name(J2, "J");
  function K2(e2) {
    e2 = e2.replace(b, "");
    let n2 = false;
    t.forceInline ? n2 = true : t.forceBlock || (n2 = false === G.test(e2));
    const r3 = _e2(fe2(n2 ? e2 : ze(e2).replace(ce, "") + "\n\n", { inline: n2 }));
    for (; "string" == typeof r3[r3.length - 1] && !r3[r3.length - 1].trim(); ) r3.pop();
    if (null === t.wrapper) return r3;
    const o2 = t.wrapper || (n2 ? "span" : "div");
    let a2;
    if (r3.length > 1 || t.forceWrapper) a2 = r3;
    else {
      if (1 === r3.length) return a2 = r3[0], "string" == typeof a2 ? J2("span", { key: "outer" }, a2) : a2;
      a2 = null;
    }
    return H4(o2, { key: "outer" }, a2);
  }
  __name(K2, "K");
  function oe2(e2, n2) {
    if (!n2 || !n2.trim()) return null;
    const r3 = n2.match(u);
    return r3 ? r3.reduce(function(n3, r4) {
      const t2 = r4.indexOf("=");
      if (-1 !== t2) {
        const a2 = (function(e3) {
          return -1 !== e3.indexOf("-") && null === e3.match(O) && (e3 = e3.replace(w, function(e4, n4) {
            return n4.toUpperCase();
          })), e3;
        })(r4.slice(0, t2)).trim(), c2 = (function(e3) {
          const n4 = e3[0];
          return ('"' === n4 || "'" === n4) && e3.length >= 2 && e3[e3.length - 1] === n4 ? e3.slice(1, -1) : e3;
        })(r4.slice(t2 + 1).trim()), u2 = o[a2] || a2;
        if ("ref" === u2) return n3;
        const l2 = n3[u2] = (function(e3, n4, r5, t3) {
          return "style" === n4 ? (function(e4) {
            const n5 = [];
            let r6 = "", t4 = false, o2 = false, a3 = "";
            if (!e4) return n5;
            for (let c4 = 0; c4 < e4.length; c4++) {
              const i2 = e4[c4];
              if ('"' !== i2 && "'" !== i2 || t4 || (o2 ? i2 === a3 && (o2 = false, a3 = "") : (o2 = true, a3 = i2)), "(" === i2 && r6.endsWith("url") ? t4 = true : ")" === i2 && t4 && (t4 = false), ";" !== i2 || o2 || t4) r6 += i2;
              else {
                const e5 = r6.trim();
                if (e5) {
                  const r7 = e5.indexOf(":");
                  if (r7 > 0) {
                    const t5 = e5.slice(0, r7).trim(), o3 = e5.slice(r7 + 1).trim();
                    n5.push([t5, o3]);
                  }
                }
                r6 = "";
              }
            }
            const c3 = r6.trim();
            if (c3) {
              const e5 = c3.indexOf(":");
              if (e5 > 0) {
                const r7 = c3.slice(0, e5).trim(), t5 = c3.slice(e5 + 1).trim();
                n5.push([r7, t5]);
              }
            }
            return n5;
          })(r5).reduce(function(n5, [r6, o2]) {
            return n5[r6.replace(/(-[a-z])/g, (e4) => e4[1].toUpperCase())] = t3(o2, e3, r6), n5;
          }, {}) : -1 !== i.indexOf(n4) ? t3(Pe(r5), e3, n4) : (r5.match(C) && (r5 = Pe(r5.slice(1, r5.length - 1))), "true" === r5 || "false" !== r5 && r5);
        })(e2, a2, c2, V2);
        "string" == typeof l2 && (R.test(l2) || j.test(l2)) && (n3[u2] = K2(l2.trim()));
      } else "style" !== r4 && (n3[o[r4] || r4] = true);
      return n3;
    }, {}) : null;
  }
  __name(oe2, "oe");
  const ue2 = [], le2 = {}, se2 = { 0: { t: [">"], o: Me(f), i: 1, u(e2, n2, r3) {
    const [, t2, o2] = e2[0].replace(_, "").match(d);
    return { alert: t2, children: n2(o2, r3) };
  }, l(e2, n2, r3) {
    const t2 = { key: r3.key };
    return e2.alert && (t2.className = "markdown-alert-" + s2(e2.alert.toLowerCase(), Re), e2.children.unshift({ attrs: {}, children: [{ type: "27", text: e2.alert }], noInnerParse: true, type: "11", tag: "header" })), J2("blockquote", t2, n2(e2.children, r3));
  } }, 1: { o: we(p), i: 1, u: Ve, l: __name((e2, n2, r3) => J2("br", { key: r3.key }), "l") }, 2: { t: __name((e2) => {
    const n2 = e2[0];
    return "-" === n2 || "*" === n2 || "_" === n2;
  }, "t"), o: Me(y), i: 1, u: Ve, l: __name((e2, n2, r3) => J2("hr", { key: r3.key }), "l") }, 3: { t: ["    "], o: Me(g), i: 0, u: __name((e2) => ({ lang: void 0, text: Pe(ze(e2[0].replace(/^ {4}/gm, ""))) }), "u"), l: __name((e2, r3, t2) => J2("pre", { key: t2.key }, J2("code", n({}, e2.attrs, { className: e2.lang ? "lang-" + e2.lang : "" }), e2.text)), "l") }, 4: { t: ["```", "~~~"], o: Me(h), i: 0, u: __name((e2) => ({ attrs: oe2("code", e2[3] || ""), lang: e2[2] || void 0, text: e2[4], type: "3" }), "u") }, 5: { t: ["`"], o: Te(m), i: 3, u: __name((e2) => ({ text: Pe(e2[2]) }), "u"), l: __name((e2, n2, r3) => J2("code", { key: r3.key }, e2.text), "l") }, 6: { t: ["[^"], o: Me(v), i: 0, u: __name((e2) => (ue2.push({ footnote: e2[2], identifier: e2[1] }), {}), "u"), l: He }, 7: { t: ["[^"], o: Ie(q), i: 1, u: __name((e2) => ({ target: "#" + s2(e2[1], Re), text: e2[1] }), "u"), l: __name((e2, n2, r3) => J2("a", { key: r3.key, href: V2(e2.target, "a", "href") }, J2("sup", { key: r3.key }, e2.text)), "l") }, 8: { t: ["[ ]", "[x]"], o: Ie(S), i: 1, u: __name((e2) => ({ completed: "x" === e2[1].toLowerCase() }), "u"), l: __name((e2, n2, r3) => J2("input", { checked: e2.completed, key: r3.key, readOnly: true, type: "checkbox" }), "l") }, 9: { t: ["#"], o: Me(t.enforceAtxHeadings ? E : z), i: 1, u: __name((e2, n2, r3) => ({ children: Ze(n2, e2[2], r3), id: s2(e2[2], Re), level: e2[1].length }), "u"), l: __name((e2, n2, r3) => J2("h" + e2.level, { id: e2.id, key: r3.key }, n2(e2.children, r3)), "l") }, 10: { o: Me(A), i: 0, u: __name((e2, n2, r3) => ({ children: Ze(n2, e2[1], r3), level: "=" === e2[2] ? 1 : 2, type: "9" }), "u") }, 11: { t: ["<"], o: we(R), i: 1, u(e2, n2, r3) {
    const [, t2] = e2[3].match(ie), o2 = RegExp("^" + t2, "gm"), a2 = e2[3].replace(o2, ""), i2 = (u2 = a2, W2.some((e3) => e3.test(u2)) ? Ge : Ze);
    var u2;
    const l2 = e2[1].toLowerCase(), s3 = -1 !== c.indexOf(l2), f2 = (s3 ? l2 : e2[1]).trim(), _2 = { attrs: oe2(f2, e2[2]), noInnerParse: s3, tag: f2 };
    if (r3.inAnchor = r3.inAnchor || "a" === l2, s3) _2.text = e2[3];
    else {
      const e3 = r3.inHTML;
      r3.inHTML = true, _2.children = i2(n2, a2, r3), r3.inHTML = e3;
    }
    return r3.inAnchor = false, _2;
  }, l: __name((e2, r3, t2) => J2(e2.tag, n({ key: t2.key }, e2.attrs), e2.text || (e2.children ? r3(e2.children, t2) : "")), "l") }, 13: { t: ["<"], o: we(j), i: 1, u(e2) {
    const n2 = e2[1].trim();
    return { attrs: oe2(n2, e2[2] || ""), tag: n2 };
  }, l: __name((e2, r3, t2) => J2(e2.tag, n({}, e2.attrs, { key: t2.key })), "l") }, 12: { t: ["<!--"], o: we(L), i: 1, u: __name(() => ({}), "u"), l: He }, 14: { t: ["!["], o: Te(Se), i: 1, u: __name((e2) => ({ alt: Pe(e2[1]), target: Pe(e2[2]), title: Pe(e2[3]) }), "u"), l: __name((e2, n2, r3) => J2("img", { key: r3.key, alt: e2.alt || void 0, title: e2.title || void 0, src: V2(e2.target, "img", "src") }), "l") }, 15: { t: ["["], o: Ie(be), i: 3, u: __name((e2, n2, r3) => ({ children: Ne(n2, e2[1], r3), target: Pe(e2[2]), title: Pe(e2[3]) }), "u"), l: __name((e2, n2, r3) => J2("a", { key: r3.key, href: V2(e2.target, "a", "href"), title: e2.title }, n2(e2.children, r3)), "l") }, 16: { t: ["<"], o: Ie(M), i: 0, u: __name((e2) => ({ children: [{ text: e2[1], type: "27" }], target: e2[1], type: "15" }), "u") }, 17: { t: __name((e2, n2) => !n2.inAnchor && !t.disableAutoLink && (Ee(e2, "http://") || Ee(e2, "https://")), "t"), o: Ie(I), i: 0, u: __name((e2) => ({ children: [{ text: e2[1], type: "27" }], target: e2[1], title: void 0, type: "15" }), "u") }, 18: { t: ["<"], o: Ie(T), i: 0, u(e2) {
    let n2 = e2[1], r3 = e2[1];
    return l.test(r3) || (r3 = "mailto:" + r3), { children: [{ text: n2.replace("mailto:", ""), type: "27" }], target: r3, type: "15" };
  } }, 20: $e(J2, 1), 33: $e(J2, 2), 19: { o: Me(k), i: 3, u: Ve, l: __name(() => "\n", "l") }, 21: { o: Ce(function(e2, n2) {
    if (n2.inline || n2.simple || n2.inHTML && -1 === e2.indexOf("\n\n") && -1 === n2.prevCapture.indexOf("\n\n")) return null;
    let r3 = "";
    e2.split("\n").every((e3) => (e3 += "\n", !Q2.some((n3) => n3.test(e3)) && (r3 += e3, !!e3.trim())));
    const t2 = ze(r3);
    return "" === t2 ? null : [r3, , t2];
  }), i: 3, u: Ue, l: __name((e2, n2, r3) => J2("p", { key: r3.key }, n2(e2.children, r3)), "l") }, 22: { t: ["["], o: Ie(P), i: 0, u: __name((e2) => (le2[e2[1]] = { target: e2[2], title: e2[4] }, {}), "u"), l: He }, 23: { t: ["!["], o: Te(Z), i: 0, u: __name((e2) => ({ alt: e2[1] ? Pe(e2[1]) : void 0, ref: e2[2] }), "u"), l: __name((e2, n2, r3) => le2[e2.ref] ? J2("img", { key: r3.key, alt: e2.alt, src: V2(le2[e2.ref].target, "img", "src"), title: le2[e2.ref].title }) : null, "l") }, 24: { t: __name((e2) => "[" === e2[0] && -1 === e2.indexOf("]("), "t"), o: Ie(N), i: 0, u: __name((e2, n2, r3) => ({ children: n2(e2[1], r3), fallbackChildren: e2[0], ref: e2[2] }), "u"), l: __name((e2, n2, r3) => le2[e2.ref] ? J2("a", { key: r3.key, href: V2(le2[e2.ref].target, "a", "href"), title: le2[e2.ref].title }, n2(e2.children, r3)) : J2("span", { key: r3.key }, e2.fallbackChildren), "l") }, 25: { t: ["|"], o: Me(D), i: 1, u: Oe, l(e2, n2, r3) {
    const t2 = e2;
    return J2("table", { key: r3.key }, J2("thead", null, J2("tr", null, t2.header.map(function(e3, o2) {
      return J2("th", { key: o2, style: je(t2, o2) }, n2(e3, r3));
    }))), J2("tbody", null, t2.cells.map(function(e3, o2) {
      return J2("tr", { key: o2 }, e3.map(function(e4, o3) {
        return J2("td", { key: o3, style: je(t2, o3) }, n2(e4, r3));
      }));
    })));
  } }, 27: { o: Ce(function(e2, n2) {
    let r3;
    return Ee(e2, ":") && (r3 = re.exec(e2)), r3 || ae.exec(e2);
  }), i: 4, u(e2) {
    const n2 = e2[0];
    return { text: -1 === n2.indexOf("&") ? n2 : n2.replace(B, (e3, n3) => t.namedCodesToUnicode[n3] || e3) };
  }, l: __name((e2) => e2.text, "l") }, 28: { t: ["**", "__"], o: Te(X), i: 2, u: __name((e2, n2, r3) => ({ children: n2(e2[2], r3) }), "u"), l: __name((e2, n2, r3) => J2("strong", { key: r3.key }, n2(e2.children, r3)), "l") }, 29: { t: __name((e2) => {
    const n2 = e2[0];
    return ("*" === n2 || "_" === n2) && e2[1] !== n2;
  }, "t"), o: Te(Y), i: 3, u: __name((e2, n2, r3) => ({ children: n2(e2[2], r3) }), "u"), l: __name((e2, n2, r3) => J2("em", { key: r3.key }, n2(e2.children, r3)), "l") }, 30: { t: ["\\"], o: Te(te), i: 1, u: __name((e2) => ({ text: e2[1], type: "27" }), "u") }, 31: { t: ["=="], o: Te(ee), i: 3, u: Ue, l: __name((e2, n2, r3) => J2("mark", { key: r3.key }, n2(e2.children, r3)), "l") }, 32: { t: ["~~"], o: Te(ne), i: 3, u: Ue, l: __name((e2, n2, r3) => J2("del", { key: r3.key }, n2(e2.children, r3)), "l") } };
  true === t.disableParsingRawHTML && (delete se2[11], delete se2[13]);
  const fe2 = (function(e2) {
    var n2 = Object.keys(e2);
    function r3(t2, o2) {
      var a2 = [];
      if (o2.prevCapture = o2.prevCapture || "", t2.trim()) for (; t2; ) for (var c2 = 0; c2 < n2.length; ) {
        var i2 = n2[c2], u2 = e2[i2];
        if (!u2.t || Ae(t2, o2, u2.t)) {
          var l2 = u2.o(t2, o2);
          if (l2 && l2[0]) {
            t2 = t2.substring(l2[0].length);
            var s3 = u2.u(l2, r3, o2);
            o2.prevCapture += l2[0], s3.type || (s3.type = i2), a2.push(s3);
            break;
          }
          c2++;
        } else c2++;
      }
      return o2.prevCapture = "", a2;
    }
    __name(r3, "r");
    return n2.sort(function(n3, r4) {
      return e2[n3].i - e2[r4].i || (n3 < r4 ? -1 : 1);
    }), function(e3, n3) {
      return r3((function(e4) {
        return e4.replace(x, "\n").replace($, "").replace(U, "    ");
      })(e3), n3);
    };
  })(se2), _e2 = (de2 = /* @__PURE__ */ (function(e2, n2) {
    return function(r3, t2, o2) {
      const a2 = e2[r3.type].l;
      return n2 ? n2(() => a2(r3, t2, o2), r3, t2, o2) : a2(r3, t2, o2);
    };
  })(se2, t.renderRule), __name(function e2(n2, r3 = {}) {
    if (Array.isArray(n2)) {
      const t2 = r3.key, o2 = [];
      let a2 = false;
      for (let t3 = 0; t3 < n2.length; t3++) {
        r3.key = t3;
        const c2 = e2(n2[t3], r3), i2 = "string" == typeof c2;
        i2 && a2 ? o2[o2.length - 1] += c2 : null !== c2 && o2.push(c2), a2 = i2;
      }
      return r3.key = t2, o2;
    }
    return de2(n2, e2, r3);
  }, "e"));
  var de2;
  const pe2 = K2(r2);
  return ue2.length ? J2("div", null, pe2, J2("footer", { key: "footer" }, ue2.map(function(e2) {
    return J2("div", { id: s2(e2.identifier, Re), key: e2.identifier }, e2.identifier, _e2(fe2(e2.footnote, { inline: true })));
  }))) : pe2;
}
__name(Je, "Je");
var index_modern_default = __name((n2) => {
  let { children: t = "", options: o2 } = n2, a2 = (function(e2, n3) {
    if (null == e2) return {};
    var r2, t2, o3 = {}, a3 = Object.keys(e2);
    for (t2 = 0; t2 < a3.length; t2++) n3.indexOf(r2 = a3[t2]) >= 0 || (o3[r2] = e2[r2]);
    return o3;
  })(n2, r);
  return e.cloneElement(Je(t, o2), a2);
}, "default");
var Label2 = styled.label(({ theme }) => ({
  lineHeight: "18px",
  alignItems: "center",
  marginBottom: 8,
  display: "inline-block",
  position: "relative",
  whiteSpace: "nowrap",
  background: theme.boolean.background,
  borderRadius: "3em",
  padding: 1,
  '&[aria-disabled="true"]': {
    opacity: 0.5,
    input: {
      cursor: "not-allowed"
    }
  },
  input: {
    appearance: "none",
    width: "100%",
    height: "100%",
    position: "absolute",
    left: 0,
    top: 0,
    margin: 0,
    padding: 0,
    border: "none",
    background: "transparent",
    cursor: "pointer",
    borderRadius: "3em",
    "&:focus": {
      outline: "none",
      boxShadow: `${theme.color.secondary} 0 0 0 1px inset !important`
    },
    "@media (forced-colors: active)": {
      "&:focus": {
        outline: "1px solid highlight"
      }
    }
  },
  span: {
    textAlign: "center",
    fontSize: theme.typography.size.s1,
    fontWeight: theme.typography.weight.bold,
    lineHeight: "1",
    cursor: "pointer",
    display: "inline-block",
    padding: "7px 15px",
    transition: "all 100ms ease-out",
    userSelect: "none",
    borderRadius: "3em",
    color: curriedTransparentize$1(0.5, theme.color.defaultText),
    background: "transparent",
    "&:hover": {
      boxShadow: `${curriedOpacify$1(0.3, theme.appBorderColor)} 0 0 0 1px inset`
    },
    "&:active": {
      boxShadow: `${curriedOpacify$1(0.05, theme.appBorderColor)} 0 0 0 2px inset`,
      color: curriedOpacify$1(1, theme.appBorderColor)
    },
    "&:first-of-type": {
      paddingRight: 8
    },
    "&:last-of-type": {
      paddingLeft: 8
    }
  },
  "input:checked ~ span:last-of-type, input:not(:checked) ~ span:first-of-type": {
    background: theme.boolean.selectedBackground,
    boxShadow: theme.base === "light" ? `${curriedOpacify$1(0.1, theme.appBorderColor)} 0 0 2px` : `${theme.appBorderColor} 0 0 0 1px`,
    color: theme.color.defaultText,
    padding: "7px 15px",
    "@media (forced-colors: active)": {
      textDecoration: "underline"
    }
  }
}));
var parse = __name((value2) => value2 === "true", "parse");
var BooleanControl = __name(({
  name,
  value: value2,
  onChange,
  onBlur,
  onFocus,
  argType
}) => {
  const onSetFalse = (0, import_react21.useCallback)(() => onChange(false), [onChange]);
  const readonly = !!argType?.table?.readonly;
  if (value2 === void 0) {
    return import_react21.default.createElement(
      Button,
      {
        variant: "outline",
        size: "medium",
        id: getControlSetterButtonId(name),
        onClick: onSetFalse,
        disabled: readonly
      },
      "Set boolean"
    );
  }
  const controlId = getControlId(name);
  const parsedValue = typeof value2 === "string" ? parse(value2) : value2;
  return import_react21.default.createElement(Label2, { "aria-disabled": readonly, htmlFor: controlId, "aria-label": name }, import_react21.default.createElement(
    "input",
    {
      id: controlId,
      type: "checkbox",
      onChange: (e2) => onChange(e2.target.checked),
      checked: parsedValue,
      role: "switch",
      disabled: readonly,
      ...{ name, onBlur, onFocus }
    }
  ), import_react21.default.createElement("span", { "aria-hidden": "true" }, "False"), import_react21.default.createElement("span", { "aria-hidden": "true" }, "True"));
}, "BooleanControl");
var parseDate = __name((value2) => {
  const [year, month, day] = value2.split("-");
  const result = /* @__PURE__ */ new Date();
  result.setFullYear(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));
  return result;
}, "parseDate");
var parseTime = __name((value2) => {
  const [hours, minutes] = value2.split(":");
  const result = /* @__PURE__ */ new Date();
  result.setHours(parseInt(hours, 10));
  result.setMinutes(parseInt(minutes, 10));
  return result;
}, "parseTime");
var formatDate = __name((value2) => {
  const date = new Date(value2);
  const year = `000${date.getFullYear()}`.slice(-4);
  const month = `0${date.getMonth() + 1}`.slice(-2);
  const day = `0${date.getDate()}`.slice(-2);
  return `${year}-${month}-${day}`;
}, "formatDate");
var formatTime = __name((value2) => {
  const date = new Date(value2);
  const hours = `0${date.getHours()}`.slice(-2);
  const minutes = `0${date.getMinutes()}`.slice(-2);
  return `${hours}:${minutes}`;
}, "formatTime");
var FormInput = styled(Form.Input)(({ readOnly }) => ({
  opacity: readOnly ? 0.5 : 1
}));
var FlexSpaced = styled.div(({ theme }) => ({
  flex: 1,
  display: "flex",
  input: {
    marginLeft: 10,
    flex: 1,
    height: 32,
    // hardcode height bc Chromium bug https://bugs.chromium.org/p/chromium/issues/detail?id=417606
    "&::-webkit-calendar-picker-indicator": {
      opacity: 0.5,
      height: 12,
      filter: theme.base === "light" ? void 0 : "invert(1)"
    }
  },
  "input:first-of-type": {
    marginLeft: 0,
    flexGrow: 4
  },
  "input:last-of-type": {
    flexGrow: 3
  }
}));
var DateControl = __name(({ name, value: value2, onChange, onFocus, onBlur, argType }) => {
  const [valid, setValid] = (0, import_react22.useState)(true);
  const dateRef = (0, import_react22.useRef)();
  const timeRef = (0, import_react22.useRef)();
  const readonly = !!argType?.table?.readonly;
  (0, import_react22.useEffect)(() => {
    if (valid !== false) {
      if (dateRef && dateRef.current) {
        dateRef.current.value = value2 ? formatDate(value2) : "";
      }
      if (timeRef && timeRef.current) {
        timeRef.current.value = value2 ? formatTime(value2) : "";
      }
    }
  }, [value2]);
  const onDateChange = __name((e2) => {
    if (!e2.target.value) {
      return onChange();
    }
    const parsed = parseDate(e2.target.value);
    const result = new Date(value2 ?? "");
    result.setFullYear(parsed.getFullYear(), parsed.getMonth(), parsed.getDate());
    const time = result.getTime();
    if (time) {
      onChange(time);
    }
    setValid(!!time);
  }, "onDateChange");
  const onTimeChange = __name((e2) => {
    if (!e2.target.value) {
      return onChange();
    }
    const parsed = parseTime(e2.target.value);
    const result = new Date(value2 ?? "");
    result.setHours(parsed.getHours());
    result.setMinutes(parsed.getMinutes());
    const time = result.getTime();
    if (time) {
      onChange(time);
    }
    setValid(!!time);
  }, "onTimeChange");
  const controlId = getControlId(name);
  return import_react22.default.createElement(FlexSpaced, null, import_react22.default.createElement(
    FormInput,
    {
      type: "date",
      max: "9999-12-31",
      ref: dateRef,
      id: `${controlId}-date`,
      name: `${controlId}-date`,
      readOnly: readonly,
      onChange: onDateChange,
      ...{ onFocus, onBlur }
    }
  ), import_react22.default.createElement(
    FormInput,
    {
      type: "time",
      id: `${controlId}-time`,
      name: `${controlId}-time`,
      ref: timeRef,
      onChange: onTimeChange,
      readOnly: readonly,
      ...{ onFocus, onBlur }
    }
  ), !valid ? import_react22.default.createElement("div", null, "invalid") : null);
}, "DateControl");
var Wrapper3 = styled.label({
  display: "flex"
});
var parse2 = __name((value2) => {
  const result = parseFloat(value2);
  return Number.isNaN(result) ? void 0 : result;
}, "parse");
var format2 = __name((value2) => value2 != null ? String(value2) : "", "format");
var FormInput2 = styled(Form.Input)(({ readOnly }) => ({
  opacity: readOnly ? 0.5 : 1
}));
var NumberControl = __name(({
  name,
  value: value2,
  onChange,
  min,
  max,
  step,
  onBlur,
  onFocus,
  argType
}) => {
  const [inputValue, setInputValue] = (0, import_react23.useState)(typeof value2 === "number" ? value2 : "");
  const [forceVisible, setForceVisible] = (0, import_react23.useState)(false);
  const [parseError, setParseError] = (0, import_react23.useState)(null);
  const readonly = !!argType?.table?.readonly;
  const handleChange = (0, import_react23.useCallback)(
    (event) => {
      setInputValue(event.target.value);
      const result = parseFloat(event.target.value);
      if (Number.isNaN(result)) {
        setParseError(new Error(`'${event.target.value}' is not a number`));
      } else {
        onChange(result);
        setParseError(null);
      }
    },
    [onChange, setParseError]
  );
  const onForceVisible = (0, import_react23.useCallback)(() => {
    setInputValue("0");
    onChange(0);
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = (0, import_react23.useRef)(null);
  (0, import_react23.useEffect)(() => {
    if (forceVisible && htmlElRef.current) {
      htmlElRef.current.select();
    }
  }, [forceVisible]);
  (0, import_react23.useEffect)(() => {
    const newInputValue = typeof value2 === "number" ? value2 : "";
    if (inputValue !== newInputValue) {
      setInputValue(newInputValue);
    }
  }, [value2]);
  if (value2 === void 0) {
    return import_react23.default.createElement(
      Button,
      {
        variant: "outline",
        size: "medium",
        id: getControlSetterButtonId(name),
        onClick: onForceVisible,
        disabled: readonly
      },
      "Set number"
    );
  }
  return import_react23.default.createElement(Wrapper3, null, import_react23.default.createElement(
    FormInput2,
    {
      ref: htmlElRef,
      id: getControlId(name),
      type: "number",
      onChange: handleChange,
      size: "flex",
      placeholder: "Edit number...",
      value: inputValue,
      valid: parseError ? "error" : void 0,
      autoFocus: forceVisible,
      readOnly: readonly,
      ...{ name, min, max, step, onFocus, onBlur }
    }
  ));
}, "NumberControl");
var selectedKey = __name((value2, options) => {
  const entry = options && Object.entries(options).find(([_key, val]) => val === value2);
  return entry ? entry[0] : void 0;
}, "selectedKey");
var selectedKeys = __name((value2, options) => value2 && options ? Object.entries(options).filter((entry) => value2.includes(entry[1])).map((entry) => entry[0]) : [], "selectedKeys");
var selectedValues = __name((keys, options) => keys && options && keys.map((key) => options[key]), "selectedValues");
var Wrapper4 = styled.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  },
  (props) => {
    if (props["aria-readonly"] === "true") {
      return {
        input: {
          cursor: "not-allowed"
        }
      };
    }
  }
);
var Text = styled.span({
  "[aria-readonly=true] &": {
    opacity: 0.5
  }
});
var Label3 = styled.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var CheckboxControl = __name(({
  name,
  options,
  value: value2,
  onChange,
  isInline,
  argType
}) => {
  if (!options) {
    import_client_logger2.logger.warn(`Checkbox with no options: ${name}`);
    return import_react25.default.createElement(import_react25.default.Fragment, null, "-");
  }
  const initial2 = selectedKeys(value2 || [], options);
  const [selected, setSelected] = (0, import_react25.useState)(initial2);
  const readonly = !!argType?.table?.readonly;
  const handleChange = __name((e2) => {
    const option = e2.target.value;
    const updated = [...selected];
    if (updated.includes(option)) {
      updated.splice(updated.indexOf(option), 1);
    } else {
      updated.push(option);
    }
    onChange(selectedValues(updated, options));
    setSelected(updated);
  }, "handleChange");
  (0, import_react25.useEffect)(() => {
    setSelected(selectedKeys(value2 || [], options));
  }, [value2]);
  const controlId = getControlId(name);
  return import_react25.default.createElement(Wrapper4, { "aria-readonly": readonly, isInline }, Object.keys(options).map((key, index) => {
    const id = `${controlId}-${index}`;
    return import_react25.default.createElement(Label3, { key: id, htmlFor: id }, import_react25.default.createElement(
      "input",
      {
        type: "checkbox",
        disabled: readonly,
        id,
        name: id,
        value: key,
        onChange: handleChange,
        checked: selected?.includes(key)
      }
    ), import_react25.default.createElement(Text, null, key));
  }));
}, "CheckboxControl");
var Wrapper5 = styled.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  },
  (props) => {
    if (props["aria-readonly"] === "true") {
      return {
        input: {
          cursor: "not-allowed"
        }
      };
    }
  }
);
var Text2 = styled.span({
  "[aria-readonly=true] &": {
    opacity: 0.5
  }
});
var Label4 = styled.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var RadioControl = __name(({
  name,
  options,
  value: value2,
  onChange,
  isInline,
  argType
}) => {
  if (!options) {
    import_client_logger3.logger.warn(`Radio with no options: ${name}`);
    return import_react26.default.createElement(import_react26.default.Fragment, null, "-");
  }
  const selection = selectedKey(value2, options);
  const controlId = getControlId(name);
  const readonly = !!argType?.table?.readonly;
  return import_react26.default.createElement(Wrapper5, { "aria-readonly": readonly, isInline }, Object.keys(options).map((key, index) => {
    const id = `${controlId}-${index}`;
    return import_react26.default.createElement(Label4, { key: id, htmlFor: id }, import_react26.default.createElement(
      "input",
      {
        type: "radio",
        id,
        name: controlId,
        disabled: readonly,
        value: key,
        onChange: (e2) => onChange(options[e2.currentTarget.value]),
        checked: key === selection
      }
    ), import_react26.default.createElement(Text2, null, key));
  }));
}, "RadioControl");
var styleResets = {
  // resets
  appearance: "none",
  border: "0 none",
  boxSizing: "inherit",
  display: " block",
  margin: " 0",
  background: "transparent",
  padding: 0,
  fontSize: "inherit",
  position: "relative"
};
var OptionsSelect = styled.select(styleResets, ({ theme }) => ({
  boxSizing: "border-box",
  position: "relative",
  padding: "6px 10px",
  width: "100%",
  color: theme.input.color || "inherit",
  background: theme.input.background,
  borderRadius: theme.input.borderRadius,
  boxShadow: `${theme.input.border} 0 0 0 1px inset`,
  fontSize: theme.typography.size.s2 - 1,
  lineHeight: "20px",
  "&:focus": {
    boxShadow: `${theme.color.secondary} 0 0 0 1px inset`,
    outline: "none"
  },
  "&[disabled]": {
    cursor: "not-allowed",
    opacity: 0.5
  },
  "::placeholder": {
    color: theme.textMutedColor
  },
  "&[multiple]": {
    overflow: "auto",
    padding: 0,
    option: {
      display: "block",
      padding: "6px 10px",
      marginLeft: 1,
      marginRight: 1
    }
  }
}));
var SelectWrapper = styled.span(({ theme }) => ({
  display: "inline-block",
  lineHeight: "normal",
  overflow: "hidden",
  position: "relative",
  verticalAlign: "top",
  width: "100%",
  svg: {
    position: "absolute",
    zIndex: 1,
    pointerEvents: "none",
    height: "12px",
    marginTop: "-6px",
    right: "12px",
    top: "50%",
    fill: theme.textMutedColor,
    path: {
      fill: theme.textMutedColor
    }
  }
}));
var NO_SELECTION = "Choose option...";
var SingleSelect = __name(({ name, value: value2, options, onChange, argType }) => {
  const handleChange = __name((e2) => {
    onChange(options[e2.currentTarget.value]);
  }, "handleChange");
  const selection = selectedKey(value2, options) || NO_SELECTION;
  const controlId = getControlId(name);
  const readonly = !!argType?.table?.readonly;
  return import_react27.default.createElement(SelectWrapper, null, import_react27.default.createElement(ChevronSmallDownIcon, null), import_react27.default.createElement(OptionsSelect, { disabled: readonly, id: controlId, value: selection, onChange: handleChange }, import_react27.default.createElement("option", { key: "no-selection", disabled: true }, NO_SELECTION), Object.keys(options).map((key) => import_react27.default.createElement("option", { key, value: key }, key))));
}, "SingleSelect");
var MultiSelect = __name(({ name, value: value2, options, onChange, argType }) => {
  const handleChange = __name((e2) => {
    const selection2 = Array.from(e2.currentTarget.options).filter((option) => option.selected).map((option) => option.value);
    onChange(selectedValues(selection2, options));
  }, "handleChange");
  const selection = selectedKeys(value2, options);
  const controlId = getControlId(name);
  const readonly = !!argType?.table?.readonly;
  return import_react27.default.createElement(SelectWrapper, null, import_react27.default.createElement(
    OptionsSelect,
    {
      disabled: readonly,
      id: controlId,
      multiple: true,
      value: selection,
      onChange: handleChange
    },
    Object.keys(options).map((key) => import_react27.default.createElement("option", { key, value: key }, key))
  ));
}, "MultiSelect");
var SelectControl = __name((props) => {
  const { name, options } = props;
  if (!options) {
    import_client_logger4.logger.warn(`Select with no options: ${name}`);
    return import_react27.default.createElement(import_react27.default.Fragment, null, "-");
  }
  return props.isMulti ? import_react27.default.createElement(MultiSelect, { ...props }) : import_react27.default.createElement(SingleSelect, { ...props });
}, "SelectControl");
var normalizeOptions = __name((options, labels) => {
  if (Array.isArray(options)) {
    return options.reduce((acc, item) => {
      acc[labels?.[item] || String(item)] = item;
      return acc;
    }, {});
  }
  return options;
}, "normalizeOptions");
var Controls = {
  check: CheckboxControl,
  "inline-check": CheckboxControl,
  radio: RadioControl,
  "inline-radio": RadioControl,
  select: SelectControl,
  "multi-select": SelectControl
};
var OptionsControl = __name((props) => {
  const { type = "select", labels, argType } = props;
  const normalized = {
    ...props,
    argType,
    options: argType ? normalizeOptions(argType.options, labels) : {},
    isInline: type.includes("inline"),
    isMulti: type.includes("multi")
  };
  const Control = Controls[type];
  if (Control) {
    return import_react24.default.createElement(Control, { ...normalized });
  }
  throw new Error(`Unknown options type: ${type}`);
}, "OptionsControl");
var Container = styled.div(({ theme }) => ({
  position: "relative",
  ":hover": {
    "& > .rejt-accordion-button::after": {
      background: theme.color.secondary
    },
    "& > .rejt-accordion-region > :is(.rejt-plus-menu, .rejt-minus-menu)": {
      opacity: 1
    }
  }
}));
var Trigger = styled.button(({ theme }) => ({
  padding: 0,
  background: "transparent",
  border: "none",
  marginRight: "3px",
  lineHeight: "22px",
  color: theme.color.secondary,
  "::after": {
    content: '""',
    position: "absolute",
    top: 0,
    display: "block",
    width: "100%",
    marginLeft: "-1rem",
    height: "22px",
    background: "transparent",
    borderRadius: 4,
    transition: "background 0.2s",
    opacity: 0.1,
    paddingRight: "20px"
  },
  "::before": {
    content: '""',
    position: "absolute"
  },
  '&[aria-expanded="true"]::before': {
    left: -10,
    top: 10,
    borderTop: "3px solid rgba(153,153,153,0.6)",
    borderLeft: "3px solid transparent",
    borderRight: "3px solid transparent"
  },
  '&[aria-expanded="false"]::before': {
    left: -8,
    top: 8,
    borderTop: "3px solid transparent",
    borderBottom: "3px solid transparent",
    borderLeft: "3px solid rgba(153,153,153,0.6)"
  }
}));
var Region = styled.div({
  display: "inline"
});
function JsonNodeAccordion({
  children,
  name,
  collapsed,
  keyPath,
  deep,
  ...props
}) {
  const parentPropertyName = keyPath.at(-1) ?? "root";
  const accordionKey = `${parentPropertyName}-${name}-${deep}`;
  const ids = {
    trigger: `${accordionKey}-trigger`,
    region: `${accordionKey}-region`
  };
  const containerTag = keyPath.length > 0 ? "li" : "div";
  return import_react31.default.createElement(Container, { as: containerTag }, import_react31.default.createElement(
    Trigger,
    {
      type: "button",
      "aria-expanded": !collapsed,
      id: ids.trigger,
      "aria-controls": ids.region,
      className: "rejt-accordion-button",
      ...props
    },
    name,
    " :"
  ), import_react31.default.createElement(
    Region,
    {
      role: "region",
      id: ids.region,
      "aria-labelledby": ids.trigger,
      className: "rejt-accordion-region"
    },
    children
  ));
}
__name(JsonNodeAccordion, "JsonNodeAccordion");
var ERROR = "Error";
var OBJECT = "Object";
var ARRAY = "Array";
var STRING = "String";
var NUMBER = "Number";
var BOOLEAN = "Boolean";
var DATE = "Date";
var NULL = "Null";
var UNDEFINED = "Undefined";
var FUNCTION = "Function";
var SYMBOL = "Symbol";
var ADD_DELTA_TYPE = "ADD_DELTA_TYPE";
var REMOVE_DELTA_TYPE = "REMOVE_DELTA_TYPE";
var UPDATE_DELTA_TYPE = "UPDATE_DELTA_TYPE";
var VALUE = "value";
var KEY = "key";
function getObjectType(obj) {
  if (obj !== null && typeof obj === "object" && !Array.isArray(obj) && typeof obj[Symbol.iterator] === "function") {
    return "Iterable";
  }
  return Object.prototype.toString.call(obj).slice(8, -1);
}
__name(getObjectType, "getObjectType");
function isComponentWillChange(oldValue, newValue) {
  const oldType = getObjectType(oldValue);
  const newType = getObjectType(newValue);
  return (oldType === "Function" || newType === "Function") && newType !== oldType;
}
__name(isComponentWillChange, "isComponentWillChange");
var _JsonAddValue = class _JsonAddValue2 extends import_react30.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputRefKey: null,
      inputRefValue: null
    };
    this.refInputValue = this.refInputValue.bind(this);
    this.refInputKey = this.refInputKey.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }
  componentDidMount() {
    const { inputRefKey, inputRefValue } = this.state;
    const { onlyValue } = this.props;
    if (inputRefKey && typeof inputRefKey.focus === "function") {
      inputRefKey.focus();
    }
    if (onlyValue && inputRefValue && typeof inputRefValue.focus === "function") {
      inputRefValue.focus();
    }
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat) {
      return;
    }
    const { inputRefKey, inputRefValue } = this.state;
    const { addButtonElement, handleCancel } = this.props;
    const isFormFocused = [inputRefKey, inputRefValue, addButtonElement].some(
      (elm) => elm === event.target
    );
    if (!isFormFocused) {
      return;
    }
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.onSubmit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      handleCancel();
    }
  }
  onSubmit() {
    const { handleAdd, onlyValue, onSubmitValueParser, keyPath, deep } = this.props;
    const { inputRefKey, inputRefValue } = this.state;
    const result = {};
    if (!onlyValue) {
      if (!inputRefKey.value) {
        return;
      }
      result.key = inputRefKey.value;
    }
    result.newValue = onSubmitValueParser(false, keyPath, deep, result.key, inputRefValue.value);
    handleAdd(result);
  }
  refInputKey(node) {
    this.state.inputRefKey = node;
  }
  refInputValue(node) {
    this.state.inputRefValue = node;
  }
  render() {
    const {
      handleCancel,
      onlyValue,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep
    } = this.props;
    const addButtonElementLayout = addButtonElement && (0, import_react30.cloneElement)(addButtonElement, {
      onClick: this.onSubmit
    });
    const cancelButtonElementLayout = cancelButtonElement && (0, import_react30.cloneElement)(cancelButtonElement, {
      onClick: handleCancel
    });
    const inputElementValue = inputElementGenerator(VALUE, keyPath, deep);
    const inputElementValueLayout = (0, import_react30.cloneElement)(inputElementValue, {
      placeholder: "Value",
      ref: this.refInputValue,
      onKeyDown: this.onKeydown
    });
    let inputElementKeyLayout = null;
    if (!onlyValue) {
      const inputElementKey = inputElementGenerator(KEY, keyPath, deep);
      inputElementKeyLayout = (0, import_react30.cloneElement)(inputElementKey, {
        placeholder: "Key",
        ref: this.refInputKey,
        onKeyDown: this.onKeydown
      });
    }
    return import_react30.default.createElement("span", { className: "rejt-add-value-node" }, inputElementKeyLayout, inputElementValueLayout, addButtonElementLayout, cancelButtonElementLayout);
  }
};
__name(_JsonAddValue, "JsonAddValue");
var JsonAddValue = _JsonAddValue;
JsonAddValue.defaultProps = {
  onlyValue: false,
  addButtonElement: import_react30.default.createElement("button", null, "+"),
  cancelButtonElement: import_react30.default.createElement("button", null, "c")
};
var _JsonArray = class _JsonArray2 extends import_react30.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath || [], props.name];
    this.state = {
      data: props.data,
      name: props.name,
      keyPath: keyPath ?? [],
      deep: props.deep ?? 0,
      nextDeep: (props.deep ?? 0) + 1,
      collapsed: props.isCollapsed(keyPath, props.deep ?? 0, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveItem = this.handleRemoveItem.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath = [] } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleRemoveItem(index) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[index];
      (beforeRemoveAction || Promise.resolve.bind(Promise))(index, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key: index,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        data.splice(index, 1);
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleAddValueAdd({ newValue }) {
    const { data, keyPath = [], nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    const key = data.length;
    (beforeAddAction || Promise.resolve.bind(Promise))(key, keyPath, deep, newValue).then(() => {
      data[key] = newValue;
      this.setState({
        data
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], data);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key,
        newValue
      });
    }).catch(logger4.error);
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      (beforeUpdateAction || Promise.resolve.bind(Promise))(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve(void 0);
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, data, keyPath, deep } = this.state;
    const { handleRemove, readOnly, getStyle, dataType, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus,
      "aria-label": `remove the array '${String(name)}'`
    });
    return import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("span", { style: collapsed }, "[...] ", data.length, " ", data.length === 1 ? "item" : "items"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, addFormVisible, nextDeep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, delimiter, ul, addForm } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = plusMenuElement && (0, import_react30.cloneElement)(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus,
      "aria-label": `add a new item to the '${String(name)}' array`
    });
    const removeItemButton = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus,
      "aria-label": `remove the array '${String(name)}'`
    });
    const onlyValue = true;
    const startObject = "[";
    const endObject = "]";
    return import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("span", { className: "rejt-not-collapsed-delimiter", style: delimiter }, startObject), !addFormVisible && addItemButton, import_react30.default.createElement("ul", { className: "rejt-not-collapsed-list", style: ul }, data.map((item, index) => import_react30.default.createElement(
      JsonNode,
      {
        key: index,
        name: index.toString(),
        data: item,
        keyPath,
        deep: nextDeep,
        isCollapsed,
        handleRemove: this.handleRemoveItem(index),
        handleUpdateValue: this.handleEditValue,
        onUpdate: this.onChildUpdate,
        onDeltaUpdate,
        readOnly,
        getStyle,
        addButtonElement,
        cancelButtonElement,
        inputElementGenerator,
        textareaElementGenerator,
        minusMenuElement,
        plusMenuElement,
        beforeRemoveAction,
        beforeAddAction,
        beforeUpdateAction,
        logger: logger4,
        onSubmitValueParser
      }
    ))), !isReadOnly && addFormVisible && import_react30.default.createElement("div", { className: "rejt-add-form", style: addForm }, import_react30.default.createElement(
      JsonAddValue,
      {
        handleAdd: this.handleAddValueAdd,
        handleCancel: this.handleAddValueCancel,
        onlyValue,
        addButtonElement,
        cancelButtonElement,
        inputElementGenerator,
        keyPath,
        deep,
        onSubmitValueParser
      }
    )), import_react30.default.createElement("span", { className: "rejt-not-collapsed-delimiter", style: delimiter }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, keyPath, deep } = this.state;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    return import_react30.default.createElement(
      JsonNodeAccordion,
      {
        name,
        collapsed,
        deep,
        keyPath,
        onClick: this.handleCollapseMode
      },
      value2
    );
  }
};
__name(_JsonArray, "JsonArray");
var JsonArray = _JsonArray;
JsonArray.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: import_react30.default.createElement("span", null, " - "),
  plusMenuElement: import_react30.default.createElement("span", null, " + ")
};
var _JsonFunctionValue = class _JsonFunctionValue2 extends import_react30.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath || [], props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath: keyPath ?? [],
      deep: props.deep ?? 0,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const readOnlyResult = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !readOnlyResult && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  onKeydown(event) {
    const { inputRef } = this.state;
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat || inputRef !== event.target) {
      return;
    }
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef) {
      return;
    }
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    (handleUpdateValue || Promise.resolve.bind(Promise))(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      textareaElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath = []
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    let result = null;
    let minusElement = null;
    const resultOnlyResult = readOnly(name, originalValue, keyPath, deep, dataType);
    if (editEnabled && !resultOnlyResult) {
      const textareaElement = textareaElementGenerator(
        VALUE,
        comeFromKeyPath,
        deep,
        name,
        originalValue,
        dataType
      );
      const textareaElementLayout = (0, import_react30.cloneElement)(textareaElement, {
        ref: this.refInput,
        defaultValue: value2,
        onKeyDown: this.onKeydown
      });
      result = import_react30.default.createElement("span", { className: "rejt-edit-form", style: style.editForm }, textareaElementLayout);
      minusElement = null;
    } else {
      result = import_react30.default.createElement(
        "span",
        {
          className: "rejt-value",
          style: style.value,
          onClick: resultOnlyResult ? void 0 : this.handleEditMode
        },
        value2
      );
      const parentPropertyName = comeFromKeyPath.at(-1);
      const minusMenuLayout = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
        onClick: handleRemove,
        className: "rejt-minus-menu",
        style: style.minus,
        "aria-label": `remove the function '${String(name)}'${String(parentPropertyName) ? ` from '${String(parentPropertyName)}'` : ""}`
      });
      minusElement = resultOnlyResult ? null : minusMenuLayout;
    }
    return import_react30.default.createElement("li", { className: "rejt-value-node", style: style.li }, import_react30.default.createElement("span", { className: "rejt-name", style: style.name }, name, " :", " "), result, minusElement);
  }
};
__name(_JsonFunctionValue, "JsonFunctionValue");
var JsonFunctionValue = _JsonFunctionValue;
JsonFunctionValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: __name(() => {
  }, "handleUpdateValue"),
  cancelButtonElement: import_react30.default.createElement("button", null, "c"),
  minusMenuElement: import_react30.default.createElement("span", null, " - ")
};
var _JsonNode = class _JsonNode2 extends import_react30.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      name: props.name,
      keyPath: props.keyPath ?? [],
      deep: props.deep ?? 0
    };
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  render() {
    const { data, name, keyPath, deep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      handleUpdateValue,
      onUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const readOnlyTrue = __name(() => true, "readOnlyTrue");
    const dataType = getObjectType(data);
    switch (dataType) {
      case ERROR:
        return import_react30.default.createElement(
          JsonObject,
          {
            data,
            name,
            isCollapsed,
            keyPath,
            deep,
            handleRemove,
            onUpdate,
            onDeltaUpdate,
            readOnly: readOnlyTrue,
            dataType,
            getStyle,
            addButtonElement,
            cancelButtonElement,
            inputElementGenerator,
            textareaElementGenerator,
            minusMenuElement,
            plusMenuElement,
            beforeRemoveAction,
            beforeAddAction,
            beforeUpdateAction,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case OBJECT:
        return import_react30.default.createElement(
          JsonObject,
          {
            data,
            name,
            isCollapsed,
            keyPath,
            deep,
            handleRemove,
            onUpdate,
            onDeltaUpdate,
            readOnly,
            dataType,
            getStyle,
            addButtonElement,
            cancelButtonElement,
            inputElementGenerator,
            textareaElementGenerator,
            minusMenuElement,
            plusMenuElement,
            beforeRemoveAction,
            beforeAddAction,
            beforeUpdateAction,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case ARRAY:
        return import_react30.default.createElement(
          JsonArray,
          {
            data,
            name,
            isCollapsed,
            keyPath,
            deep,
            handleRemove,
            onUpdate,
            onDeltaUpdate,
            readOnly,
            dataType,
            getStyle,
            addButtonElement,
            cancelButtonElement,
            inputElementGenerator,
            textareaElementGenerator,
            minusMenuElement,
            plusMenuElement,
            beforeRemoveAction,
            beforeAddAction,
            beforeUpdateAction,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case STRING:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: `"${data}"`,
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case NUMBER:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: data,
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case BOOLEAN:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: data ? "true" : "false",
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case DATE:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: data.toISOString(),
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly: readOnlyTrue,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case NULL:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: "null",
            originalValue: "null",
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case UNDEFINED:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: "undefined",
            originalValue: "undefined",
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case FUNCTION:
        return import_react30.default.createElement(
          JsonFunctionValue,
          {
            name,
            value: data.toString(),
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly,
            dataType,
            getStyle,
            cancelButtonElement,
            textareaElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      case SYMBOL:
        return import_react30.default.createElement(
          JsonValue,
          {
            name,
            value: data.toString(),
            originalValue: data,
            keyPath,
            deep,
            handleRemove,
            handleUpdateValue,
            readOnly: readOnlyTrue,
            dataType,
            getStyle,
            cancelButtonElement,
            inputElementGenerator,
            minusMenuElement,
            logger: logger4,
            onSubmitValueParser
          }
        );
      default:
        return null;
    }
  }
};
__name(_JsonNode, "JsonNode");
var JsonNode = _JsonNode;
JsonNode.defaultProps = {
  keyPath: [],
  deep: 0
};
var _JsonObject = class _JsonObject2 extends import_react30.Component {
  constructor(props) {
    super(props);
    const keyPath = props.deep === -1 ? [] : [...props.keyPath || [], props.name];
    this.state = {
      name: props.name,
      data: props.data,
      keyPath: keyPath ?? [],
      deep: props.deep ?? 0,
      nextDeep: (props.deep ?? 0) + 1,
      collapsed: props.isCollapsed(keyPath, props.deep ?? 0, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveValue = this.handleRemoveValue.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath = [] } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleAddValueAdd({ key, newValue }) {
    const { data, keyPath = [], nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    (beforeAddAction || Promise.resolve.bind(Promise))(key, keyPath, deep, newValue).then(() => {
      data[key] = newValue;
      this.setState({
        data
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], data);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key,
        newValue
      });
    }).catch(logger4.error);
  }
  handleRemoveValue(key) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath = [], nextDeep: deep } = this.state;
      const oldValue = data[key];
      (beforeRemoveAction || Promise.resolve.bind(Promise))(key, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        delete data[key];
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath = [], nextDeep: deep } = this.state;
      const oldValue = data[key];
      (beforeUpdateAction || Promise.resolve.bind(Promise))(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve();
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, keyPath, deep, data } = this.state;
    const { handleRemove, readOnly, dataType, getStyle, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus,
      "aria-label": `remove the object '${String(name)}'`
    });
    return import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("span", { style: collapsed }, "{...}", " ", keyList.length, " ", keyList.length === 1 ? "key" : "keys"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, nextDeep, addFormVisible } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, addForm, ul, delimiter } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = plusMenuElement && (0, import_react30.cloneElement)(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus,
      "aria-label": `add a new property to the object '${String(name)}'`
    });
    const removeItemButton = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus,
      "aria-label": `remove the object '${String(name)}'`
    });
    const list = keyList.map((key) => import_react30.default.createElement(
      JsonNode,
      {
        key,
        name: key,
        data: data[key],
        keyPath,
        deep: nextDeep,
        isCollapsed,
        handleRemove: this.handleRemoveValue(key),
        handleUpdateValue: this.handleEditValue,
        onUpdate: this.onChildUpdate,
        onDeltaUpdate,
        readOnly,
        getStyle,
        addButtonElement,
        cancelButtonElement,
        inputElementGenerator,
        textareaElementGenerator,
        minusMenuElement,
        plusMenuElement,
        beforeRemoveAction,
        beforeAddAction,
        beforeUpdateAction,
        logger: logger4,
        onSubmitValueParser
      }
    ));
    const startObject = "{";
    const endObject = "}";
    return import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("span", { className: "rejt-not-collapsed-delimiter", style: delimiter }, startObject), !isReadOnly && addItemButton, import_react30.default.createElement("ul", { className: "rejt-not-collapsed-list", style: ul }, list), !isReadOnly && addFormVisible && import_react30.default.createElement("div", { className: "rejt-add-form", style: addForm }, import_react30.default.createElement(
      JsonAddValue,
      {
        handleAdd: this.handleAddValueAdd,
        handleCancel: this.handleAddValueCancel,
        addButtonElement,
        cancelButtonElement,
        inputElementGenerator,
        keyPath,
        deep,
        onSubmitValueParser
      }
    )), import_react30.default.createElement("span", { className: "rejt-not-collapsed-delimiter", style: delimiter }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, keyPath, deep = 0 } = this.state;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    return import_react30.default.createElement(
      JsonNodeAccordion,
      {
        name,
        collapsed,
        deep,
        keyPath,
        onClick: this.handleCollapseMode
      },
      value2
    );
  }
};
__name(_JsonObject, "JsonObject");
var JsonObject = _JsonObject;
JsonObject.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: import_react30.default.createElement("span", null, " - "),
  plusMenuElement: import_react30.default.createElement("span", null, " + ")
};
var _JsonValue = class _JsonValue2 extends import_react30.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath || [], props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath: keyPath ?? [],
      deep: props.deep ?? 0,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const isReadOnly = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !isReadOnly && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  onKeydown(event) {
    const { inputRef } = this.state;
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat || inputRef !== event.target) {
      return;
    }
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef) {
      return;
    }
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    (handleUpdateValue || Promise.resolve.bind(Promise))(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      inputElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, originalValue, keyPath, deep, dataType);
    const isEditing = editEnabled && !isReadOnly;
    const inputElement = inputElementGenerator(
      VALUE,
      comeFromKeyPath,
      deep,
      name,
      originalValue,
      dataType
    );
    const inputElementLayout = (0, import_react30.cloneElement)(inputElement, {
      ref: this.refInput,
      defaultValue: JSON.stringify(originalValue),
      onKeyDown: this.onKeydown
    });
    const parentPropertyName = keyPath.at(-2);
    const minusMenuLayout = minusMenuElement && (0, import_react30.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: style.minus,
      "aria-label": `remove the property '${String(name)}' with value '${String(originalValue)}'${String(parentPropertyName) ? ` from '${String(parentPropertyName)}'` : ""}`
    });
    return import_react30.default.createElement("li", { className: "rejt-value-node", style: style.li }, import_react30.default.createElement("span", { className: "rejt-name", style: style.name }, name, " : "), isEditing ? import_react30.default.createElement("span", { className: "rejt-edit-form", style: style.editForm }, inputElementLayout) : import_react30.default.createElement(
      "span",
      {
        className: "rejt-value",
        style: style.value,
        onClick: isReadOnly ? void 0 : this.handleEditMode
      },
      String(value2)
    ), !isReadOnly && !isEditing && minusMenuLayout);
  }
};
__name(_JsonValue, "JsonValue");
var JsonValue = _JsonValue;
JsonValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: __name(() => Promise.resolve(), "handleUpdateValue"),
  cancelButtonElement: import_react30.default.createElement("button", null, "c"),
  minusMenuElement: import_react30.default.createElement("span", null, " - ")
};
function parse3(string) {
  let result = string;
  if (result.indexOf("function") === 0) {
    return (0, eval)(`(${result})`);
  }
  try {
    result = JSON.parse(string);
  } catch (e2) {
  }
  return result;
}
__name(parse3, "parse");
var object = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var array = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var value = {
  minus: {
    color: "red"
  },
  editForm: {},
  value: {
    color: "#7bba3d"
  },
  li: {
    minHeight: "22px",
    lineHeight: "22px",
    outline: "0px"
  },
  name: {
    color: "#2287CD"
  }
};
var _JsonTree = class _JsonTree2 extends import_react29.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      rootName: props.rootName
    };
    this.onUpdate = this.onUpdate.bind(this);
    this.removeRoot = this.removeRoot.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    if (props.data !== state.data || props.rootName !== state.rootName) {
      return {
        data: props.data,
        rootName: props.rootName
      };
    }
    return null;
  }
  onUpdate(key, data) {
    this.setState({ data });
    this.props.onFullyUpdate?.(data);
  }
  removeRoot() {
    this.onUpdate(null, null);
  }
  render() {
    const { data, rootName } = this.state;
    const {
      isCollapsed,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      inputElement,
      textareaElement,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser,
      fallback = null
    } = this.props;
    const dataType = getObjectType(data);
    let readOnlyFunction = readOnly;
    if (getObjectType(readOnly) === "Boolean") {
      readOnlyFunction = __name(() => readOnly, "readOnlyFunction");
    }
    let inputElementFunction = inputElement;
    if (inputElement && getObjectType(inputElement) !== "Function") {
      inputElementFunction = __name(() => inputElement, "inputElementFunction");
    }
    let textareaElementFunction = textareaElement;
    if (textareaElement && getObjectType(textareaElement) !== "Function") {
      textareaElementFunction = __name(() => textareaElement, "textareaElementFunction");
    }
    if (dataType === "Object" || dataType === "Array") {
      return import_react29.default.createElement("div", { className: "rejt-tree" }, import_react29.default.createElement(
        JsonNode,
        {
          data,
          name: rootName || "root",
          deep: -1,
          isCollapsed: isCollapsed ?? (() => false),
          onUpdate: this.onUpdate,
          onDeltaUpdate: onDeltaUpdate ?? (() => {
          }),
          readOnly: readOnlyFunction,
          getStyle: getStyle ?? (() => ({})),
          addButtonElement,
          cancelButtonElement,
          inputElementGenerator: inputElementFunction,
          textareaElementGenerator: textareaElementFunction,
          minusMenuElement,
          plusMenuElement,
          handleRemove: this.removeRoot,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4 ?? {},
          onSubmitValueParser: onSubmitValueParser ?? ((val) => val)
        }
      ));
    }
    return fallback;
  }
};
__name(_JsonTree, "JsonTree");
var JsonTree = _JsonTree;
JsonTree.defaultProps = {
  rootName: "root",
  isCollapsed: __name((keyPath, deep) => deep !== -1, "isCollapsed"),
  getStyle: __name((keyName, data, keyPath, deep, dataType) => {
    switch (dataType) {
      case "Object":
      case "Error":
        return object;
      case "Array":
        return array;
      default:
        return value;
    }
  }, "getStyle"),
  readOnly: __name(() => false, "readOnly"),
  onFullyUpdate: __name(() => {
  }, "onFullyUpdate"),
  onDeltaUpdate: __name(() => {
  }, "onDeltaUpdate"),
  beforeRemoveAction: __name(() => Promise.resolve(), "beforeRemoveAction"),
  beforeAddAction: __name(() => Promise.resolve(), "beforeAddAction"),
  beforeUpdateAction: __name(() => Promise.resolve(), "beforeUpdateAction"),
  logger: { error: __name(() => {
  }, "error") },
  onSubmitValueParser: __name((isEditMode, keyPath, deep, name, rawValue) => parse3(rawValue), "onSubmitValueParser"),
  inputElement: __name(() => import_react29.default.createElement("input", null), "inputElement"),
  textareaElement: __name(() => import_react29.default.createElement("textarea", null), "textareaElement"),
  fallback: null
};
var { window: globalWindow2 } = globalThis;
var Wrapper6 = styled.div(({ theme }) => ({
  position: "relative",
  display: "flex",
  '&[aria-readonly="true"]': {
    opacity: 0.5
  },
  ".rejt-tree": {
    marginLeft: "1rem",
    fontSize: "13px",
    listStyleType: "none"
  },
  ".rejt-value-node:hover": {
    "& > button": {
      opacity: 1
    }
  },
  ".rejt-add-form": {
    marginLeft: 10
  },
  ".rejt-add-value-node": {
    display: "inline-flex",
    alignItems: "center"
  },
  ".rejt-name": {
    lineHeight: "22px"
  },
  ".rejt-not-collapsed-delimiter": {
    lineHeight: "22px"
  },
  ".rejt-value": {
    display: "inline-block",
    border: "1px solid transparent",
    borderRadius: 4,
    margin: "1px 0",
    padding: "0 4px",
    cursor: "text",
    color: theme.color.defaultText
  },
  ".rejt-value-node:hover > .rejt-value": {
    background: theme.color.lighter,
    borderColor: theme.appBorderColor
  }
}));
var ButtonInline = styled.button(({ theme, primary }) => ({
  border: 0,
  height: 20,
  margin: 1,
  borderRadius: 4,
  background: primary ? theme.color.secondary : "transparent",
  color: primary ? theme.color.lightest : theme.color.dark,
  fontWeight: primary ? "bold" : "normal",
  cursor: "pointer"
}));
var ActionButton = styled.button(({ theme }) => ({
  background: "none",
  border: 0,
  display: "inline-flex",
  verticalAlign: "middle",
  padding: 3,
  marginLeft: 5,
  color: theme.textMutedColor,
  opacity: 0,
  transition: "opacity 0.2s",
  cursor: "pointer",
  position: "relative",
  svg: {
    width: 9,
    height: 9
  },
  ":disabled": {
    cursor: "not-allowed"
  },
  ":hover, :focus-visible": {
    opacity: 1
  },
  "&:hover:not(:disabled), &:focus-visible:not(:disabled)": {
    "&.rejt-plus-menu": {
      color: theme.color.ancillary
    },
    "&.rejt-minus-menu": {
      color: theme.color.negative
    }
  }
}));
var Input = styled.input(({ theme, placeholder }) => ({
  outline: 0,
  margin: placeholder ? 1 : "1px 0",
  padding: "3px 4px",
  color: theme.color.defaultText,
  background: theme.background.app,
  border: `1px solid ${theme.appBorderColor}`,
  borderRadius: 4,
  lineHeight: "14px",
  width: placeholder === "Key" ? 80 : 120,
  "&:focus": {
    border: `1px solid ${theme.color.secondary}`
  }
}));
var RawButton = styled(IconButton)(({ theme }) => ({
  position: "absolute",
  zIndex: 2,
  top: 2,
  right: 2,
  height: 21,
  padding: "0 3px",
  background: theme.background.bar,
  border: `1px solid ${theme.appBorderColor}`,
  borderRadius: 3,
  color: theme.textMutedColor,
  fontSize: "9px",
  fontWeight: "bold",
  textDecoration: "none",
  span: {
    marginLeft: 3,
    marginTop: 1
  }
}));
var RawInput = styled(Form.Textarea)(({ theme }) => ({
  flex: 1,
  padding: "7px 6px",
  fontFamily: theme.typography.fonts.mono,
  fontSize: "12px",
  lineHeight: "18px",
  "&::placeholder": {
    fontFamily: theme.typography.fonts.base,
    fontSize: "13px"
  },
  "&:placeholder-shown": {
    padding: "7px 10px"
  }
}));
var ENTER_EVENT = {
  bubbles: true,
  cancelable: true,
  key: "Enter",
  code: "Enter",
  keyCode: 13
};
var dispatchEnterKey = __name((event) => {
  event.currentTarget.dispatchEvent(new globalWindow2.KeyboardEvent("keydown", ENTER_EVENT));
}, "dispatchEnterKey");
var selectValue = __name((event) => {
  event.currentTarget.select();
}, "selectValue");
var getCustomStyleFunction = __name((theme) => () => ({
  name: {
    color: theme.color.secondary
  },
  collapsed: {
    color: theme.color.dark
  },
  ul: {
    listStyle: "none",
    margin: "0 0 0 1rem",
    padding: 0
  },
  li: {
    outline: 0
  }
}), "getCustomStyleFunction");
var ObjectControl = __name(({ name, value: value2, onChange, argType }) => {
  const theme = useTheme();
  const data = (0, import_react28.useMemo)(() => value2 && cloneDeep(value2), [value2]);
  const hasData = data !== null && data !== void 0;
  const [showRaw, setShowRaw] = (0, import_react28.useState)(!hasData);
  const [parseError, setParseError] = (0, import_react28.useState)(null);
  const readonly = !!argType?.table?.readonly;
  const updateRaw = (0, import_react28.useCallback)(
    (raw) => {
      try {
        if (raw) {
          onChange(JSON.parse(raw));
        }
        setParseError(null);
      } catch (e2) {
        setParseError(e2);
      }
    },
    [onChange]
  );
  const [forceVisible, setForceVisible] = (0, import_react28.useState)(false);
  const onForceVisible = (0, import_react28.useCallback)(() => {
    onChange({});
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = (0, import_react28.useRef)(null);
  (0, import_react28.useEffect)(() => {
    if (forceVisible && htmlElRef.current) {
      htmlElRef.current.select();
    }
  }, [forceVisible]);
  if (!hasData) {
    return import_react28.default.createElement(Button, { disabled: readonly, id: getControlSetterButtonId(name), onClick: onForceVisible }, "Set object");
  }
  const rawJSONForm = import_react28.default.createElement(
    RawInput,
    {
      ref: htmlElRef,
      id: getControlId(name),
      name,
      defaultValue: value2 === null ? "" : JSON.stringify(value2, null, 2),
      onBlur: (event) => updateRaw(event.target.value),
      placeholder: "Edit JSON string...",
      autoFocus: forceVisible,
      valid: parseError ? "error" : void 0,
      readOnly: readonly
    }
  );
  const isObjectOrArray = Array.isArray(value2) || typeof value2 === "object" && value2?.constructor === Object;
  return import_react28.default.createElement(Wrapper6, { "aria-readonly": readonly }, isObjectOrArray && import_react28.default.createElement(
    RawButton,
    {
      role: "switch",
      "aria-checked": showRaw,
      "aria-label": `Edit the ${name} properties in text format`,
      onClick: (e2) => {
        e2.preventDefault();
        setShowRaw((isRaw) => !isRaw);
      }
    },
    showRaw ? import_react28.default.createElement(EyeCloseIcon, null) : import_react28.default.createElement(EyeIcon, null),
    import_react28.default.createElement("span", null, "RAW")
  ), !showRaw ? import_react28.default.createElement(
    JsonTree,
    {
      readOnly: readonly || !isObjectOrArray,
      isCollapsed: isObjectOrArray ? (
        /* default value */
        void 0
      ) : () => true,
      data,
      rootName: name,
      onFullyUpdate: onChange,
      getStyle: getCustomStyleFunction(theme),
      cancelButtonElement: import_react28.default.createElement(ButtonInline, { type: "button" }, "Cancel"),
      addButtonElement: import_react28.default.createElement(ButtonInline, { type: "submit", primary: true }, "Save"),
      plusMenuElement: import_react28.default.createElement(ActionButton, { type: "button" }, import_react28.default.createElement(AddIcon, null)),
      minusMenuElement: import_react28.default.createElement(ActionButton, { type: "button" }, import_react28.default.createElement(SubtractIcon, null)),
      inputElement: (_2, __, ___, key) => key ? import_react28.default.createElement(Input, { onFocus: selectValue, onBlur: dispatchEnterKey }) : import_react28.default.createElement(Input, null),
      fallback: rawJSONForm
    }
  ) : rawJSONForm);
}, "ObjectControl");
var RangeInput = styled.input(
  ({ theme, min, max, value: value2, disabled }) => ({
    // Resytled using http://danielstern.ca/range.css/#/
    "&": {
      width: "100%",
      backgroundColor: "transparent",
      appearance: "none"
    },
    "&::-webkit-slider-runnable-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: disabled ? "not-allowed" : "pointer"
    },
    "&::-webkit-slider-thumb": {
      marginTop: "-6px",
      width: 16,
      height: 16,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${rgba(theme.appBorderColor, 0.2)}`,
      cursor: disabled ? "not-allowed" : "grab",
      appearance: "none",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${curriedDarken$1(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: disabled ? "not-allowed" : "grab"
      }
    },
    "&:focus": {
      outline: "none",
      "&::-webkit-slider-runnable-track": {
        borderColor: rgba(theme.color.secondary, 0.4)
      },
      "&::-webkit-slider-thumb": {
        borderColor: theme.color.secondary,
        boxShadow: `0 0px 5px 0px ${theme.color.secondary}`
      }
    },
    "&::-moz-range-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: disabled ? "not-allowed" : "pointer",
      outline: "none"
    },
    "&::-moz-range-thumb": {
      width: 16,
      height: 16,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${rgba(theme.appBorderColor, 0.2)}`,
      cursor: disabled ? "not-allowed" : "grap",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${curriedDarken$1(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: "grabbing"
      }
    },
    "&::-ms-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedDarken$1(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${curriedLighten$1(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      color: "transparent",
      width: "100%",
      height: "6px",
      cursor: "pointer"
    },
    "&::-ms-fill-lower": {
      borderRadius: 6
    },
    "&::-ms-fill-upper": {
      borderRadius: 6
    },
    "&::-ms-thumb": {
      width: 16,
      height: 16,
      background: `${theme.input.background}`,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: 50,
      cursor: "grab",
      marginTop: 0
    },
    "@supports (-ms-ime-align:auto)": { "input[type=range]": { margin: "0" } }
  })
);
var RangeLabel = styled.span({
  paddingLeft: 5,
  paddingRight: 5,
  fontSize: 12,
  whiteSpace: "nowrap",
  fontFeatureSettings: "tnum",
  fontVariantNumeric: "tabular-nums",
  "[aria-readonly=true] &": {
    opacity: 0.5
  }
});
var RangeCurrentAndMaxLabel = styled(RangeLabel)(({ numberOFDecimalsPlaces, max }) => ({
  // Fixed width of "current / max" label to avoid slider width changes
  // 3 = size of separator " / "
  width: `${numberOFDecimalsPlaces + max.toString().length * 2 + 3}ch`,
  textAlign: "right",
  flexShrink: 0
}));
var RangeWrapper = styled.div({
  display: "flex",
  alignItems: "center",
  width: "100%"
});
function getNumberOfDecimalPlaces(number) {
  const match = number.toString().match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return !match ? 0 : Math.max(
    0,
    // Number of digits right of decimal point.
    (match[1] ? match[1].length : 0) - // Adjust for scientific notation.
    (match[2] ? +match[2] : 0)
  );
}
__name(getNumberOfDecimalPlaces, "getNumberOfDecimalPlaces");
var RangeControl = __name(({
  name,
  value: value2,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  onBlur,
  onFocus,
  argType
}) => {
  const handleChange = __name((event) => {
    onChange(parse2(event.target.value));
  }, "handleChange");
  const hasValue = value2 !== void 0;
  const numberOFDecimalsPlaces = (0, import_react32.useMemo)(() => getNumberOfDecimalPlaces(step), [step]);
  const readonly = !!argType?.table?.readonly;
  return import_react32.default.createElement(RangeWrapper, { "aria-readonly": readonly }, import_react32.default.createElement(RangeLabel, null, min), import_react32.default.createElement(
    RangeInput,
    {
      id: getControlId(name),
      type: "range",
      disabled: readonly,
      onChange: handleChange,
      ...{ name, min, max, step, onFocus, onBlur },
      value: value2 ?? min
    }
  ), import_react32.default.createElement(RangeCurrentAndMaxLabel, { numberOFDecimalsPlaces, max }, hasValue ? value2.toFixed(numberOFDecimalsPlaces) : "--", " / ", max));
}, "RangeControl");
var Wrapper7 = styled.label({
  display: "flex"
});
var MaxLength = styled.div(({ isMaxed }) => ({
  marginLeft: "0.75rem",
  paddingTop: "0.35rem",
  color: isMaxed ? "red" : void 0
}));
var TextControl = __name(({
  name,
  value: value2,
  onChange,
  onFocus,
  onBlur,
  maxLength,
  argType
}) => {
  const handleChange = __name((event) => {
    onChange(event.target.value);
  }, "handleChange");
  const readonly = !!argType?.table?.readonly;
  const [forceVisible, setForceVisible] = (0, import_react33.useState)(false);
  const onForceVisible = (0, import_react33.useCallback)(() => {
    onChange("");
    setForceVisible(true);
  }, [setForceVisible]);
  if (value2 === void 0) {
    return import_react33.default.createElement(
      Button,
      {
        variant: "outline",
        size: "medium",
        disabled: readonly,
        id: getControlSetterButtonId(name),
        onClick: onForceVisible
      },
      "Set string"
    );
  }
  const isValid = typeof value2 === "string";
  return import_react33.default.createElement(Wrapper7, null, import_react33.default.createElement(
    Form.Textarea,
    {
      id: getControlId(name),
      maxLength,
      onChange: handleChange,
      disabled: readonly,
      size: "flex",
      placeholder: "Edit string...",
      autoFocus: forceVisible,
      valid: isValid ? void 0 : "error",
      ...{ name, value: isValid ? value2 : "", onFocus, onBlur }
    }
  ), maxLength && import_react33.default.createElement(MaxLength, { isMaxed: value2?.length === maxLength }, value2?.length ?? 0, " / ", maxLength));
}, "TextControl");
var FileInput = styled(Form.Input)({
  padding: 10
});
function revokeOldUrls(urls) {
  urls.forEach((url) => {
    if (url.startsWith("blob:")) {
      URL.revokeObjectURL(url);
    }
  });
}
__name(revokeOldUrls, "revokeOldUrls");
var FilesControl = __name(({
  onChange,
  name,
  accept = "image/*",
  value: value2,
  argType
}) => {
  const inputElement = (0, import_react34.useRef)(null);
  const readonly = argType?.control?.readOnly;
  function handleFileChange(e2) {
    if (!e2.target.files) {
      return;
    }
    const fileUrls = Array.from(e2.target.files).map((file) => URL.createObjectURL(file));
    onChange(fileUrls);
    revokeOldUrls(value2 || []);
  }
  __name(handleFileChange, "handleFileChange");
  (0, import_react34.useEffect)(() => {
    if (value2 == null && inputElement.current) {
      inputElement.current.value = "";
    }
  }, [value2, name]);
  return import_react34.default.createElement(
    FileInput,
    {
      ref: inputElement,
      id: getControlId(name),
      type: "file",
      name,
      multiple: true,
      disabled: readonly,
      onChange: handleFileChange,
      accept,
      size: "flex"
    }
  );
}, "FilesControl");
var LazyColorControl = (0, import_react20.lazy)(() => import("./Color-64QXVMR3-IGUMSPWJ.js"));
var ColorControl = __name((props) => import_react20.default.createElement(import_react20.Suspense, { fallback: import_react20.default.createElement("div", null) }, import_react20.default.createElement(LazyColorControl, { ...props })), "ColorControl");
var Controls2 = {
  array: ObjectControl,
  object: ObjectControl,
  boolean: BooleanControl,
  color: ColorControl,
  date: DateControl,
  number: NumberControl,
  check: OptionsControl,
  "inline-check": OptionsControl,
  radio: OptionsControl,
  "inline-radio": OptionsControl,
  select: OptionsControl,
  "multi-select": OptionsControl,
  range: RangeControl,
  text: TextControl,
  file: FilesControl
};
var NoControl = __name(() => import_react19.default.createElement(import_react19.default.Fragment, null, "-"), "NoControl");
var ArgControl = __name(({ row, arg, updateArgs, isHovered }) => {
  const { key, control } = row;
  const [isFocused, setFocused] = (0, import_react19.useState)(false);
  const [boxedValue, setBoxedValue] = (0, import_react19.useState)({ value: arg });
  (0, import_react19.useEffect)(() => {
    if (!isFocused) {
      setBoxedValue({ value: arg });
    }
  }, [isFocused, arg]);
  const onChange = (0, import_react19.useCallback)(
    (argVal) => {
      setBoxedValue({ value: argVal });
      updateArgs({ [key]: argVal });
      return argVal;
    },
    [updateArgs, key]
  );
  const onBlur = (0, import_react19.useCallback)(() => setFocused(false), []);
  const onFocus = (0, import_react19.useCallback)(() => setFocused(true), []);
  if (!control || control.disable) {
    const canBeSetup = control?.disable !== true && row?.type?.name !== "function";
    return isHovered && canBeSetup ? import_react19.default.createElement(
      Link2,
      {
        href: "https://storybook.js.org/docs/essentials/controls?ref=ui",
        target: "_blank",
        withArrow: true
      },
      "Setup controls"
    ) : import_react19.default.createElement(NoControl, null);
  }
  const props = { name: key, argType: row, value: boxedValue.value, onChange, onBlur, onFocus };
  const Control = Controls2[control.type] || NoControl;
  return import_react19.default.createElement(Control, { ...props, ...control, controlType: control.type });
}, "ArgControl");
var Table = styled.table(({ theme }) => ({
  "&&": {
    // Escape default table styles
    borderCollapse: "collapse",
    borderSpacing: 0,
    border: "none",
    tr: {
      border: "none !important",
      background: "none"
    },
    "td, th": {
      padding: 0,
      border: "none",
      width: "auto!important"
    },
    // End escape
    marginTop: 0,
    marginBottom: 0,
    "th:first-of-type, td:first-of-type": {
      paddingLeft: 0
    },
    "th:last-of-type, td:last-of-type": {
      paddingRight: 0
    },
    td: {
      paddingTop: 0,
      paddingBottom: 4,
      "&:not(:first-of-type)": {
        paddingLeft: 10,
        paddingRight: 0
      }
    },
    tbody: {
      boxShadow: "none",
      border: "none"
    },
    code: codeCommon({ theme }),
    div: {
      span: {
        fontWeight: "bold"
      }
    },
    "& code": {
      margin: 0,
      display: "inline-block",
      fontSize: theme.typography.size.s1
    }
  }
}));
var ArgJsDoc = __name(({ tags }) => {
  const params = (tags.params || []).filter((x2) => x2.description);
  const hasDisplayableParams = params.length !== 0;
  const hasDisplayableDeprecated = tags.deprecated != null;
  const hasDisplayableReturns = tags.returns != null && tags.returns.description != null;
  if (!hasDisplayableParams && !hasDisplayableReturns && !hasDisplayableDeprecated) {
    return null;
  }
  return import_react35.default.createElement(import_react35.default.Fragment, null, import_react35.default.createElement(Table, null, import_react35.default.createElement("tbody", null, hasDisplayableDeprecated && import_react35.default.createElement("tr", { key: "deprecated" }, import_react35.default.createElement("td", { colSpan: 2 }, import_react35.default.createElement("strong", null, "Deprecated"), ": ", tags.deprecated?.toString())), hasDisplayableParams && params.map((x2) => {
    return import_react35.default.createElement("tr", { key: x2.name }, import_react35.default.createElement("td", null, import_react35.default.createElement("code", null, x2.name)), import_react35.default.createElement("td", null, x2.description));
  }), hasDisplayableReturns && import_react35.default.createElement("tr", { key: "returns" }, import_react35.default.createElement("td", null, import_react35.default.createElement("code", null, "Returns")), import_react35.default.createElement("td", null, tags.returns?.description)))));
}, "ArgJsDoc");
function uniq(arr) {
  return Array.from(new Set(arr));
}
__name(uniq, "uniq");
var import_memoizerific = __toESM2(require_memoizerific(), 1);
var ITEMS_BEFORE_EXPANSION = 8;
var Summary = styled.div(({ isExpanded }) => ({
  display: "flex",
  flexDirection: isExpanded ? "column" : "row",
  flexWrap: "wrap",
  alignItems: "flex-start",
  marginBottom: "-4px",
  minWidth: 100
}));
var Text3 = styled.span(codeCommon, ({ theme, simple = false }) => ({
  flex: "0 0 auto",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  wordBreak: "break-word",
  whiteSpace: "normal",
  maxWidth: "100%",
  margin: 0,
  marginRight: "4px",
  marginBottom: "4px",
  paddingTop: "2px",
  paddingBottom: "2px",
  lineHeight: "13px",
  ...simple && {
    background: "transparent",
    border: "0 none",
    paddingLeft: 0
  }
}));
var ExpandButton = styled.button(({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  marginBottom: "4px",
  background: "none",
  border: "none"
}));
var Expandable = styled.div(codeCommon, ({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  fontSize: theme.typography.size.s1,
  // overrides codeCommon
  margin: 0,
  whiteSpace: "nowrap",
  display: "flex",
  alignItems: "center"
}));
var Detail = styled.div(({ theme, width }) => ({
  width,
  minWidth: 200,
  maxWidth: 800,
  padding: 15,
  // Don't remove the mono fontFamily here even if it seems useless, this is used by the browser to calculate the length of a "ch" unit.
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  // Most custom stylesheet will reset the box-sizing to "border-box" and will break the tooltip.
  boxSizing: "content-box",
  "& code": {
    padding: "0 !important"
  }
}));
var ChevronUpIcon = styled(ChevronSmallUpIcon)({
  marginLeft: 4
});
var ChevronDownIcon2 = styled(ChevronSmallDownIcon)({
  marginLeft: 4
});
var EmptyArg = __name(() => {
  return import_react36.default.createElement("span", null, "-");
}, "EmptyArg");
var ArgText = __name(({ text, simple }) => {
  return import_react36.default.createElement(Text3, { simple }, text);
}, "ArgText");
var calculateDetailWidth = (0, import_memoizerific.default)(1e3)((detail) => {
  const lines = detail.split(/\r?\n/);
  return `${Math.max(...lines.map((x2) => x2.length))}ch`;
});
var getSummaryItems = __name((summary) => {
  if (!summary) {
    return [summary];
  }
  const splittedItems = summary.split("|");
  const summaryItems = splittedItems.map((value2) => value2.trim());
  return uniq(summaryItems);
}, "getSummaryItems");
var renderSummaryItems = __name((summaryItems, isExpanded = true) => {
  let items = summaryItems;
  if (!isExpanded) {
    items = summaryItems.slice(0, ITEMS_BEFORE_EXPANSION);
  }
  return items.map((item) => import_react36.default.createElement(ArgText, { key: item, text: item === "" ? '""' : item }));
}, "renderSummaryItems");
var ArgSummary = __name(({ value: value2, initialExpandedArgs }) => {
  const { summary, detail } = value2;
  const [isOpen, setIsOpen] = (0, import_react36.useState)(false);
  const [isExpanded, setIsExpanded] = (0, import_react36.useState)(initialExpandedArgs || false);
  if (summary === void 0 || summary === null) {
    return null;
  }
  const summaryAsString = typeof summary.toString === "function" ? summary.toString() : summary;
  if (detail == null) {
    const cannotBeSafelySplitted = /[(){}[\]<>]/.test(summaryAsString);
    if (cannotBeSafelySplitted) {
      return import_react36.default.createElement(ArgText, { text: summaryAsString });
    }
    const summaryItems = getSummaryItems(summaryAsString);
    const itemsCount = summaryItems.length;
    const hasManyItems = itemsCount > ITEMS_BEFORE_EXPANSION;
    return hasManyItems ? import_react36.default.createElement(Summary, { isExpanded }, renderSummaryItems(summaryItems, isExpanded), import_react36.default.createElement(ExpandButton, { onClick: () => setIsExpanded(!isExpanded) }, isExpanded ? "Show less..." : `Show ${itemsCount - ITEMS_BEFORE_EXPANSION} more...`)) : import_react36.default.createElement(Summary, null, renderSummaryItems(summaryItems));
  }
  return import_react36.default.createElement(
    WithTooltipPure,
    {
      closeOnOutsideClick: true,
      placement: "bottom",
      visible: isOpen,
      onVisibleChange: (isVisible) => {
        setIsOpen(isVisible);
      },
      tooltip: import_react36.default.createElement(Detail, { width: calculateDetailWidth(detail) }, import_react36.default.createElement(SyntaxHighlighter, { language: "jsx", format: false }, detail))
    },
    import_react36.default.createElement(Expandable, { className: "sbdocs-expandable" }, import_react36.default.createElement("span", null, summaryAsString), isOpen ? import_react36.default.createElement(ChevronUpIcon, null) : import_react36.default.createElement(ChevronDownIcon2, null))
  );
}, "ArgSummary");
var ArgValue = __name(({ value: value2, initialExpandedArgs }) => {
  return value2 == null ? import_react36.default.createElement(EmptyArg, null) : import_react36.default.createElement(ArgSummary, { value: value2, initialExpandedArgs });
}, "ArgValue");
var Name = styled.span({ fontWeight: "bold" });
var Required = styled.span(({ theme }) => ({
  color: theme.color.negative,
  fontFamily: theme.typography.fonts.mono,
  cursor: "help"
}));
var Description = styled.div(({ theme }) => ({
  "&&": {
    p: {
      margin: "0 0 10px 0"
    },
    a: {
      color: theme.color.secondary
    }
  },
  code: {
    ...codeCommon({ theme }),
    fontSize: 12,
    fontFamily: theme.typography.fonts.mono
  },
  "& code": {
    margin: 0,
    display: "inline-block"
  },
  "& pre > code": {
    whiteSpace: "pre-wrap"
  }
}));
var Type = styled.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? curriedTransparentize$1(0.1, theme.color.defaultText) : curriedTransparentize$1(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 4 : 0
}));
var TypeWithJsDoc = styled.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? curriedTransparentize$1(0.1, theme.color.defaultText) : curriedTransparentize$1(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 12 : 0,
  marginBottom: 12
}));
var StyledTd = styled.td(({ expandable }) => ({
  paddingLeft: expandable ? "40px !important" : "20px !important"
}));
var toSummary = __name((value2) => {
  if (!value2) {
    return value2;
  }
  const val = typeof value2 === "string" ? value2 : value2.name;
  return { summary: val };
}, "toSummary");
var ArgRow = __name((props) => {
  const [isHovered, setIsHovered] = (0, import_react18.useState)(false);
  const { row, updateArgs, compact: compact2, expandable, initialExpandedArgs } = props;
  const { name, description } = row;
  const table = row.table || {};
  const type = table.type || toSummary(row.type);
  const defaultValue = table.defaultValue || row.defaultValue;
  const required = row.type?.required;
  const hasDescription = description != null && description !== "";
  return import_react18.default.createElement("tr", { onMouseEnter: () => setIsHovered(true), onMouseLeave: () => setIsHovered(false) }, import_react18.default.createElement(StyledTd, { expandable: expandable ?? false }, import_react18.default.createElement(Name, null, name), required ? import_react18.default.createElement(Required, { title: "Required" }, "*") : null), compact2 ? null : import_react18.default.createElement("td", null, hasDescription && import_react18.default.createElement(Description, null, import_react18.default.createElement(index_modern_default, null, description)), table.jsDocTags != null ? import_react18.default.createElement(import_react18.default.Fragment, null, import_react18.default.createElement(TypeWithJsDoc, { hasDescription }, import_react18.default.createElement(ArgValue, { value: type, initialExpandedArgs })), import_react18.default.createElement(ArgJsDoc, { tags: table.jsDocTags })) : import_react18.default.createElement(Type, { hasDescription }, import_react18.default.createElement(ArgValue, { value: type, initialExpandedArgs }))), compact2 ? null : import_react18.default.createElement("td", null, import_react18.default.createElement(ArgValue, { value: defaultValue, initialExpandedArgs })), updateArgs ? import_react18.default.createElement("td", null, import_react18.default.createElement(ArgControl, { ...props, isHovered })) : null);
}, "ArgRow");
var Wrapper8 = styled.div(({ inAddonPanel, theme }) => ({
  height: inAddonPanel ? "100%" : "auto",
  display: "flex",
  border: inAddonPanel ? "none" : `1px solid ${theme.appBorderColor}`,
  borderRadius: inAddonPanel ? 0 : theme.appBorderRadius,
  padding: inAddonPanel ? 0 : 40,
  alignItems: "center",
  justifyContent: "center",
  flexDirection: "column",
  gap: 15,
  background: theme.background.content
}));
var Links = styled.div(({ theme }) => ({
  display: "flex",
  fontSize: theme.typography.size.s2 - 1,
  gap: 25
}));
var Empty = __name(({ inAddonPanel }) => {
  const [isLoading, setIsLoading] = (0, import_react37.useState)(true);
  (0, import_react37.useEffect)(() => {
    const load = setTimeout(() => {
      setIsLoading(false);
    }, 100);
    return () => clearTimeout(load);
  }, []);
  if (isLoading) {
    return null;
  }
  return import_react37.default.createElement(Wrapper8, { inAddonPanel }, import_react37.default.createElement(
    EmptyTabContent,
    {
      title: inAddonPanel ? "Interactive story playground" : "Args table with interactive controls couldn't be auto-generated",
      description: import_react37.default.createElement(import_react37.default.Fragment, null, "Controls give you an easy to use interface to test your components. Set your story args and you'll see controls appearing here automatically."),
      footer: import_react37.default.createElement(Links, null, inAddonPanel && import_react37.default.createElement(import_react37.default.Fragment, null, import_react37.default.createElement(
        Link2,
        {
          href: "https://storybook.js.org/docs/essentials/controls?ref=ui",
          target: "_blank",
          withArrow: true
        },
        import_react37.default.createElement(DocumentIcon, null),
        " Read docs"
      )), !inAddonPanel && import_react37.default.createElement(
        Link2,
        {
          href: "https://storybook.js.org/docs/essentials/controls?ref=ui",
          target: "_blank",
          withArrow: true
        },
        import_react37.default.createElement(DocumentIcon, null),
        " Learn how to set that up"
      ))
    }
  ));
}, "Empty");
var ExpanderIconDown = styled(ChevronDownIcon)(({ theme }) => ({
  marginRight: 8,
  marginLeft: -10,
  marginTop: -2,
  // optical alignment
  height: 12,
  width: 12,
  color: theme.base === "light" ? curriedTransparentize$1(0.25, theme.color.defaultText) : curriedTransparentize$1(0.3, theme.color.defaultText),
  border: "none",
  display: "inline-block"
}));
var ExpanderIconRight = styled(ChevronRightIcon)(({ theme }) => ({
  marginRight: 8,
  marginLeft: -10,
  marginTop: -2,
  // optical alignment
  height: 12,
  width: 12,
  color: theme.base === "light" ? curriedTransparentize$1(0.25, theme.color.defaultText) : curriedTransparentize$1(0.3, theme.color.defaultText),
  border: "none",
  display: "inline-block"
}));
var FlexWrapper = styled.span(({ theme }) => ({
  display: "flex",
  lineHeight: "20px",
  alignItems: "center"
}));
var Section = styled.td(({ theme }) => ({
  position: "relative",
  letterSpacing: "0.35em",
  textTransform: "uppercase",
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s1 - 1,
  color: theme.base === "light" ? curriedTransparentize$1(0.4, theme.color.defaultText) : curriedTransparentize$1(0.6, theme.color.defaultText),
  background: `${theme.background.app} !important`,
  "& ~ td": {
    background: `${theme.background.app} !important`
  }
}));
var Subsection = styled.td(({ theme }) => ({
  position: "relative",
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s2 - 1,
  background: theme.background.app
}));
var StyledTd2 = styled.td({
  position: "relative"
});
var StyledTr = styled.tr(({ theme }) => ({
  "&:hover > td": {
    backgroundColor: `${curriedLighten$1(5e-3, theme.background.app)} !important`,
    boxShadow: `${theme.color.mediumlight} 0 - 1px 0 0 inset`,
    cursor: "row-resize"
  }
}));
var ClickIntercept = styled.button({
  // reset button style
  background: "none",
  border: "none",
  padding: "0",
  font: "inherit",
  // add custom style
  position: "absolute",
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  height: "100%",
  width: "100%",
  color: "transparent",
  cursor: "row-resize !important"
});
var SectionRow = __name(({
  level = "section",
  label,
  children,
  initialExpanded = true,
  colSpan = 3
}) => {
  const [expanded, setExpanded] = (0, import_react38.useState)(initialExpanded);
  const Level = level === "subsection" ? Subsection : Section;
  const itemCount = children?.length || 0;
  const caption = level === "subsection" ? `${itemCount} item${itemCount !== 1 ? "s" : ""}` : "";
  const helperText = `${expanded ? "Hide" : "Show"} ${level === "subsection" ? itemCount : label} item${itemCount !== 1 ? "s" : ""}`;
  return import_react38.default.createElement(import_react38.default.Fragment, null, import_react38.default.createElement(StyledTr, { title: helperText }, import_react38.default.createElement(Level, { colSpan: 1 }, import_react38.default.createElement(ClickIntercept, { onClick: (e2) => setExpanded(!expanded), tabIndex: 0 }, helperText), import_react38.default.createElement(FlexWrapper, null, expanded ? import_react38.default.createElement(ExpanderIconDown, null) : import_react38.default.createElement(ExpanderIconRight, null), label)), import_react38.default.createElement(StyledTd2, { colSpan: colSpan - 1 }, import_react38.default.createElement(
    ClickIntercept,
    {
      onClick: (e2) => setExpanded(!expanded),
      tabIndex: -1,
      style: { outline: "none" }
    },
    helperText
  ), expanded ? null : caption)), expanded ? children : null);
}, "SectionRow");
var TableWrapper = styled.div(({ theme }) => ({
  width: "100%",
  borderSpacing: 0,
  color: theme.color.defaultText
}));
var Row = styled.div(({ theme }) => ({
  display: "flex",
  borderBottom: `1px solid ${theme.appBorderColor}`,
  "&:last-child": {
    borderBottom: 0
  }
}));
var Column = styled.div(
  ({ position, theme }) => {
    const baseStyles = {
      display: "flex",
      flexDirection: "column",
      gap: 5,
      padding: "10px 15px",
      alignItems: "flex-start"
    };
    switch (position) {
      case "first":
        return {
          ...baseStyles,
          width: "25%",
          paddingLeft: 20
        };
      case "second":
        return {
          ...baseStyles,
          width: "35%"
        };
      case "third":
        return {
          ...baseStyles,
          width: "15%"
        };
      case "last":
        return {
          ...baseStyles,
          width: "25%",
          paddingRight: 20
        };
    }
  }
);
var SkeletonText = styled.div(
  ({ theme, width, height }) => ({
    animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
    background: theme.appBorderColor,
    width: width || "100%",
    height: height || 16,
    borderRadius: 3
  })
);
var Skeleton = __name(() => import_react39.default.createElement(TableWrapper, null, import_react39.default.createElement(Row, null, import_react39.default.createElement(Column, { position: "first" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "second" }, import_react39.default.createElement(SkeletonText, { width: "30%" })), import_react39.default.createElement(Column, { position: "third" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "last" }, import_react39.default.createElement(SkeletonText, { width: "60%" }))), import_react39.default.createElement(Row, null, import_react39.default.createElement(Column, { position: "first" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "second" }, import_react39.default.createElement(SkeletonText, { width: "80%" }), import_react39.default.createElement(SkeletonText, { width: "30%" })), import_react39.default.createElement(Column, { position: "third" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "last" }, import_react39.default.createElement(SkeletonText, { width: "60%" }))), import_react39.default.createElement(Row, null, import_react39.default.createElement(Column, { position: "first" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "second" }, import_react39.default.createElement(SkeletonText, { width: "80%" }), import_react39.default.createElement(SkeletonText, { width: "30%" })), import_react39.default.createElement(Column, { position: "third" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "last" }, import_react39.default.createElement(SkeletonText, { width: "60%" }))), import_react39.default.createElement(Row, null, import_react39.default.createElement(Column, { position: "first" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "second" }, import_react39.default.createElement(SkeletonText, { width: "80%" }), import_react39.default.createElement(SkeletonText, { width: "30%" })), import_react39.default.createElement(Column, { position: "third" }, import_react39.default.createElement(SkeletonText, { width: "60%" })), import_react39.default.createElement(Column, { position: "last" }, import_react39.default.createElement(SkeletonText, { width: "60%" })))), "Skeleton");
var TableWrapper2 = styled.table(({ theme, compact: compact2, inAddonPanel }) => ({
  "&&": {
    // Resets for cascading/system styles
    borderSpacing: 0,
    color: theme.color.defaultText,
    "td, th": {
      padding: 0,
      border: "none",
      verticalAlign: "top",
      textOverflow: "ellipsis"
    },
    // End Resets
    fontSize: theme.typography.size.s2 - 1,
    lineHeight: "20px",
    textAlign: "left",
    width: "100%",
    // Margin collapse
    marginTop: inAddonPanel ? 0 : 25,
    marginBottom: inAddonPanel ? 0 : 40,
    "thead th:first-of-type, td:first-of-type": {
      // intentionally specify thead here
      width: "25%"
    },
    "th:first-of-type, td:first-of-type": {
      paddingLeft: 20
    },
    "th:nth-of-type(2), td:nth-of-type(2)": {
      ...compact2 ? null : {
        // Description column
        width: "35%"
      }
    },
    "td:nth-of-type(3)": {
      ...compact2 ? null : {
        // Defaults column
        width: "15%"
      }
    },
    "th:last-of-type, td:last-of-type": {
      paddingRight: 20,
      ...compact2 ? null : {
        // Controls column
        width: "25%"
      }
    },
    th: {
      color: theme.base === "light" ? curriedTransparentize$1(0.25, theme.color.defaultText) : curriedTransparentize$1(0.45, theme.color.defaultText),
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 15,
      paddingRight: 15
    },
    td: {
      paddingTop: "10px",
      paddingBottom: "10px",
      "&:not(:first-of-type)": {
        paddingLeft: 15,
        paddingRight: 15
      },
      "&:last-of-type": {
        paddingRight: 20
      }
    },
    // Makes border alignment consistent w/other DocBlocks
    marginLeft: inAddonPanel ? 0 : 1,
    marginRight: inAddonPanel ? 0 : 1,
    tbody: {
      // Safari doesn't love shadows on tbody so we need to use a shadow filter. In order to do this,
      // the table cells all need to be solid so they have a background color applied.
      // I wasn't sure what kinds of content go in these tables so I was extra specific with selectors
      // to avoid unexpected surprises.
      ...inAddonPanel ? null : {
        filter: theme.base === "light" ? `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.10))` : `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.20))`
      },
      "> tr > *": {
        // For filter to work properly, the table cells all need to be opaque.
        background: theme.background.content,
        borderTop: `1px solid ${theme.appBorderColor}`
      },
      ...inAddonPanel ? null : {
        // This works and I don't know why. :)
        "> tr:first-of-type > *": {
          borderBlockStart: `1px solid ${theme.appBorderColor}`
        },
        "> tr:last-of-type > *": {
          borderBlockEnd: `1px solid ${theme.appBorderColor}`
        },
        "> tr > *:first-of-type": {
          borderInlineStart: `1px solid ${theme.appBorderColor}`
        },
        "> tr > *:last-of-type": {
          borderInlineEnd: `1px solid ${theme.appBorderColor}`
        },
        // Thank you, Safari, for making me write code like this.
        "> tr:first-of-type > td:first-of-type": {
          borderTopLeftRadius: theme.appBorderRadius
        },
        "> tr:first-of-type > td:last-of-type": {
          borderTopRightRadius: theme.appBorderRadius
        },
        "> tr:last-of-type > td:first-of-type": {
          borderBottomLeftRadius: theme.appBorderRadius
        },
        "> tr:last-of-type > td:last-of-type": {
          borderBottomRightRadius: theme.appBorderRadius
        }
      }
    }
    // End awesome table styling
  }
}));
var TablePositionWrapper = styled.div({
  position: "relative"
});
var ButtonPositionWrapper = styled.div({
  position: "absolute",
  right: 8,
  top: 6
});
var sortFns = {
  alpha: __name((a2, b2) => (a2.name ?? "").localeCompare(b2.name ?? ""), "alpha"),
  requiredFirst: __name((a2, b2) => Number(!!b2.type?.required) - Number(!!a2.type?.required) || (a2.name ?? "").localeCompare(b2.name ?? ""), "requiredFirst"),
  none: null
};
var groupRows = __name((rows, sort) => {
  const sections = { ungrouped: [], ungroupedSubsections: {}, sections: {} };
  if (!rows) {
    return sections;
  }
  Object.entries(rows).forEach(([key, row]) => {
    const { category, subcategory } = row?.table || {};
    if (category) {
      const section = sections.sections[category] || { ungrouped: [], subsections: {} };
      if (!subcategory) {
        section.ungrouped.push({ key, ...row });
      } else {
        const subsection = section.subsections[subcategory] || [];
        subsection.push({ key, ...row });
        section.subsections[subcategory] = subsection;
      }
      sections.sections[category] = section;
    } else if (subcategory) {
      const subsection = sections.ungroupedSubsections[subcategory] || [];
      subsection.push({ key, ...row });
      sections.ungroupedSubsections[subcategory] = subsection;
    } else {
      sections.ungrouped.push({ key, ...row });
    }
  });
  const sortFn = sortFns[sort];
  const sortSubsection = __name((record) => {
    if (!sortFn) {
      return record;
    }
    return Object.keys(record).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: record[cur].sort(sortFn)
      }),
      {}
    );
  }, "sortSubsection");
  const sorted = {
    ungrouped: sortFn ? sections.ungrouped.sort(sortFn) : sections.ungrouped,
    ungroupedSubsections: sortSubsection(sections.ungroupedSubsections),
    sections: Object.keys(sections.sections).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: {
          ungrouped: sortFn ? sections.sections[cur].ungrouped.sort(sortFn) : sections.sections[cur].ungrouped,
          subsections: sortSubsection(sections.sections[cur].subsections)
        }
      }),
      {}
    )
  };
  return sorted;
}, "groupRows");
var safeIncludeConditionalArg = __name((row, args, globals) => {
  try {
    return includeConditionalArg(row, args, globals);
  } catch (err) {
    import_client_logger.once.warn(err.message);
    return false;
  }
}, "safeIncludeConditionalArg");
var ArgsTable = __name((props) => {
  const {
    updateArgs,
    resetArgs,
    compact: compact2,
    inAddonPanel,
    initialExpandedArgs,
    sort = "none",
    isLoading
  } = props;
  if ("error" in props) {
    const { error } = props;
    return import_react3.default.createElement(EmptyBlock, null, error, " ", import_react3.default.createElement(Link2, { href: "http://storybook.js.org/docs/?ref=ui", target: "_blank", withArrow: true }, import_react3.default.createElement(DocumentIcon, null), " Read the docs"));
  }
  if (isLoading) {
    return import_react3.default.createElement(Skeleton, null);
  }
  const { rows, args, globals } = "rows" in props ? props : { rows: void 0, args: void 0, globals: void 0 };
  const groups = groupRows(
    pickBy(
      rows || {},
      (row) => !row?.table?.disable && safeIncludeConditionalArg(row, args || {}, globals || {})
    ),
    sort
  );
  const hasNoUngrouped = groups.ungrouped.length === 0;
  const hasNoSections = Object.entries(groups.sections).length === 0;
  const hasNoUngroupedSubsections = Object.entries(groups.ungroupedSubsections).length === 0;
  if (hasNoUngrouped && hasNoSections && hasNoUngroupedSubsections) {
    return import_react3.default.createElement(Empty, { inAddonPanel });
  }
  let colSpan = 1;
  if (updateArgs) {
    colSpan += 1;
  }
  if (!compact2) {
    colSpan += 2;
  }
  const expandable = Object.keys(groups.sections).length > 0;
  const common = { updateArgs, compact: compact2, inAddonPanel, initialExpandedArgs };
  return import_react3.default.createElement(ResetWrapper, null, import_react3.default.createElement(TablePositionWrapper, null, updateArgs && !isLoading && resetArgs && import_react3.default.createElement(ButtonPositionWrapper, null, import_react3.default.createElement(
    IconButton,
    {
      onClick: () => resetArgs(),
      "aria-label": "Reset controls",
      title: "Reset controls"
    },
    import_react3.default.createElement(UndoIcon, null)
  )), import_react3.default.createElement(TableWrapper2, { ...{ compact: compact2, inAddonPanel }, className: "docblock-argstable sb-unstyled" }, import_react3.default.createElement("thead", { className: "docblock-argstable-head" }, import_react3.default.createElement("tr", null, import_react3.default.createElement("th", null, import_react3.default.createElement("span", null, "Name")), compact2 ? null : import_react3.default.createElement("th", null, import_react3.default.createElement("span", null, "Description")), compact2 ? null : import_react3.default.createElement("th", null, import_react3.default.createElement("span", null, "Default")), updateArgs ? import_react3.default.createElement("th", null, import_react3.default.createElement("span", null, "Control")) : null)), import_react3.default.createElement("tbody", { className: "docblock-argstable-body" }, groups.ungrouped.map((row) => import_react3.default.createElement(ArgRow, { key: row.key, row, arg: args && args[row.key], ...common })), Object.entries(groups.ungroupedSubsections).map(([subcategory, subsection]) => import_react3.default.createElement(
    SectionRow,
    {
      key: subcategory,
      label: subcategory,
      level: "subsection",
      colSpan
    },
    subsection.map((row) => import_react3.default.createElement(
      ArgRow,
      {
        key: row.key,
        row,
        arg: args && args[row.key],
        expandable,
        ...common
      }
    ))
  )), Object.entries(groups.sections).map(([category, section]) => import_react3.default.createElement(SectionRow, { key: category, label: category, level: "section", colSpan }, section.ungrouped.map((row) => import_react3.default.createElement(ArgRow, { key: row.key, row, arg: args && args[row.key], ...common })), Object.entries(section.subsections).map(([subcategory, subsection]) => import_react3.default.createElement(
    SectionRow,
    {
      key: subcategory,
      label: subcategory,
      level: "subsection",
      colSpan
    },
    subsection.map((row) => import_react3.default.createElement(
      ArgRow,
      {
        key: row.key,
        row,
        arg: args && args[row.key],
        expandable,
        ...common
      }
    ))
  ))))))));
}, "ArgsTable");
var anchorBlockIdFromId = __name((storyId) => `anchor--${storyId}`, "anchorBlockIdFromId");
var Anchor = __name(({ storyId, children }) => import_react40.default.createElement("div", { id: anchorBlockIdFromId(storyId), className: "sb-anchor" }, children), "Anchor");
var useOf = __name((moduleExportOrType, validTypes) => {
  const context = (0, import_react42.useContext)(DocsContext);
  return context.resolveOf(moduleExportOrType, validTypes);
}, "useOf");
var titleCase = __name((str2) => str2.split("-").map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join(""), "titleCase");
var getComponentName = __name((component) => {
  if (!component) {
    return void 0;
  }
  if (typeof component === "string") {
    if (component.includes("-")) {
      return titleCase(component);
    }
    return component;
  }
  if (component.__docgenInfo && component.__docgenInfo.displayName) {
    return component.__docgenInfo.displayName;
  }
  return component.name;
}, "getComponentName");
function scrollToElement(element, block = "start") {
  element.scrollIntoView({
    behavior: "smooth",
    block,
    inline: "nearest"
  });
}
__name(scrollToElement, "scrollToElement");
function extractComponentArgTypes(component, parameters) {
  const { extractArgTypes } = parameters.docs || {};
  if (!extractArgTypes) {
    throw new Error(
      "Args unsupported. See Args documentation for your framework."
      /* ARGS_UNSUPPORTED */
    );
  }
  return extractArgTypes(component);
}
__name(extractComponentArgTypes, "extractComponentArgTypes");
function getArgTypesFromResolved(resolved) {
  if (resolved.type === "component") {
    const {
      component: component2,
      projectAnnotations: { parameters: parameters2 }
    } = resolved;
    return {
      argTypes: extractComponentArgTypes(component2, parameters2),
      parameters: parameters2,
      component: component2
    };
  }
  if (resolved.type === "meta") {
    const {
      preparedMeta: { argTypes: argTypes2, parameters: parameters2, component: component2, subcomponents: subcomponents2 }
    } = resolved;
    return { argTypes: argTypes2, parameters: parameters2, component: component2, subcomponents: subcomponents2 };
  }
  const {
    story: { argTypes, parameters, component, subcomponents }
  } = resolved;
  return { argTypes, parameters, component, subcomponents };
}
__name(getArgTypesFromResolved, "getArgTypesFromResolved");
var ArgTypes = __name((props) => {
  const { of } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const resolved = useOf(of || "meta");
  const { argTypes, parameters, component, subcomponents } = getArgTypesFromResolved(resolved);
  const argTypesParameters = parameters?.docs?.argTypes || {};
  const include = props.include ?? argTypesParameters.include;
  const exclude = props.exclude ?? argTypesParameters.exclude;
  const sort = props.sort ?? argTypesParameters.sort;
  const filteredArgTypes = (0, import_preview_api.filterArgTypes)(argTypes, include, exclude);
  const hasSubcomponents = Boolean(subcomponents) && Object.keys(subcomponents || {}).length > 0;
  if (!hasSubcomponents) {
    return import_react41.default.createElement(ArgsTable, { rows: filteredArgTypes, sort });
  }
  const mainComponentName = getComponentName(component) || "Main";
  const subcomponentTabs = Object.fromEntries(
    Object.entries(subcomponents || {}).map(([key, comp]) => [
      key,
      {
        rows: (0, import_preview_api.filterArgTypes)(
          extractComponentArgTypes(comp, parameters),
          include,
          exclude
        ),
        sort
      }
    ])
  );
  const tabs = {
    [mainComponentName]: { rows: filteredArgTypes, sort },
    ...subcomponentTabs
  };
  return import_react41.default.createElement(TabbedArgsTable, { tabs, sort });
}, "ArgTypes");
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS2 = __name((cb, mod) => __name(function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
}, "__require"), "__commonJS");
var __copyProps = __name((to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: __name(() => from[key], "get"), enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
}, "__copyProps");
var __toESM22 = __name((mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
)), "__toESM");
var eventProperties = [
  "bubbles",
  "cancelBubble",
  "cancelable",
  "composed",
  "currentTarget",
  "defaultPrevented",
  "eventPhase",
  "isTrusted",
  "returnValue",
  "srcElement",
  "target",
  "timeStamp",
  "type"
];
var customEventSpecificProperties = ["detail"];
function extractEventHiddenProperties(event) {
  const rebuildEvent = eventProperties.filter((value2) => event[value2] !== void 0).reduce((acc, value2) => {
    acc[value2] = event[value2];
    return acc;
  }, {});
  if (event instanceof CustomEvent) {
    for (const value2 of customEventSpecificProperties.filter(
      (value22) => event[value22] !== void 0
    )) {
      rebuildEvent[value2] = event[value2];
    }
  }
  return rebuildEvent;
}
__name(extractEventHiddenProperties, "extractEventHiddenProperties");
var require_es_object_atoms = __commonJS2({
  "node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js"(exports, module) {
    "use strict";
    module.exports = Object;
  }
});
var require_es_errors = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    module.exports = Error;
  }
});
var require_eval = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    module.exports = EvalError;
  }
});
var require_range = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    module.exports = RangeError;
  }
});
var require_ref = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    module.exports = ReferenceError;
  }
});
var require_syntax = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    module.exports = SyntaxError;
  }
});
var require_type = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    module.exports = TypeError;
  }
});
var require_uri = __commonJS2({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    module.exports = URIError;
  }
});
var require_abs = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js"(exports, module) {
    "use strict";
    module.exports = Math.abs;
  }
});
var require_floor = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js"(exports, module) {
    "use strict";
    module.exports = Math.floor;
  }
});
var require_max = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js"(exports, module) {
    "use strict";
    module.exports = Math.max;
  }
});
var require_min = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js"(exports, module) {
    "use strict";
    module.exports = Math.min;
  }
});
var require_pow = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js"(exports, module) {
    "use strict";
    module.exports = Math.pow;
  }
});
var require_round = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js"(exports, module) {
    "use strict";
    module.exports = Math.round;
  }
});
var require_isNaN = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js"(exports, module) {
    "use strict";
    module.exports = Number.isNaN || __name(function isNaN2(a2) {
      return a2 !== a2;
    }, "isNaN2");
  }
});
var require_sign = __commonJS2({
  "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js"(exports, module) {
    "use strict";
    var $isNaN = require_isNaN();
    module.exports = __name(function sign(number) {
      if ($isNaN(number) || number === 0) {
        return number;
      }
      return number < 0 ? -1 : 1;
    }, "sign");
  }
});
var require_gOPD = __commonJS2({
  "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js"(exports, module) {
    "use strict";
    module.exports = Object.getOwnPropertyDescriptor;
  }
});
var require_gopd = __commonJS2({
  "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e2) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});
var require_es_define_property = __commonJS2({
  "node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e2) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});
var require_shams = __commonJS2({
  "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = __name(function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _2 in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    }, "hasSymbols");
  }
});
var require_has_symbols = __commonJS2({
  "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = __name(function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    }, "hasNativeSymbols");
  }
});
var require_Reflect_getPrototypeOf = __commonJS2({
  "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module) {
    "use strict";
    module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  }
});
var require_Object_getPrototypeOf = __commonJS2({
  "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js"(exports, module) {
    "use strict";
    var $Object = require_es_object_atoms();
    module.exports = $Object.getPrototypeOf || null;
  }
});
var require_implementation = __commonJS2({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = __name(function concatty2(a2, b2) {
      var arr = [];
      for (var i2 = 0; i2 < a2.length; i2 += 1) {
        arr[i2] = a2[i2];
      }
      for (var j2 = 0; j2 < b2.length; j2 += 1) {
        arr[j2 + a2.length] = b2[j2];
      }
      return arr;
    }, "concatty2");
    var slicy = __name(function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset || 0, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) {
        arr[j2] = arrLike[i2];
      }
      return arr;
    }, "slicy2");
    var joiny = __name(function(arr, joiner) {
      var str2 = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str2 += arr[i2];
        if (i2 + 1 < arr.length) {
          str2 += joiner;
        }
      }
      return str2;
    }, "joiny");
    module.exports = __name(function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = __name(function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      }, "binder");
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty2 = __name(function Empty22() {
        }, "Empty2");
        Empty2.prototype = target.prototype;
        bound.prototype = new Empty2();
        Empty2.prototype = null;
      }
      return bound;
    }, "bind");
  }
});
var require_function_bind = __commonJS2({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});
var require_functionCall = __commonJS2({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js"(exports, module) {
    "use strict";
    module.exports = Function.prototype.call;
  }
});
var require_functionApply = __commonJS2({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js"(exports, module) {
    "use strict";
    module.exports = Function.prototype.apply;
  }
});
var require_reflectApply = __commonJS2({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module) {
    "use strict";
    module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});
var require_actualApply = __commonJS2({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module.exports = $reflectApply || bind.call($call, $apply);
  }
});
var require_call_bind_apply_helpers = __commonJS2({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module.exports = __name(function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    }, "callBindBasic");
  }
});
var require_get = __commonJS2({
  "node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js"(exports, module) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e2) {
      if (!e2 || typeof e2 !== "object" || !("code" in e2) || e2.code !== "ERR_PROTO_ACCESS") {
        throw e2;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      __name(function getDunder(value2) {
        return $getPrototypeOf(value2 == null ? value2 : $Object(value2));
      }, "getDunder")
    ) : false;
  }
});
var require_get_proto = __commonJS2({
  "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js"(exports, module) {
    "use strict";
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module.exports = reflectGetProto ? __name(function getProto(O2) {
      return reflectGetProto(O2);
    }, "getProto") : originalGetProto ? __name(function getProto(O2) {
      if (!O2 || typeof O2 !== "object" && typeof O2 !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O2);
    }, "getProto") : getDunderProto ? __name(function getProto(O2) {
      return getDunderProto(O2);
    }, "getProto") : null;
  }
});
var require_hasown = __commonJS2({
  "node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});
var require_get_intrinsic = __commonJS2({
  "node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign = require_sign();
    var $Function = Function;
    var getEvalledConstructor = __name(function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e2) {
      }
    }, "getEvalledConstructor");
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = __name(function() {
      throw new $TypeError();
    }, "throwTypeError");
    var ThrowTypeError = $gOPD ? (function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    })() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float16Array%": typeof Float16Array === "undefined" ? undefined2 : Float16Array,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow,
      "%Math.round%": round,
      "%Math.sign%": sign,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto) {
      try {
        null.error;
      } catch (e2) {
        errorProto = getProto(getProto(e2));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = __name(function doEval2(name) {
      var value2;
      if (name === "%AsyncFunction%") {
        value2 = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value2 = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value2 = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value2 = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value2 = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value2;
      return value2;
    }, "doEval2");
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath2 = __name(function stringToPath3(string) {
      var first = $strSlice(string, 0, 1);
      var last2 = $strSlice(string, -1);
      if (first === "%" && last2 !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last2 === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName2, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number || match;
      });
      return result;
    }, "stringToPath3");
    var getBaseIntrinsic = __name(function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value2 = INTRINSICS[intrinsicName];
        if (value2 === needsEval) {
          value2 = doEval(intrinsicName);
        }
        if (typeof value2 === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value: value2
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    }, "getBaseIntrinsic2");
    module.exports = __name(function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath2(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value2 = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last2 = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first !== last2) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value2 = INTRINSICS[intrinsicRealName];
        } else if (value2 != null) {
          if (!(part in value2)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value2, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value2 = desc.get;
            } else {
              value2 = value2[part];
            }
          } else {
            isOwn = hasOwn(value2, part);
            value2 = value2[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value2;
          }
        }
      }
      return value2;
    }, "GetIntrinsic");
  }
});
var require_call_bound = __commonJS2({
  "node_modules/.pnpm/call-bound@1.0.4/node_modules/call-bound/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBindBasic = require_call_bind_apply_helpers();
    var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
    module.exports = __name(function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = (
        /** @type {(this: unknown, ...args: unknown[]) => unknown} */
        GetIntrinsic(name, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBindBasic(
          /** @type {const} */
          [intrinsic]
        );
      }
      return intrinsic;
    }, "callBoundIntrinsic");
  }
});
var require_shams2 = __commonJS2({
  "node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    var hasSymbols = require_shams();
    module.exports = __name(function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    }, "hasToStringTagShams");
  }
});
var require_is_regex = __commonJS2({
  "node_modules/.pnpm/is-regex@1.2.1/node_modules/is-regex/index.js"(exports, module) {
    "use strict";
    var callBound = require_call_bound();
    var hasToStringTag = require_shams2()();
    var hasOwn = require_hasown();
    var gOPD = require_gopd();
    var fn;
    if (hasToStringTag) {
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = __name(function() {
        throw isRegexMarker;
      }, "throwRegexMarker");
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
      fn = __name(function isRegex(value2) {
        if (!value2 || typeof value2 !== "object") {
          return false;
        }
        var descriptor = (
          /** @type {NonNullable<typeof gOPD>} */
          gOPD(
            /** @type {{ lastIndex?: unknown }} */
            value2,
            "lastIndex"
          )
        );
        var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, "value");
        if (!hasLastIndexDataProperty) {
          return false;
        }
        try {
          $exec(
            value2,
            /** @type {string} */
            /** @type {unknown} */
            badStringifier
          );
        } catch (e2) {
          return e2 === isRegexMarker;
        }
      }, "isRegex");
    } else {
      $toString = callBound("Object.prototype.toString");
      regexClass = "[object RegExp]";
      fn = __name(function isRegex(value2) {
        if (!value2 || typeof value2 !== "object" && typeof value2 !== "function") {
          return false;
        }
        return $toString(value2) === regexClass;
      }, "isRegex");
    }
    var $exec;
    var isRegexMarker;
    var throwRegexMarker;
    var badStringifier;
    var $toString;
    var regexClass;
    module.exports = fn;
  }
});
var require_is_function = __commonJS2({
  "node_modules/.pnpm/is-function@1.0.2/node_modules/is-function/index.js"(exports, module) {
    module.exports = isFunction3;
    var toString2 = Object.prototype.toString;
    function isFunction3(fn) {
      if (!fn) {
        return false;
      }
      var string = toString2.call(fn);
      return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && // IE8 and below
      (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    }
    __name(isFunction3, "isFunction3");
  }
});
var require_safe_regex_test = __commonJS2({
  "node_modules/.pnpm/safe-regex-test@1.1.0/node_modules/safe-regex-test/index.js"(exports, module) {
    "use strict";
    var callBound = require_call_bound();
    var isRegex = require_is_regex();
    var $exec = callBound("RegExp.prototype.exec");
    var $TypeError = require_type();
    module.exports = __name(function regexTester(regex2) {
      if (!isRegex(regex2)) {
        throw new $TypeError("`regex` must be a RegExp");
      }
      return __name(function test(s2) {
        return $exec(regex2, s2) !== null;
      }, "test");
    }, "regexTester");
  }
});
var require_is_symbol = __commonJS2({
  "node_modules/.pnpm/is-symbol@1.1.1/node_modules/is-symbol/index.js"(exports, module) {
    "use strict";
    var callBound = require_call_bound();
    var $toString = callBound("Object.prototype.toString");
    var hasSymbols = require_has_symbols()();
    var safeRegexTest = require_safe_regex_test();
    if (hasSymbols) {
      $symToStr = callBound("Symbol.prototype.toString");
      isSymString = safeRegexTest(/^Symbol\(.*\)$/);
      isSymbolObject = __name(function isRealSymbolObject(value2) {
        if (typeof value2.valueOf() !== "symbol") {
          return false;
        }
        return isSymString($symToStr(value2));
      }, "isRealSymbolObject");
      module.exports = __name(function isSymbol3(value2) {
        if (typeof value2 === "symbol") {
          return true;
        }
        if (!value2 || typeof value2 !== "object" || $toString(value2) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value2);
        } catch (e2) {
          return false;
        }
      }, "isSymbol3");
    } else {
      module.exports = __name(function isSymbol3(value2) {
        return false;
      }, "isSymbol3");
    }
    var $symToStr;
    var isSymString;
    var isSymbolObject;
  }
});
var import_is_regex = __toESM22(require_is_regex());
var import_is_function = __toESM22(require_is_function());
var import_is_symbol = __toESM22(require_is_symbol());
function isObject(val) {
  return val != null && typeof val === "object" && Array.isArray(val) === false;
}
__name(isObject, "isObject");
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value2) {
  var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
  try {
    value2[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag] = tag;
    } else {
      delete value2[symToStringTag];
    }
  }
  return result;
}
__name(getRawTag, "getRawTag");
var getRawTag_default = getRawTag;
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value2) {
  return nativeObjectToString2.call(value2);
}
__name(objectToString, "objectToString");
var objectToString_default = objectToString;
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag_default(value2) : objectToString_default(value2);
}
__name(baseGetTag, "baseGetTag");
var baseGetTag_default = baseGetTag;
var isArray2 = Array.isArray;
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function isObject2(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
__name(isObject2, "isObject2");
var isObject_default = isObject2;
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value2) {
  if (!isObject_default(value2)) {
    return false;
  }
  var tag = baseGetTag_default(value2);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
__name(isFunction, "isFunction");
var isFunction_default = isFunction;
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
})();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
__name(isMasked, "isMasked");
var isMasked_default = isMasked;
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
__name(toSource, "toSource");
var toSource_default = toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value2) {
  if (!isObject_default(value2) || isMasked_default(value2)) {
    return false;
  }
  var pattern = isFunction_default(value2) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value2));
}
__name(baseIsNative, "baseIsNative");
var baseIsNative_default = baseIsNative;
function getValue(object2, key) {
  return object2 == null ? void 0 : object2[key];
}
__name(getValue, "getValue");
var getValue_default = getValue;
function getNative(object2, key) {
  var value2 = getValue_default(object2, key);
  return baseIsNative_default(value2) ? value2 : void 0;
}
__name(getNative, "getNative");
var getNative_default = getNative;
function eq(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
__name(eq, "eq");
var eq_default = eq;
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
__name(hashClear, "hashClear");
var hashClear_default = hashClear;
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
__name(hashDelete, "hashDelete");
var hashDelete_default = hashDelete;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty3.call(data, key) ? data[key] : void 0;
}
__name(hashGet, "hashGet");
var hashGet_default = hashGet;
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
}
__name(hashHas, "hashHas");
var hashHas_default = hashHas;
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value2) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value2 === void 0 ? HASH_UNDEFINED2 : value2;
  return this;
}
__name(hashSet, "hashSet");
var hashSet_default = hashSet;
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
__name(Hash, "Hash");
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
__name(listCacheClear, "listCacheClear");
var listCacheClear_default = listCacheClear;
function assocIndexOf(array2, key) {
  var length = array2.length;
  while (length--) {
    if (eq_default(array2[length][0], key)) {
      return length;
    }
  }
  return -1;
}
__name(assocIndexOf, "assocIndexOf");
var assocIndexOf_default = assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
__name(listCacheDelete, "listCacheDelete");
var listCacheDelete_default = listCacheDelete;
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
__name(listCacheGet, "listCacheGet");
var listCacheGet_default = listCacheGet;
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
__name(listCacheHas, "listCacheHas");
var listCacheHas_default = listCacheHas;
function listCacheSet(key, value2) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value2]);
  } else {
    data[index][1] = value2;
  }
  return this;
}
__name(listCacheSet, "listCacheSet");
var listCacheSet_default = listCacheSet;
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
__name(ListCache, "ListCache");
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
__name(mapCacheClear, "mapCacheClear");
var mapCacheClear_default = mapCacheClear;
function isKeyable(value2) {
  var type = typeof value2;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
}
__name(isKeyable, "isKeyable");
var isKeyable_default = isKeyable;
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
__name(getMapData, "getMapData");
var getMapData_default = getMapData;
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
__name(mapCacheDelete, "mapCacheDelete");
var mapCacheDelete_default = mapCacheDelete;
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
__name(mapCacheGet, "mapCacheGet");
var mapCacheGet_default = mapCacheGet;
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
__name(mapCacheHas, "mapCacheHas");
var mapCacheHas_default = mapCacheHas;
function mapCacheSet(key, value2) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value2);
  this.size += data.size == size ? 0 : 1;
  return this;
}
__name(mapCacheSet, "mapCacheSet");
var mapCacheSet_default = mapCacheSet;
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
__name(MapCache, "MapCache");
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize2(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = __name(function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  }, "memoized");
  memoized.cache = new (memoize2.Cache || MapCache_default)();
  return memoized;
}
__name(memoize2, "memoize");
memoize2.Cache = MapCache_default;
var memoize_default = memoize2;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
__name(memoizeCapped, "memoizeCapped");
var memoizeCapped_default = memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
  });
  return result;
});
var INFINITY2 = 1 / 0;
var isObject3 = isObject;
var dateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$/;
function convertUnconventionalData(data) {
  if (!isObject3(data)) {
    return data;
  }
  let result = data;
  let wasMutated = false;
  if (typeof Event !== "undefined" && data instanceof Event) {
    result = extractEventHiddenProperties(result);
    wasMutated = true;
  }
  result = Object.keys(result).reduce((acc, key) => {
    try {
      if (result[key]) {
        result[key].toJSON;
      }
      acc[key] = result[key];
    } catch (_err) {
      wasMutated = true;
    }
    return acc;
  }, {});
  return wasMutated ? result : data;
}
__name(convertUnconventionalData, "convertUnconventionalData");
var replacer = __name(function replacer2(options) {
  let objects;
  let map;
  let stack;
  let keys;
  return __name(function replace(key, value2) {
    try {
      if (key === "") {
        keys = [];
        objects = /* @__PURE__ */ new Map([[value2, "[]"]]);
        map = /* @__PURE__ */ new Map();
        stack = [];
        return value2;
      }
      const origin = map.get(this) || this;
      while (stack.length && origin !== stack[0]) {
        stack.shift();
        keys.pop();
      }
      if (typeof value2 === "boolean") {
        return value2;
      }
      if (value2 === void 0) {
        if (!options.allowUndefined) {
          return void 0;
        }
        return "_undefined_";
      }
      if (value2 === null) {
        return null;
      }
      if (typeof value2 === "number") {
        if (value2 === Number.NEGATIVE_INFINITY) {
          return "_-Infinity_";
        }
        if (value2 === Number.POSITIVE_INFINITY) {
          return "_Infinity_";
        }
        if (Number.isNaN(value2)) {
          return "_NaN_";
        }
        return value2;
      }
      if (typeof value2 === "bigint") {
        return `_bigint_${value2.toString()}`;
      }
      if (typeof value2 === "string") {
        if (dateFormat.test(value2)) {
          if (!options.allowDate) {
            return void 0;
          }
          return `_date_${value2}`;
        }
        return value2;
      }
      if ((0, import_is_regex.default)(value2)) {
        if (!options.allowRegExp) {
          return void 0;
        }
        return `_regexp_${value2.flags}|${value2.source}`;
      }
      if ((0, import_is_function.default)(value2)) {
        return void 0;
      }
      if ((0, import_is_symbol.default)(value2)) {
        if (!options.allowSymbol) {
          return void 0;
        }
        const globalRegistryKey = Symbol.keyFor(value2);
        if (globalRegistryKey !== void 0) {
          return `_gsymbol_${globalRegistryKey}`;
        }
        return `_symbol_${value2.toString().slice(7, -1)}`;
      }
      if (stack.length >= options.maxDepth) {
        if (Array.isArray(value2)) {
          return `[Array(${value2.length})]`;
        }
        return "[Object]";
      }
      if (value2 === this) {
        return `_duplicate_${JSON.stringify(keys)}`;
      }
      if (value2 instanceof Error && options.allowError) {
        return {
          __isConvertedError__: true,
          errorProperties: {
            // @ts-expect-error cause is not defined in the current tsconfig target(es2020)
            ...value2.cause ? { cause: value2.cause } : {},
            ...value2,
            name: value2.name,
            message: value2.message,
            stack: value2.stack,
            "_constructor-name_": value2.constructor.name
          }
        };
      }
      if (value2?.constructor?.name && value2.constructor.name !== "Object" && !Array.isArray(value2)) {
        const found2 = objects.get(value2);
        if (!found2) {
          const plainObject = {
            __isClassInstance__: true,
            __className__: value2.constructor.name,
            ...Object.getOwnPropertyNames(value2).reduce(
              (acc, prop) => {
                try {
                  acc[prop] = value2[prop];
                } catch (_err) {
                }
                return acc;
              },
              {}
            )
          };
          keys.push(key);
          stack.unshift(plainObject);
          objects.set(value2, JSON.stringify(keys));
          if (value2 !== plainObject) {
            map.set(value2, plainObject);
          }
          return plainObject;
        }
        return `_duplicate_${found2}`;
      }
      const found = objects.get(value2);
      if (!found) {
        const converted = Array.isArray(value2) ? value2 : convertUnconventionalData(value2);
        keys.push(key);
        stack.unshift(converted);
        objects.set(value2, JSON.stringify(keys));
        if (value2 !== converted) {
          map.set(value2, converted);
        }
        return converted;
      }
      return `_duplicate_${found}`;
    } catch (_e2) {
      return void 0;
    }
  }, "replace");
}, "replacer2");
var defaultOptions = {
  maxDepth: 10,
  space: void 0,
  allowRegExp: true,
  allowDate: true,
  allowError: true,
  allowUndefined: true,
  allowSymbol: true
};
var stringify = __name((data, options = {}) => {
  const mergedOptions = { ...defaultOptions, ...options };
  return JSON.stringify(convertUnconventionalData(data), replacer(mergedOptions), options.space);
}, "stringify");
function argsHash(args) {
  return stringify(args, { maxDepth: 50 });
}
__name(argsHash, "argsHash");
var SourceContext = (0, import_react45.createContext)({ sources: {} });
var UNKNOWN_ARGS_HASH = "--unknown--";
var SourceContainer = __name(({
  children,
  channel
}) => {
  const [sources, setSources] = (0, import_react45.useState)({});
  (0, import_react45.useEffect)(() => {
    const handleSnippetRendered = __name((idOrEvent, inputSource = null, inputFormat = false) => {
      const {
        id,
        args = void 0,
        source,
        format: format22
      } = typeof idOrEvent === "string" ? {
        id: idOrEvent,
        source: inputSource,
        format: inputFormat
      } : idOrEvent;
      const hash = args ? argsHash(args) : UNKNOWN_ARGS_HASH;
      setSources((current) => {
        const newSources = {
          ...current,
          [id]: {
            ...current[id],
            [hash]: { code: source || "", format: format22 }
          }
        };
        return newSources;
      });
    }, "handleSnippetRendered");
    channel.on(SNIPPET_RENDERED, handleSnippetRendered);
    return () => channel.off(SNIPPET_RENDERED, handleSnippetRendered);
  }, []);
  return import_react45.default.createElement(SourceContext.Provider, { value: { sources } }, children);
}, "SourceContainer");
function useTransformCode(source, transform, storyContext) {
  const [transformedCode, setTransformedCode] = (0, import_react46.useState)("Transforming...");
  const transformed = transform ? transform?.(source, storyContext) : source;
  (0, import_react46.useEffect)(() => {
    async function getTransformedCode() {
      const transformResult = await transformed;
      if (transformResult !== transformedCode) {
        setTransformedCode(transformResult);
      }
    }
    __name(getTransformedCode, "getTransformedCode");
    getTransformedCode();
  });
  if (typeof transformed === "object" && typeof transformed.then === "function") {
    return transformedCode;
  }
  return transformed;
}
__name(useTransformCode, "useTransformCode");
var getStorySource = __name((storyId, args, sourceContext) => {
  const { sources } = sourceContext;
  const sourceMap = sources?.[storyId];
  const source = sourceMap?.[argsHash(args)] || sourceMap?.[UNKNOWN_ARGS_HASH];
  return source || { code: "" };
}, "getStorySource");
var useCode = __name(({
  snippet,
  storyContext,
  typeFromProps,
  transformFromProps
}) => {
  const parameters = storyContext.parameters ?? {};
  const { __isArgsStory: isArgsStory } = parameters;
  const sourceParameters = parameters.docs?.source || {};
  const type = typeFromProps || sourceParameters.type || SourceType.AUTO;
  const useSnippet = (
    // if user has explicitly set this as dynamic, use snippet
    type === SourceType.DYNAMIC || // if this is an args story and there's a snippet
    type === SourceType.AUTO && snippet && isArgsStory
  );
  const code = useSnippet ? snippet : sourceParameters.originalSource || "";
  const transformer = transformFromProps ?? sourceParameters.transform;
  const transformedCode = transformer ? useTransformCode(code, transformer, storyContext) : code;
  if (sourceParameters.code !== void 0) {
    return sourceParameters.code;
  }
  return transformedCode;
}, "useCode");
var useSourceProps = __name((props, docsContext, sourceContext) => {
  const { of } = props;
  const story = (0, import_react44.useMemo)(() => {
    if (of) {
      const resolved = docsContext.resolveOf(of, ["story"]);
      return resolved.story;
    } else {
      try {
        return docsContext.storyById();
      } catch (err) {
      }
    }
  }, [docsContext, of]);
  const storyContext = story ? docsContext.getStoryContext(story) : {};
  const argsForSource = props.__forceInitialArgs ? storyContext.initialArgs : storyContext.unmappedArgs;
  const source = story ? getStorySource(story.id, argsForSource, sourceContext) : null;
  const transformedCode = useCode({
    snippet: source ? source.code : "",
    storyContext: { ...storyContext, args: argsForSource },
    typeFromProps: props.type,
    transformFromProps: props.transform
  });
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const sourceParameters = story?.parameters?.docs?.source || {};
  let format22 = props.format;
  const language = props.language ?? sourceParameters.language ?? "jsx";
  const dark = props.dark ?? sourceParameters.dark ?? false;
  if (!props.code && !story) {
    return {
      error: "Oh no! The source is not available."
      /* SOURCE_UNAVAILABLE */
    };
  }
  if (props.code) {
    return {
      code: props.code,
      format: format22,
      language,
      dark
    };
  }
  format22 = source?.format ?? true;
  return {
    code: transformedCode,
    format: format22,
    language,
    dark
  };
}, "useSourceProps");
var Source2 = __name((props) => {
  const sourceContext = (0, import_react44.useContext)(SourceContext);
  const docsContext = (0, import_react44.useContext)(DocsContext);
  const sourceProps = useSourceProps(props, docsContext, sourceContext);
  return import_react44.default.createElement(Source, { ...sourceProps });
}, "Source");
var Canvas = __name((props) => {
  const docsContext = (0, import_react43.useContext)(DocsContext);
  const sourceContext = (0, import_react43.useContext)(SourceContext);
  const { of, source } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const { story } = useOf(of || "story", ["story"]);
  const sourceProps = useSourceProps({ ...source, ...of && { of } }, docsContext, sourceContext);
  const layout = props.layout ?? story.parameters.layout ?? story.parameters.docs?.canvas?.layout ?? "padded";
  const withToolbar = props.withToolbar ?? story.parameters.docs?.canvas?.withToolbar ?? false;
  const additionalActions = props.additionalActions ?? story.parameters.docs?.canvas?.additionalActions;
  const sourceState = props.sourceState ?? story.parameters.docs?.canvas?.sourceState ?? "hidden";
  const className = props.className ?? story.parameters.docs?.canvas?.className;
  const inline = props.story?.inline ?? story.parameters?.docs?.story?.inline ?? false;
  return import_react43.default.createElement(
    Preview,
    {
      withSource: sourceState === "none" ? void 0 : sourceProps,
      isExpanded: sourceState === "shown",
      withToolbar,
      additionalActions,
      className,
      layout,
      inline
    },
    import_react43.default.createElement(Story2, { of: of || story.moduleExport, meta: props.meta, ...props.story })
  );
}, "Canvas");
var useArgs = __name((story, context) => {
  const result = useArgsIfDefined(story, context);
  if (!result) {
    throw new Error("No result when story was defined");
  }
  return result;
}, "useArgs");
var useArgsIfDefined = __name((story, context) => {
  const storyContext = story ? context.getStoryContext(story) : { args: {} };
  const { id: storyId } = story || { id: "none" };
  const [args, setArgs] = (0, import_react48.useState)(storyContext.args);
  (0, import_react48.useEffect)(() => {
    const onArgsUpdated = __name((changed) => {
      if (changed.storyId === storyId) {
        setArgs(changed.args);
      }
    }, "onArgsUpdated");
    context.channel.on(import_core_events2.STORY_ARGS_UPDATED, onArgsUpdated);
    return () => context.channel.off(import_core_events2.STORY_ARGS_UPDATED, onArgsUpdated);
  }, [storyId, context.channel]);
  const updateArgs = (0, import_react48.useCallback)(
    (updatedArgs) => context.channel.emit(import_core_events2.UPDATE_STORY_ARGS, { storyId, updatedArgs }),
    [storyId, context.channel]
  );
  const resetArgs = (0, import_react48.useCallback)(
    (argNames) => context.channel.emit(import_core_events2.RESET_STORY_ARGS, { storyId, argNames }),
    [storyId, context.channel]
  );
  return story && [args, updateArgs, resetArgs];
}, "useArgsIfDefined");
var useGlobals = __name((story, context) => {
  const storyContext = context.getStoryContext(story);
  const [globals, setGlobals] = (0, import_react49.useState)(storyContext.globals);
  (0, import_react49.useEffect)(() => {
    const onGlobalsUpdated = __name((changed) => {
      setGlobals(changed.globals);
    }, "onGlobalsUpdated");
    context.channel.on(import_core_events3.GLOBALS_UPDATED, onGlobalsUpdated);
    return () => context.channel.off(import_core_events3.GLOBALS_UPDATED, onGlobalsUpdated);
  }, [context.channel]);
  return [globals];
}, "useGlobals");
function extractComponentArgTypes2(component, parameters) {
  const { extractArgTypes } = parameters.docs || {};
  if (!extractArgTypes) {
    throw new Error(
      "Args unsupported. See Args documentation for your framework."
      /* ARGS_UNSUPPORTED */
    );
  }
  return extractArgTypes(component);
}
__name(extractComponentArgTypes2, "extractComponentArgTypes");
var Controls3 = __name((props) => {
  const { of } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const context = (0, import_react47.useContext)(DocsContext);
  const { story } = context.resolveOf(of || "story", ["story"]);
  const { parameters, argTypes, component, subcomponents } = story;
  const controlsParameters = parameters.docs?.controls || {};
  const include = props.include ?? controlsParameters.include;
  const exclude = props.exclude ?? controlsParameters.exclude;
  const sort = props.sort ?? controlsParameters.sort;
  const [args, updateArgs, resetArgs] = useArgs(story, context);
  const [globals] = useGlobals(story, context);
  const filteredArgTypes = (0, import_preview_api2.filterArgTypes)(argTypes, include, exclude);
  const hasSubcomponents = Boolean(subcomponents) && Object.keys(subcomponents || {}).length > 0;
  if (!hasSubcomponents) {
    if (!(Object.keys(filteredArgTypes).length > 0 || Object.keys(args).length > 0)) {
      return null;
    }
    return import_react47.default.createElement(
      ArgsTable,
      {
        rows: filteredArgTypes,
        sort,
        args,
        globals,
        updateArgs,
        resetArgs
      }
    );
  }
  const mainComponentName = getComponentName(component) || "Story";
  const subcomponentTabs = Object.fromEntries(
    Object.entries(subcomponents || {}).map(([key, comp]) => [
      key,
      {
        rows: (0, import_preview_api2.filterArgTypes)(extractComponentArgTypes2(comp, parameters), include, exclude),
        sort
      }
    ])
  );
  const tabs = {
    [mainComponentName]: { rows: filteredArgTypes, sort },
    ...subcomponentTabs
  };
  return import_react47.default.createElement(
    TabbedArgsTable,
    {
      tabs,
      sort,
      args,
      globals,
      updateArgs,
      resetArgs
    }
  );
}, "Controls");
var { document: document2 } = globalThis;
var assertIsFn = __name((val) => {
  if (typeof val !== "function") {
    throw new Error(`Expected story function, got: ${val}`);
  }
  return val;
}, "assertIsFn");
var AddContext = __name((props) => {
  const { children, ...rest } = props;
  const parentContext = import_react52.default.useContext(DocsContext);
  return import_react52.default.createElement(DocsContext.Provider, { value: { ...parentContext, ...rest } }, children);
}, "AddContext");
var CodeOrSourceMdx = __name(({
  className,
  children,
  ...rest
}) => {
  if (typeof className !== "string" && (typeof children !== "string" || !children.match(/[\n\r]/g))) {
    return import_react52.default.createElement(Code, null, children);
  }
  const language = className && className.split("-");
  return import_react52.default.createElement(
    Source,
    {
      language: language && language[1] || "text",
      format: false,
      code: children,
      ...rest
    }
  );
}, "CodeOrSourceMdx");
function navigate(context, url) {
  context.channel.emit(import_core_events4.NAVIGATE_URL, url);
}
__name(navigate, "navigate");
var A2 = components2.a;
var AnchorInPage = __name(({ hash, children }) => {
  const context = (0, import_react52.useContext)(DocsContext);
  return import_react52.default.createElement(
    A2,
    {
      href: hash,
      target: "_self",
      onClick: (event) => {
        const id = hash.substring(1);
        const element = document2.getElementById(id);
        if (element) {
          navigate(context, hash);
        }
      }
    },
    children
  );
}, "AnchorInPage");
var AnchorMdx = __name((props) => {
  const { href, target, children, ...rest } = props;
  const context = (0, import_react52.useContext)(DocsContext);
  if (!href || target === "_blank" || /^https?:\/\//.test(href)) {
    return import_react52.default.createElement(A2, { ...props });
  }
  if (href.startsWith("#")) {
    return import_react52.default.createElement(AnchorInPage, { hash: href }, children);
  }
  return import_react52.default.createElement(
    A2,
    {
      href,
      onClick: (event) => {
        const LEFT_BUTTON = 0;
        const isLeftClick = event.button === LEFT_BUTTON && !event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey;
        if (isLeftClick) {
          event.preventDefault();
          navigate(context, event.currentTarget.getAttribute("href") || "");
        }
      },
      target,
      ...rest
    },
    children
  );
}, "AnchorMdx");
var SUPPORTED_MDX_HEADERS = ["h1", "h2", "h3", "h4", "h5", "h6"];
var OcticonHeaders = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    [headerType]: styled(headerType)({
      "& svg": {
        position: "relative",
        top: "-0.1em",
        visibility: "hidden"
      },
      "&:hover svg": {
        visibility: "visible"
      }
    })
  }),
  {}
);
var OcticonAnchor = styled.a(
  () => ({
    float: "left",
    lineHeight: "inherit",
    paddingRight: "10px",
    marginLeft: "-24px",
    // Allow the theme's text color to override the default link color.
    color: "inherit"
  })
);
var HeaderWithOcticonAnchor = __name(({
  as,
  id,
  children,
  ...rest
}) => {
  const context = (0, import_react52.useContext)(DocsContext);
  const OcticonHeader = OcticonHeaders[as];
  const hash = `#${id}`;
  return import_react52.default.createElement(OcticonHeader, { id, ...rest }, import_react52.default.createElement(
    OcticonAnchor,
    {
      "aria-hidden": "true",
      href: hash,
      tabIndex: -1,
      target: "_self",
      onClick: (event) => {
        const element = document2.getElementById(id);
        if (element) {
          navigate(context, hash);
        }
      }
    },
    import_react52.default.createElement(LinkIcon, null)
  ), children);
}, "HeaderWithOcticonAnchor");
var HeaderMdx = __name((props) => {
  const { as, id, children, ...rest } = props;
  if (id) {
    return import_react52.default.createElement(HeaderWithOcticonAnchor, { as, id, ...rest }, children);
  }
  const Component4 = as;
  const { as: omittedAs, ...withoutAs } = props;
  return import_react52.default.createElement(Component4, { ...nameSpaceClassNames(withoutAs, as) });
}, "HeaderMdx");
var HeadersMdx = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    // @ts-expect-error (Converted from ts-ignore)
    [headerType]: (props) => import_react52.default.createElement(HeaderMdx, { as: headerType, ...props })
  }),
  {}
);
var Markdown = __name((props) => {
  if (!props.children) {
    return null;
  }
  if (typeof props.children !== "string") {
    throw new Error(
      dedent`The Markdown block only accepts children as a single string, but children were of type: '${typeof props.children}'
        This is often caused by not wrapping the child in a template string.
        
        This is invalid:
        <Markdown>
          # Some heading
          A paragraph
        </Markdown>

        Instead do:
        <Markdown>
        {\`
          # Some heading
          A paragraph
        \`}
        </Markdown>
      `
    );
  }
  return import_react51.default.createElement(
    index_modern_default,
    {
      ...props,
      options: {
        forceBlock: true,
        overrides: {
          code: CodeOrSourceMdx,
          a: AnchorMdx,
          ...HeadersMdx,
          ...props?.options?.overrides
        },
        ...props?.options
      }
    }
  );
}, "Markdown");
var DescriptionType = ((DescriptionType2) => {
  DescriptionType2["INFO"] = "info";
  DescriptionType2["NOTES"] = "notes";
  DescriptionType2["DOCGEN"] = "docgen";
  DescriptionType2["AUTO"] = "auto";
  return DescriptionType2;
})(DescriptionType || {});
var getDescriptionFromResolvedOf = __name((resolvedOf) => {
  switch (resolvedOf.type) {
    case "story": {
      return resolvedOf.story.parameters.docs?.description?.story || null;
    }
    case "meta": {
      const { parameters, component } = resolvedOf.preparedMeta;
      const metaDescription = parameters.docs?.description?.component;
      if (metaDescription) {
        return metaDescription;
      }
      return parameters.docs?.extractComponentDescription?.(component, {
        component,
        parameters
      }) || null;
    }
    case "component": {
      const {
        component,
        projectAnnotations: { parameters }
      } = resolvedOf;
      return parameters?.docs?.extractComponentDescription?.(component, {
        component,
        parameters
      }) || null;
    }
    default: {
      throw new Error(
        `Unrecognized module type resolved from 'useOf', got: ${resolvedOf.type}`
      );
    }
  }
}, "getDescriptionFromResolvedOf");
var DescriptionContainer = __name((props) => {
  const { of } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const resolvedOf = useOf(of || "meta");
  const markdown = getDescriptionFromResolvedOf(resolvedOf);
  return markdown ? import_react50.default.createElement(Markdown, null, markdown) : null;
}, "DescriptionContainer");
var { document: document3, window: globalWindow3 } = globalThis;
var DocsContainer = __name(({
  context,
  theme,
  children
}) => {
  let toc;
  try {
    const meta = context.resolveOf("meta", ["meta"]);
    toc = meta.preparedMeta.parameters?.docs?.toc;
  } catch (err) {
    toc = context?.projectAnnotations?.parameters?.docs?.toc;
  }
  (0, import_react54.useEffect)(() => {
    let url;
    try {
      url = new URL(globalWindow3.parent.location.toString());
      if (url.hash) {
        const element = document3.getElementById(decodeURIComponent(url.hash.substring(1)));
        if (element) {
          setTimeout(() => {
            scrollToElement(element);
          }, 200);
        }
      }
    } catch (err) {
    }
  });
  return import_react54.default.createElement(DocsContext.Provider, { value: context }, import_react54.default.createElement(SourceContainer, { channel: context.channel }, import_react54.default.createElement(ThemeProvider, { theme: ensure(theme) }, import_react54.default.createElement(
    DocsPageWrapper,
    {
      toc: toc ? import_react54.default.createElement(
        TableOfContents,
        {
          className: "sbdocs sbdocs-toc--custom",
          channel: context.channel,
          ...toc
        }
      ) : null
    },
    children
  ))));
}, "DocsContainer");
var regex = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;
var own = Object.hasOwnProperty;
var _BananaSlug = class _BananaSlug2 {
  /**
   * Create a new slug class.
   */
  constructor() {
    this.occurrences;
    this.reset();
  }
  /**
   * Generate a unique slug.
  *
  * Tracks previously generated slugs: repeated calls with the same value
  * will result in different slugs.
  * Use the `slug` function to get same slugs.
   *
   * @param  {string} value
   *   String of text to slugify
   * @param  {boolean} [maintainCase=false]
   *   Keep the current case, otherwise make all lowercase
   * @return {string}
   *   A unique slug string
   */
  slug(value2, maintainCase) {
    const self2 = this;
    let result = slug(value2, maintainCase === true);
    const originalSlug = result;
    while (own.call(self2.occurrences, result)) {
      self2.occurrences[originalSlug]++;
      result = originalSlug + "-" + self2.occurrences[originalSlug];
    }
    self2.occurrences[result] = 0;
    return result;
  }
  /**
   * Reset - Forget all previous slugs
   *
   * @return void
   */
  reset() {
    this.occurrences = /* @__PURE__ */ Object.create(null);
  }
};
__name(_BananaSlug, "BananaSlug");
var BananaSlug = _BananaSlug;
function slug(value2, maintainCase) {
  if (typeof value2 !== "string") return "";
  if (!maintainCase) value2 = value2.toLowerCase();
  return value2.replace(regex, "").replace(/ /g, "-");
}
__name(slug, "slug");
var slugs = new BananaSlug();
var Heading2 = __name(({
  children,
  disableAnchor,
  ...props
}) => {
  if (disableAnchor || typeof children !== "string") {
    return import_react59.default.createElement(H2, null, children);
  }
  const tagID = slugs.slug(children.toLowerCase());
  return import_react59.default.createElement(HeaderMdx, { as: "h2", id: tagID, ...props }, children);
}, "Heading");
var Subheading = __name(({ children, disableAnchor }) => {
  if (disableAnchor || typeof children !== "string") {
    return import_react58.default.createElement(H3, null, children);
  }
  const tagID = slugs.slug(children.toLowerCase());
  return import_react58.default.createElement(HeaderMdx, { as: "h3", id: tagID }, children);
}, "Subheading");
var DocsStory = __name(({
  of,
  expanded = true,
  withToolbar: withToolbarProp = false,
  __forceInitialArgs = false,
  __primary = false
}) => {
  const { story } = useOf(of || "story", ["story"]);
  const withToolbar = story.parameters.docs?.canvas?.withToolbar ?? withToolbarProp;
  return import_react57.default.createElement(Anchor, { storyId: story.id }, expanded && import_react57.default.createElement(import_react57.default.Fragment, null, import_react57.default.createElement(Subheading, null, story.name), import_react57.default.createElement(DescriptionContainer, { of })), import_react57.default.createElement(
    Canvas,
    {
      of,
      withToolbar,
      story: { __forceInitialArgs, __primary },
      source: { __forceInitialArgs }
    }
  ));
}, "DocsStory");
var Primary = __name((props) => {
  const { of } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  const { csfFile } = useOf(of || "meta", ["meta"]);
  const context = (0, import_react56.useContext)(DocsContext);
  const primaryStory = context.componentStoriesFromCSFFile(csfFile)[0];
  return primaryStory ? import_react56.default.createElement(DocsStory, { of: primaryStory.moduleExport, expanded: false, __primary: true, withToolbar: true }) : null;
}, "Primary");
var StyledHeading = styled(Heading2)(({ theme }) => ({
  fontSize: `${theme.typography.size.s2 - 1}px`,
  fontWeight: theme.typography.weight.bold,
  lineHeight: "16px",
  letterSpacing: "0.35em",
  textTransform: "uppercase",
  color: theme.textMutedColor,
  border: 0,
  marginBottom: "12px",
  "&:first-of-type": {
    // specificity issue
    marginTop: "56px"
  }
}));
var Stories = __name(({ title = "Stories", includePrimary = true }) => {
  const { componentStories, projectAnnotations, getStoryContext } = (0, import_react60.useContext)(DocsContext);
  let stories = componentStories();
  const { stories: { filter } = { filter: void 0 } } = projectAnnotations.parameters?.docs || {};
  if (filter) {
    stories = stories.filter((story) => filter(story, getStoryContext(story)));
  }
  const hasAutodocsTaggedStory = stories.some((story) => story.tags?.includes("autodocs"));
  if (hasAutodocsTaggedStory) {
    stories = stories.filter((story) => story.tags?.includes("autodocs") && !story.usesMount);
  }
  if (!includePrimary) {
    stories = stories.slice(1);
  }
  if (!stories || stories.length === 0) {
    return null;
  }
  return import_react60.default.createElement(import_react60.default.Fragment, null, typeof title === "string" ? import_react60.default.createElement(StyledHeading, null, title) : title, stories.map(
    (story) => story && import_react60.default.createElement(DocsStory, { key: story.id, of: story.moduleExport, expanded: true, __forceInitialArgs: true })
  ));
}, "Stories");
var DEPRECATION_MIGRATION_LINK = "https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#subtitle-block-and-parameterscomponentsubtitle";
var Subtitle2 = __name((props) => {
  const { of, children } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  let preparedMeta;
  try {
    preparedMeta = useOf(of || "meta", ["meta"]).preparedMeta;
  } catch (error) {
    if (children && !error.message.includes("did you forget to use <Meta of={} />?")) {
      throw error;
    }
  }
  const { componentSubtitle, docs } = preparedMeta?.parameters || {};
  if (componentSubtitle) {
    (0, import_client_logger5.deprecate)(
      `Using 'parameters.componentSubtitle' property to subtitle stories is deprecated. See ${DEPRECATION_MIGRATION_LINK}`
    );
  }
  const content = children || docs?.subtitle || componentSubtitle;
  return content ? import_react61.default.createElement(Subtitle, { className: "sbdocs-subtitle sb-unstyled" }, content) : null;
}, "Subtitle");
var STORY_KIND_PATH_SEPARATOR = /\s*\/\s*/;
var extractTitle = __name((title) => {
  const groups = title.trim().split(STORY_KIND_PATH_SEPARATOR);
  return groups?.[groups?.length - 1] || title;
}, "extractTitle");
var Title3 = __name((props) => {
  const { children, of } = props;
  if ("of" in props && of === void 0) {
    throw new Error("Unexpected `of={undefined}`, did you mistype a CSF file reference?");
  }
  let preparedMeta;
  try {
    preparedMeta = useOf(of || "meta", ["meta"]).preparedMeta;
  } catch (error) {
    if (children && error instanceof Error && !error.message.includes("did you forget to use <Meta of={} />?")) {
      throw error;
    }
  }
  const content = children || extractTitle(preparedMeta?.title || "");
  return content ? import_react62.default.createElement(Title, { className: "sbdocs-title sb-unstyled" }, content) : null;
}, "Title");
var DocsPage = __name(() => {
  const resolvedOf = useOf("meta", ["meta"]);
  const { stories } = resolvedOf.csfFile;
  const isSingleStory = Object.keys(stories).length === 1;
  return import_react55.default.createElement(import_react55.default.Fragment, null, import_react55.default.createElement(Title3, null), import_react55.default.createElement(Subtitle2, null), import_react55.default.createElement(DescriptionContainer, { of: "meta" }), isSingleStory ? import_react55.default.createElement(DescriptionContainer, { of: "story" }) : null, import_react55.default.createElement(Primary, null), import_react55.default.createElement(Controls3, null), isSingleStory ? null : import_react55.default.createElement(Stories, null));
}, "DocsPage");
function Docs({
  context,
  docsParameter
}) {
  const Container2 = docsParameter.container || DocsContainer;
  const Page = docsParameter.page || DocsPage;
  return import_react53.default.createElement(Container2, { context, theme: docsParameter.theme }, import_react53.default.createElement(Page, null));
}
__name(Docs, "Docs");
var _ExternalDocsContext = class _ExternalDocsContext2 extends import_preview_api5.DocsContext {
  constructor(channel, store, renderStoryToElement, processMetaExports) {
    super(
      channel,
      store,
      renderStoryToElement,
      []
    );
    this.channel = channel;
    this.store = store;
    this.renderStoryToElement = renderStoryToElement;
    this.processMetaExports = processMetaExports;
    this.referenceMeta = __name((metaExports, attach) => {
      const csfFile = this.processMetaExports(metaExports);
      this.referenceCSFFile(csfFile);
      super.referenceMeta(metaExports, attach);
    }, "referenceMeta");
  }
};
__name(_ExternalDocsContext, "ExternalDocsContext");
var ExternalDocsContext = _ExternalDocsContext;
var _ConstantMap = class _ConstantMap2 {
  constructor(prefix) {
    this.prefix = prefix;
    this.entries = /* @__PURE__ */ new Map();
  }
  get(key) {
    if (!this.entries.has(key)) {
      this.entries.set(key, `${this.prefix}${this.entries.size}`);
    }
    return this.entries.get(key);
  }
};
__name(_ConstantMap, "ConstantMap");
var ConstantMap = _ConstantMap;
var _ExternalPreview = class _ExternalPreview2 extends import_preview_api4.Preview {
  constructor(projectAnnotations) {
    const importFn = __name((path) => {
      return Promise.resolve(this.moduleExportsByImportPath[path]);
    }, "importFn");
    const getProjectAnnotations = __name(() => (0, import_preview_api4.composeConfigs)([
      { parameters: { docs: { story: { inline: true } } } },
      this.projectAnnotations
    ]), "getProjectAnnotations");
    super(importFn, getProjectAnnotations, new import_channels.Channel({}));
    this.projectAnnotations = projectAnnotations;
    this.importPaths = new ConstantMap("./importPath/");
    this.titles = new ConstantMap("title-");
    this.storyIndex = { v: 5, entries: {} };
    this.moduleExportsByImportPath = {};
    this.processMetaExports = __name((metaExports) => {
      const importPath = this.importPaths.get(metaExports);
      this.moduleExportsByImportPath[importPath] = metaExports;
      const title = metaExports.default.title || this.titles.get(metaExports);
      const csfFile = this.storyStoreValue.processCSFFileWithCache(
        metaExports,
        importPath,
        title
      );
      Object.values(csfFile.stories).forEach(({ id, name }) => {
        this.storyIndex.entries[id] = {
          id,
          importPath,
          title,
          name,
          type: "story",
          subtype: "story"
        };
      });
      this.onStoriesChanged({ storyIndex: this.storyIndex });
      return csfFile;
    }, "processMetaExports");
    this.docsContext = __name(() => {
      return new ExternalDocsContext(
        this.channel,
        this.storyStoreValue,
        this.renderStoryToElement.bind(this),
        this.processMetaExports.bind(this)
      );
    }, "docsContext");
  }
  async getStoryIndexFromServer() {
    return this.storyIndex;
  }
};
__name(_ExternalPreview, "ExternalPreview");
var ExternalPreview = _ExternalPreview;
function usePreview(projectAnnotations) {
  const previewRef = (0, import_react63.useRef)();
  if (!previewRef.current) {
    previewRef.current = new ExternalPreview(projectAnnotations);
  }
  return previewRef.current;
}
__name(usePreview, "usePreview");
function ExternalDocs({
  projectAnnotationsList,
  children
}) {
  const projectAnnotations = (0, import_preview_api3.composeConfigs)(projectAnnotationsList);
  const preview2 = usePreview(projectAnnotations);
  const docsParameter = {
    ...projectAnnotations.parameters?.docs,
    page: __name(() => children, "page")
  };
  const TDocs = Docs;
  return import_react63.default.createElement(TDocs, { docsParameter, context: preview2.docsContext() });
}
__name(ExternalDocs, "ExternalDocs");
var preview;
var ExternalDocsContainer = __name(({ projectAnnotations, children }) => {
  if (!preview) {
    preview = new ExternalPreview(projectAnnotations);
  }
  return import_react64.default.createElement(DocsContext.Provider, { value: preview.docsContext() }, import_react64.default.createElement(ThemeProvider, { theme: ensure(themes.light) }, children));
}, "ExternalDocsContainer");
var Meta = __name(({ of }) => {
  const context = (0, import_react65.useContext)(DocsContext);
  if (of) {
    context.referenceMeta(of, true);
  }
  try {
    const primary = context.storyById();
    return import_react65.default.createElement(Anchor, { storyId: primary.id });
  } catch (err) {
    return null;
  }
}, "Meta");
var Unstyled = __name((props) => import_react66.default.createElement("div", { ...props, className: "sb-unstyled" }), "Unstyled");
var Wrapper9 = __name(({ children }) => import_react67.default.createElement("div", { style: { fontFamily: "sans-serif" } }, children), "Wrapper");
var PRIMARY_STORY = "^";

export {
  DocsContext,
  getStoryId,
  getStoryProps,
  Story2,
  Typeset,
  ColorItem,
  ColorPalette,
  IconItem,
  IconGallery,
  TableOfContents,
  BooleanControl,
  parseDate,
  parseTime,
  formatDate,
  formatTime,
  DateControl,
  parse2,
  format2 as format,
  NumberControl,
  OptionsControl,
  ObjectControl,
  RangeControl,
  TextControl,
  FilesControl,
  ColorControl,
  ArgsTable,
  anchorBlockIdFromId,
  Anchor,
  useOf,
  ArgTypes,
  argsHash,
  SourceContext,
  UNKNOWN_ARGS_HASH,
  SourceContainer,
  useSourceProps,
  Source2,
  Canvas,
  Controls3,
  assertIsFn,
  AddContext,
  CodeOrSourceMdx,
  AnchorMdx,
  HeaderMdx,
  HeadersMdx,
  Markdown,
  DescriptionType,
  DescriptionContainer,
  DocsContainer,
  slugs,
  Heading2,
  Subheading,
  DocsStory,
  Primary,
  Stories,
  Subtitle2,
  extractTitle,
  Title3,
  DocsPage,
  Docs,
  ExternalDocs,
  ExternalDocsContainer,
  Meta,
  Unstyled,
  Wrapper9,
  PRIMARY_STORY
};
//# sourceMappingURL=chunk-IMDOD5WX.js.map
