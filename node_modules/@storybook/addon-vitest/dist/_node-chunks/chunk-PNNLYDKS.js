import CJS_COMPAT_NODE_URL_yq6slfj5rh from 'node:url';
import CJS_COMPAT_NODE_PATH_yq6slfj5rh from 'node:path';
import CJS_COMPAT_NODE_MODULE_yq6slfj5rh from "node:module";

var __filename = CJS_COMPAT_NODE_URL_yq6slfj5rh.fileURLToPath(import.meta.url);
var __dirname = CJS_COMPAT_NODE_PATH_yq6slfj5rh.dirname(__filename);
var require = CJS_COMPAT_NODE_MODULE_yq6slfj5rh.createRequire(import.meta.url);

// ------------------------------------------------------------
// end of CJS compatibility banner, injected by Storybook's esbuild configuration
// ------------------------------------------------------------
import {
  __name
} from "./chunk-DMVKAJJ2.js";

// src/utils.ts
function getAddonNames(mainConfig) {
  const addons = mainConfig.addons || [];
  const addonList = addons.map((addon) => {
    let name = "";
    if (typeof addon === "string") {
      name = addon;
    } else if (typeof addon === "object") {
      name = addon.name;
    }
    return name;
  });
  return addonList.filter((item) => item != null);
}
__name(getAddonNames, "getAddonNames");
function errorToErrorLike(error) {
  return {
    message: error.message,
    name: error.name,
    // avoid duplicating the error message in the stack trace
    stack: error.stack?.replace(error.message, ""),
    cause: error.cause && error.cause instanceof Error ? errorToErrorLike(error.cause) : void 0
  };
}
__name(errorToErrorLike, "errorToErrorLike");

// ../../node_modules/empathic/find.mjs
import { join as join2 } from "node:path";
import { existsSync, statSync } from "node:fs";

// ../../node_modules/empathic/walk.mjs
import { dirname } from "node:path";

// ../../node_modules/empathic/resolve.mjs
import { isAbsolute, join, resolve } from "node:path";
function absolute(input, root) {
  return isAbsolute(input) ? input : resolve(root || ".", input);
}
__name(absolute, "absolute");

// ../../node_modules/empathic/walk.mjs
function up(base, options) {
  let { last, cwd } = options || {};
  let tmp = absolute(base, cwd);
  let root = absolute(last || "/", cwd);
  let prev, arr = [];
  while (prev !== root) {
    arr.push(tmp);
    tmp = dirname(prev = tmp);
    if (tmp === prev) break;
  }
  return arr;
}
__name(up, "up");

// ../../node_modules/empathic/find.mjs
function up2(name, options) {
  let dir, tmp;
  let start = options && options.cwd || "";
  for (dir of up(start, options)) {
    tmp = join2(dir, name);
    if (existsSync(tmp)) return tmp;
  }
}
__name(up2, "up");
function any(names, options) {
  let dir, start = options && options.cwd || "";
  let j = 0, len = names.length, tmp;
  for (dir of up(start, options)) {
    for (j = 0; j < len; j++) {
      tmp = join2(dir, names[j]);
      if (existsSync(tmp)) return tmp;
    }
  }
}
__name(any, "any");

export {
  getAddonNames,
  errorToErrorLike,
  up2 as up,
  any
};
